
c:/Users/Acer/Desktop/ELEC4740_IoT/project/src/beta/target/1.5.0/argon/beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6e80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e2e0  000d6e84  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004a8  2003e348  2003e348  0002e348  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6eec  000d6eec  00026eec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6f14  000d6f14  00026f14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b1b20  00000000  00000000  00026f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000cb53  00000000  00000000  000d8a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ab46  00000000  00000000  000e558b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002340  00000000  00000000  001000d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004388  00000000  00000000  00102411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002eb58  00000000  00000000  00106799  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001db88  00000000  00000000  001352f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100254  00000000  00000000  00152e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6e4  00000000  00000000  002530d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fbd2 	bl	d67d6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fbf2 	bl	d6822 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2e0 	.word	0x2003e2e0
   d4048:	000d6e84 	.word	0x000d6e84
   d404c:	2003e348 	.word	0x2003e348
   d4050:	2003e348 	.word	0x2003e348
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fef3 	bl	d5e44 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6e7c 	.word	0x000d6e7c
   d4080:	000d6e44 	.word	0x000d6e44

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b868 	b.w	d4158 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f905 	bl	d4298 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be99 	b.w	d5dc8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbf7 	b.w	d4888 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbfd 	b.w	d4898 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbfb 	b.w	d4898 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40b4:	b538      	push	{r3, r4, r5, lr}
   d40b6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40b8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40ba:	b128      	cbz	r0, d40c8 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40bc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40be:	210c      	movs	r1, #12
   d40c0:	f002 fa12 	bl	d64e8 <_ZdlPvj>
            wakeupSource = next;
   d40c4:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d40c6:	e7f8      	b.n	d40ba <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d40c8:	4620      	mov	r0, r4
   d40ca:	bd38      	pop	{r3, r4, r5, pc}

000d40cc <_ZN17SystemSleepResultD1Ev>:
            result.wakeupSource_ = nullptr;
        }
        return *this;
    }

    ~SystemSleepResult() {
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d0:	6800      	ldr	r0, [r0, #0]
   d40d2:	b108      	cbz	r0, d40d8 <_ZN17SystemSleepResultD1Ev+0xc>
            free(wakeupSource_);
   d40d4:	f000 fbe0 	bl	d4898 <free>
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d40dc:	6803      	ldr	r3, [r0, #0]
   d40de:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d40e0:	b120      	cbz	r0, d40ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d40e2:	8883      	ldrh	r3, [r0, #4]
   d40e4:	428b      	cmp	r3, r1
   d40e6:	d001      	beq.n	d40ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d40e8:	6880      	ldr	r0, [r0, #8]
   d40ea:	e7f9      	b.n	d40e0 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d40ec:	4770      	bx	lr
	...

000d40f0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
   d40f4:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40f6:	4605      	mov	r5, r0
   d40f8:	460f      	mov	r7, r1
   d40fa:	4616      	mov	r6, r2
        if (valid_) {
   d40fc:	b33b      	cbz	r3, d414e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
   d40fe:	2101      	movs	r1, #1
   d4100:	f7ff ffec 	bl	d40dc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
   d4104:	b150      	cbz	r0, d411c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
   d4106:	8983      	ldrh	r3, [r0, #12]
   d4108:	42bb      	cmp	r3, r7
   d410a:	d104      	bne.n	d4116 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
   d410c:	7386      	strb	r6, [r0, #14]
                    return *this;
   d410e:	e01e      	b.n	d414e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d4110:	8883      	ldrh	r3, [r0, #4]
   d4112:	2b01      	cmp	r3, #1
   d4114:	d0f6      	beq.n	d4104 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4116:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d4118:	2800      	cmp	r0, #0
   d411a:	d1f9      	bne.n	d4110 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d411c:	490d      	ldr	r1, [pc, #52]	; (d4154 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d411e:	2010      	movs	r0, #16
   d4120:	f002 f9e4 	bl	d64ec <_ZnwjRKSt9nothrow_t>
   d4124:	4604      	mov	r4, r0
   d4126:	b188      	cbz	r0, d414c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d4128:	f04f 0810 	mov.w	r8, #16
   d412c:	4642      	mov	r2, r8
   d412e:	2100      	movs	r1, #0
   d4130:	f002 fb77 	bl	d6822 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4134:	2302      	movs	r3, #2
   d4136:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4138:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d413a:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d413e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4140:	692b      	ldr	r3, [r5, #16]
   d4142:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4144:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4146:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4148:	612c      	str	r4, [r5, #16]
   d414a:	e000      	b.n	d414e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
   d414c:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d414e:	4628      	mov	r0, r5
   d4150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4154:	000d6ddc 	.word	0x000d6ddc

000d4158 <setup>:
      break; 
    }
  }
}

void setup() {
   d4158:	b5f0      	push	{r4, r5, r6, r7, lr}
   d415a:	b097      	sub	sp, #92	; 0x5c
  //SERIAL CONNECTION CONFIG
  Serial.begin();
   d415c:	f001 ff72 	bl	d6044 <_Z16_fetch_usbserialv>
   d4160:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4164:	f001 ff62 	bl	d602c <_ZN9USBSerial5beginEl>

  // BLE CONFIG
  BLE.on();
   d4168:	f001 f824 	bl	d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d416c:	f001 f868 	bl	d5240 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d4170:	f001 f820 	bl	d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4174:	4a42      	ldr	r2, [pc, #264]	; (d4280 <setup+0x128>)
   d4176:	4601      	mov	r1, r0
   d4178:	a80d      	add	r0, sp, #52	; 0x34
   d417a:	f001 fc73 	bl	d5a64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d417e:	a80d      	add	r0, sp, #52	; 0x34
   d4180:	f001 f8e3 	bl	d534a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4184:	f001 f816 	bl	d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4188:	4a3e      	ldr	r2, [pc, #248]	; (d4284 <setup+0x12c>)
   d418a:	4601      	mov	r1, r0
   d418c:	a80d      	add	r0, sp, #52	; 0x34
   d418e:	f001 fc69 	bl	d5a64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4192:	a80d      	add	r0, sp, #52	; 0x34
   d4194:	f001 f8d9 	bl	d534a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData bleData;
   d4198:	a80d      	add	r0, sp, #52	; 0x34
   d419a:	f000 fef1 	bl	d4f80 <_ZN8particle18BleAdvertisingDataC1Ev>
  bleData.appendServiceUUID(serviceUuid);
   d419e:	493a      	ldr	r1, [pc, #232]	; (d4288 <setup+0x130>)
   d41a0:	a803      	add	r0, sp, #12
   d41a2:	f000 fd85 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d41a6:	a903      	add	r1, sp, #12
   d41a8:	a808      	add	r0, sp, #32
   d41aa:	f000 fd81 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41ae:	a808      	add	r0, sp, #32
   d41b0:	f000 fdc8 	bl	d4d44 <_ZNK8particle7BleUuid4typeEv>
   d41b4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d41b6:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41b8:	b944      	cbnz	r4, d41cc <setup+0x74>
            uint16_t uuid16 = tempUUID.shorted();
   d41ba:	f000 fde1 	bl	d4d80 <_ZNK8particle7BleUuid7shortedEv>
   d41be:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41c0:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d41c2:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41c6:	2103      	movs	r1, #3
   d41c8:	9400      	str	r4, [sp, #0]
   d41ca:	e006      	b.n	d41da <setup+0x82>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41cc:	f000 fddd 	bl	d4d8a <_ZNK8particle7BleUuid8rawBytesEv>
   d41d0:	2300      	movs	r3, #0
   d41d2:	9300      	str	r3, [sp, #0]
   d41d4:	4602      	mov	r2, r0
   d41d6:	2310      	movs	r3, #16
   d41d8:	2107      	movs	r1, #7
   d41da:	a80d      	add	r0, sp, #52	; 0x34
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d41dc:	4d2b      	ldr	r5, [pc, #172]	; (d428c <setup+0x134>)
   d41de:	f000 fe88 	bl	d4ef2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&bleData);
   d41e2:	f000 ffe7 	bl	d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41e6:	2200      	movs	r2, #0
   d41e8:	a90d      	add	r1, sp, #52	; 0x34
   d41ea:	f001 f85f 	bl	d52ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   d41ee:	7d2b      	ldrb	r3, [r5, #20]
   d41f0:	b303      	cbz	r3, d4234 <setup+0xdc>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41f2:	2301      	movs	r3, #1
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d41f4:	2104      	movs	r1, #4
   d41f6:	4628      	mov	r0, r5
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41f8:	722b      	strb	r3, [r5, #8]
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d41fa:	f7ff ff6f 	bl	d40dc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d41fe:	4606      	mov	r6, r0
   d4200:	b110      	cbz	r0, d4208 <setup+0xb0>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d4202:	4b23      	ldr	r3, [pc, #140]	; (d4290 <setup+0x138>)
   d4204:	60c3      	str	r3, [r0, #12]
   d4206:	e015      	b.n	d4234 <setup+0xdc>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4208:	4922      	ldr	r1, [pc, #136]	; (d4294 <setup+0x13c>)
   d420a:	2010      	movs	r0, #16
   d420c:	f002 f96e 	bl	d64ec <_ZnwjRKSt9nothrow_t>
   d4210:	4604      	mov	r4, r0
   d4212:	2800      	cmp	r0, #0
   d4214:	d02f      	beq.n	d4276 <setup+0x11e>
   d4216:	2710      	movs	r7, #16
   d4218:	463a      	mov	r2, r7
   d421a:	4631      	mov	r1, r6
   d421c:	f002 fb01 	bl	d6822 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4220:	2302      	movs	r3, #2
   d4222:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4224:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4226:	8027      	strh	r7, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4228:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d422a:	692b      	ldr	r3, [r5, #16]
   d422c:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d422e:	4b18      	ldr	r3, [pc, #96]	; (d4290 <setup+0x138>)
   d4230:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4232:	612c      	str	r4, [r5, #16]

  //SLEEP CONFIG
  sleepConfig.mode(SystemSleepMode::STOP)
    .duration(1200s) // sleep for 20 minutes 
    .gpio(D2, RISING)
   d4234:	2201      	movs	r2, #1
   d4236:	2102      	movs	r1, #2
   d4238:	4814      	ldr	r0, [pc, #80]	; (d428c <setup+0x134>)
   d423a:	f7ff ff59 	bl	d40f0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
    .gpio(D3, RISING) 
   d423e:	2201      	movs	r2, #1
   d4240:	2103      	movs	r1, #3
   d4242:	f7ff ff55 	bl	d40f0 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        return *this;
    }

#if HAL_PLATFORM_BLE
    SystemSleepConfiguration& ble() {
        if (valid_) {
   d4246:	7d03      	ldrb	r3, [r0, #20]
   d4248:	4604      	mov	r4, r0
   d424a:	b1bb      	cbz	r3, d427c <setup+0x124>
            // Check if BLE has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_BLE);
   d424c:	210c      	movs	r1, #12
   d424e:	f7ff ff45 	bl	d40dc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d4252:	4605      	mov	r5, r0
   d4254:	b990      	cbnz	r0, d427c <setup+0x124>
                return *this;
            }
            // Otherwise, configure BLE as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_base_t();
   d4256:	490f      	ldr	r1, [pc, #60]	; (d4294 <setup+0x13c>)
   d4258:	200c      	movs	r0, #12
   d425a:	f002 f947 	bl	d64ec <_ZnwjRKSt9nothrow_t>
   d425e:	b160      	cbz	r0, d427a <setup+0x122>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->size = sizeof(hal_wakeup_source_base_t);
   d4260:	230c      	movs	r3, #12
            wakeupSource->version = HAL_SLEEP_VERSION;
   d4262:	2202      	movs	r2, #2
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_BLE);
            if (wakeup) {
                return *this;
            }
            // Otherwise, configure BLE as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_base_t();
   d4264:	6045      	str	r5, [r0, #4]
   d4266:	6085      	str	r5, [r0, #8]
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->size = sizeof(hal_wakeup_source_base_t);
   d4268:	8003      	strh	r3, [r0, #0]
            wakeupSource->version = HAL_SLEEP_VERSION;
   d426a:	8042      	strh	r2, [r0, #2]
            wakeupSource->type = HAL_WAKEUP_SOURCE_TYPE_BLE;
   d426c:	8083      	strh	r3, [r0, #4]
            wakeupSource->next = config_.wakeup_sources;
   d426e:	6923      	ldr	r3, [r4, #16]
   d4270:	6083      	str	r3, [r0, #8]
            config_.wakeup_sources = wakeupSource;
   d4272:	6120      	str	r0, [r4, #16]
    .ble(); 
}
   d4274:	e002      	b.n	d427c <setup+0x124>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d4276:	7528      	strb	r0, [r5, #20]
   d4278:	e7dc      	b.n	d4234 <setup+0xdc>
                return *this;
            }
            // Otherwise, configure BLE as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_base_t();
            if (!wakeupSource) {
                valid_ = false;
   d427a:	7520      	strb	r0, [r4, #20]
   d427c:	b017      	add	sp, #92	; 0x5c
   d427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4280:	2003e398 	.word	0x2003e398
   d4284:	2003e3b8 	.word	0x2003e3b8
   d4288:	2003e34c 	.word	0x2003e34c
   d428c:	2003e374 	.word	0x2003e374
   d4290:	00124f80 	.word	0x00124f80
   d4294:	000d6ddc 	.word	0x000d6ddc

000d4298 <loop>:

void loop() {
   d4298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (BLE.connected()) {
   d429a:	f000 ff8b 	bl	d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d429e:	f001 f822 	bl	d52e6 <_ZNK8particle14BleLocalDevice9connectedEv>
   d42a2:	2800      	cmp	r0, #0
   d42a4:	d040      	beq.n	d4328 <loop+0x90>
    sleepResult = System.sleep(sleepConfig);
   d42a6:	4921      	ldr	r1, [pc, #132]	; (d432c <loop+0x94>)
   d42a8:	a801      	add	r0, sp, #4
   d42aa:	f000 fb7f 	bl	d49ac <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
   d42ae:	4b20      	ldr	r3, [pc, #128]	; (d4330 <loop+0x98>)
   d42b0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   d42b4:	809a      	strh	r2, [r3, #4]
        compatResult_ = result.compatResult_;
   d42b6:	aa04      	add	r2, sp, #16
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42b8:	6818      	ldr	r0, [r3, #0]
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d42ba:	f852 1d06 	ldr.w	r1, [r2, #-6]!
   d42be:	f8c3 1006 	str.w	r1, [r3, #6]
   d42c2:	8892      	ldrh	r2, [r2, #4]
   d42c4:	815a      	strh	r2, [r3, #10]
   d42c6:	461c      	mov	r4, r3
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42c8:	b118      	cbz	r0, d42d2 <loop+0x3a>
            free(wakeupSource_);
   d42ca:	f000 fae5 	bl	d4898 <free>
            wakeupSource_ = nullptr;
   d42ce:	2300      	movs	r3, #0
   d42d0:	6023      	str	r3, [r4, #0]

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
        if (result.wakeupSource_) {
   d42d2:	9b01      	ldr	r3, [sp, #4]
   d42d4:	b113      	cbz	r3, d42dc <loop+0x44>
            wakeupSource_ = result.wakeupSource_;
   d42d6:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d42d8:	2300      	movs	r3, #0
   d42da:	9301      	str	r3, [sp, #4]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42dc:	9801      	ldr	r0, [sp, #4]
   d42de:	b108      	cbz	r0, d42e4 <loop+0x4c>
            free(wakeupSource_);
   d42e0:	f000 fada 	bl	d4898 <free>
   d42e4:	6823      	ldr	r3, [r4, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d42e6:	b1fb      	cbz	r3, d4328 <loop+0x90>
    if (sleepResult.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d42e8:	889a      	ldrh	r2, [r3, #4]
   d42ea:	2a01      	cmp	r2, #1
   d42ec:	d11c      	bne.n	d4328 <loop+0x90>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d42ee:	899b      	ldrh	r3, [r3, #12]
      wakeUpPin = sleepResult.wakeupPin();
   d42f0:	4a10      	ldr	r2, [pc, #64]	; (d4334 <loop+0x9c>)
      switch (wakeUpPin) {
   d42f2:	2b02      	cmp	r3, #2

void loop() {
  if (BLE.connected()) {
    sleepResult = System.sleep(sleepConfig);
    if (sleepResult.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
      wakeUpPin = sleepResult.wakeupPin();
   d42f4:	8013      	strh	r3, [r2, #0]
      switch (wakeUpPin) {
   d42f6:	d003      	beq.n	d4300 <loop+0x68>
   d42f8:	2b03      	cmp	r3, #3
   d42fa:	d105      	bne.n	d4308 <loop+0x70>
        case 2 : {
          strcpy(status, "1");
          break; 
        }
        case 3 : {
          strcpy(status, "2");
   d42fc:	490e      	ldr	r1, [pc, #56]	; (d4338 <loop+0xa0>)
   d42fe:	e000      	b.n	d4302 <loop+0x6a>
    sleepResult = System.sleep(sleepConfig);
    if (sleepResult.wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
      wakeUpPin = sleepResult.wakeupPin();
      switch (wakeUpPin) {
        case 2 : {
          strcpy(status, "1");
   d4300:	490e      	ldr	r1, [pc, #56]	; (d433c <loop+0xa4>)
          break; 
        }
        case 3 : {
          strcpy(status, "2");
   d4302:	480f      	ldr	r0, [pc, #60]	; (d4340 <loop+0xa8>)
   d4304:	f002 fabe 	bl	d6884 <strcpy>
          break; 
        }
      }
    memcpy(txBuf, status, sizeof(txBuf));
   d4308:	4b0d      	ldr	r3, [pc, #52]	; (d4340 <loop+0xa8>)
   d430a:	4a0e      	ldr	r2, [pc, #56]	; (d4344 <loop+0xac>)
   d430c:	f103 0114 	add.w	r1, r3, #20
   d4310:	f853 0b04 	ldr.w	r0, [r3], #4
   d4314:	f842 0b04 	str.w	r0, [r2], #4
   d4318:	428b      	cmp	r3, r1
   d431a:	d1f9      	bne.n	d4310 <loop+0x78>
    txCharacteristic.setValue(txBuf, sizeof(txBuf));
   d431c:	2300      	movs	r3, #0
   d431e:	2214      	movs	r2, #20
   d4320:	4908      	ldr	r1, [pc, #32]	; (d4344 <loop+0xac>)
   d4322:	4809      	ldr	r0, [pc, #36]	; (d4348 <loop+0xb0>)
   d4324:	f000 fe94 	bl	d5050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    } 
  }
   d4328:	b004      	add	sp, #16
   d432a:	bd10      	pop	{r4, pc}
   d432c:	2003e374 	.word	0x2003e374
   d4330:	2003e38c 	.word	0x2003e38c
   d4334:	2003e3b4 	.word	0x2003e3b4
   d4338:	000d68d0 	.word	0x000d68d0
   d433c:	000d6bd2 	.word	0x000d6bd2
   d4340:	2003e3d4 	.word	0x2003e3d4
   d4344:	2003e3a0 	.word	0x2003e3a0
   d4348:	2003e398 	.word	0x2003e398

000d434c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d434c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d434e:	460e      	mov	r6, r1
   d4350:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4352:	2100      	movs	r1, #0
   d4354:	4604      	mov	r4, r0
   d4356:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4358:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d435a:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d435c:	4619      	mov	r1, r3
   d435e:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4360:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4362:	f000 fca5 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4366:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4368:	4628      	mov	r0, r5
   d436a:	f000 fca1 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d436e:	aa10      	add	r2, sp, #64	; 0x40
   d4370:	783b      	ldrb	r3, [r7, #0]
   d4372:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4376:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4378:	9302      	str	r3, [sp, #8]
   d437a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	4620      	mov	r0, r4
   d4380:	9500      	str	r5, [sp, #0]
   d4382:	ab06      	add	r3, sp, #24
   d4384:	4631      	mov	r1, r6
   d4386:	f001 fab9 	bl	d58fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d438a:	4620      	mov	r0, r4
   d438c:	b011      	add	sp, #68	; 0x44
   d438e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4390 <_GLOBAL__sub_I_txBuf>:
   d4390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4394:	4c37      	ldr	r4, [pc, #220]	; (d4474 <_GLOBAL__sub_I_txBuf+0xe4>)
char status[20]; 

/********************************************************
 *                  SLEEP VARS                          *
 *******************************************************/
SystemSleepConfiguration sleepConfig; 
   d4396:	4d38      	ldr	r5, [pc, #224]	; (d4478 <_GLOBAL__sub_I_txBuf+0xe8>)
pin_t wakeUpPin;

/********************************************************
 *                    BLE VARS                          *
 *******************************************************/
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4398:	4f38      	ldr	r7, [pc, #224]	; (d447c <_GLOBAL__sub_I_txBuf+0xec>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d439a:	f8df 910c 	ldr.w	r9, [pc, #268]	; d44a8 <_GLOBAL__sub_I_txBuf+0x118>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d439e:	f8df 810c 	ldr.w	r8, [pc, #268]	; d44ac <_GLOBAL__sub_I_txBuf+0x11c>

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43a2:	f8df a10c 	ldr.w	sl, [pc, #268]	; d44b0 <_GLOBAL__sub_I_txBuf+0x120>
      }
    memcpy(txBuf, status, sizeof(txBuf));
    txCharacteristic.setValue(txBuf, sizeof(txBuf));
    } 
  }
   d43a6:	b090      	sub	sp, #64	; 0x40

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43a8:	f000 f896 	bl	d44d8 <HAL_Pin_Map>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d43ac:	2610      	movs	r6, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d43ae:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d43b0:	4632      	mov	r2, r6
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d43b2:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d43b4:	2100      	movs	r1, #0
   d43b6:	f002 fa34 	bl	d6822 <memset>
   d43ba:	2301      	movs	r3, #1
   d43bc:	7523      	strb	r3, [r4, #20]
char status[20]; 

/********************************************************
 *                  SLEEP VARS                          *
 *******************************************************/
SystemSleepConfiguration sleepConfig; 
   d43be:	462a      	mov	r2, r5
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
   d43c0:	2302      	movs	r3, #2
   d43c2:	492f      	ldr	r1, [pc, #188]	; (d4480 <_GLOBAL__sub_I_txBuf+0xf0>)
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   d43c4:	80a6      	strh	r6, [r4, #4]
   d43c6:	4620      	mov	r0, r4
        config_.version = HAL_SLEEP_VERSION;
   d43c8:	80e3      	strh	r3, [r4, #6]
   d43ca:	f002 f87f 	bl	d64cc <__aeabi_atexit>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d43ce:	482d      	ldr	r0, [pc, #180]	; (d4484 <_GLOBAL__sub_I_txBuf+0xf4>)
SystemSleepResult sleepResult;
   d43d0:	492d      	ldr	r1, [pc, #180]	; (d4488 <_GLOBAL__sub_I_txBuf+0xf8>)
   d43d2:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d43d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d43d8:	462a      	mov	r2, r5
   d43da:	8143      	strh	r3, [r0, #10]
   d43dc:	7184      	strb	r4, [r0, #6]
   d43de:	8104      	strh	r4, [r0, #8]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d43e0:	6004      	str	r4, [r0, #0]
   d43e2:	8084      	strh	r4, [r0, #4]
   d43e4:	f002 f872 	bl	d64cc <__aeabi_atexit>
pin_t wakeUpPin;

/********************************************************
 *                    BLE VARS                          *
 *******************************************************/
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43e8:	4928      	ldr	r1, [pc, #160]	; (d448c <_GLOBAL__sub_I_txBuf+0xfc>)
   d43ea:	4638      	mov	r0, r7
   d43ec:	f000 fd5e 	bl	d4eac <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d43f0:	4927      	ldr	r1, [pc, #156]	; (d4490 <_GLOBAL__sub_I_txBuf+0x100>)
   d43f2:	4648      	mov	r0, r9
   d43f4:	f000 fd5a 	bl	d4eac <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d43f8:	4926      	ldr	r1, [pc, #152]	; (d4494 <_GLOBAL__sub_I_txBuf+0x104>)
   d43fa:	4640      	mov	r0, r8
   d43fc:	f000 fd56 	bl	d4eac <_ZN8particle7BleUuidC1EPKc>
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4400:	f88d 6014 	strb.w	r6, [sp, #20]

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4404:	4641      	mov	r1, r8
   d4406:	ae0b      	add	r6, sp, #44	; 0x2c
   d4408:	a806      	add	r0, sp, #24
   d440a:	f000 fc51 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
   d440e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d44b4 <_GLOBAL__sub_I_txBuf+0x124>
   d4412:	4639      	mov	r1, r7
   d4414:	4630      	mov	r0, r6
   d4416:	f000 fc4b 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
   d441a:	ab06      	add	r3, sp, #24
   d441c:	aa05      	add	r2, sp, #20
   d441e:	9402      	str	r4, [sp, #8]
   d4420:	9401      	str	r4, [sp, #4]
   d4422:	9600      	str	r6, [sp, #0]
   d4424:	491c      	ldr	r1, [pc, #112]	; (d4498 <_GLOBAL__sub_I_txBuf+0x108>)
   d4426:	4650      	mov	r0, sl
   d4428:	f7ff ff90 	bl	d434c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d442c:	462a      	mov	r2, r5
   d442e:	4641      	mov	r1, r8
   d4430:	4650      	mov	r0, sl
   d4432:	f002 f84b 	bl	d64cc <__aeabi_atexit>
   d4436:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4438:	4649      	mov	r1, r9
   d443a:	a806      	add	r0, sp, #24
   d443c:	f88d 3014 	strb.w	r3, [sp, #20]
   d4440:	f000 fc36 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
   d4444:	4639      	mov	r1, r7
   d4446:	4630      	mov	r0, r6
   d4448:	4f14      	ldr	r7, [pc, #80]	; (d449c <_GLOBAL__sub_I_txBuf+0x10c>)
   d444a:	f000 fc31 	bl	d4cb0 <_ZN8particle7BleUuidC1ERKS0_>
   d444e:	4b14      	ldr	r3, [pc, #80]	; (d44a0 <_GLOBAL__sub_I_txBuf+0x110>)
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	aa05      	add	r2, sp, #20
   d4454:	ab06      	add	r3, sp, #24
   d4456:	9402      	str	r4, [sp, #8]
   d4458:	9600      	str	r6, [sp, #0]
   d445a:	4912      	ldr	r1, [pc, #72]	; (d44a4 <_GLOBAL__sub_I_txBuf+0x114>)
   d445c:	4638      	mov	r0, r7
   d445e:	f7ff ff75 	bl	d434c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4462:	462a      	mov	r2, r5
   d4464:	4641      	mov	r1, r8
   d4466:	4638      	mov	r0, r7
   d4468:	f002 f830 	bl	d64cc <__aeabi_atexit>
      }
    memcpy(txBuf, status, sizeof(txBuf));
    txCharacteristic.setValue(txBuf, sizeof(txBuf));
    } 
  }
   d446c:	b010      	add	sp, #64	; 0x40
   d446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4472:	bf00      	nop
   d4474:	2003e374 	.word	0x2003e374
   d4478:	2003e348 	.word	0x2003e348
   d447c:	2003e34c 	.word	0x2003e34c
   d4480:	000d40b5 	.word	0x000d40b5
   d4484:	2003e38c 	.word	0x2003e38c
   d4488:	000d40cd 	.word	0x000d40cd
   d448c:	000d68d2 	.word	0x000d68d2
   d4490:	000d68f7 	.word	0x000d68f7
   d4494:	000d691c 	.word	0x000d691c
   d4498:	000d6941 	.word	0x000d6941
   d449c:	2003e3b8 	.word	0x2003e3b8
   d44a0:	000d40b3 	.word	0x000d40b3
   d44a4:	000d6944 	.word	0x000d6944
   d44a8:	2003e3c0 	.word	0x2003e3c0
   d44ac:	2003e360 	.word	0x2003e360
   d44b0:	2003e398 	.word	0x2003e398
   d44b4:	000d534b 	.word	0x000d534b

000d44b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <netdb_freeaddrinfo+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	689b      	ldr	r3, [r3, #8]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030268 	.word	0x00030268

000d44c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <netdb_getaddrinfo+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	68db      	ldr	r3, [r3, #12]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030268 	.word	0x00030268

000d44d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_Pin_Map+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	681b      	ldr	r3, [r3, #0]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003022c 	.word	0x0003022c

000d44e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_RNG_GetRandomNumber+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	685b      	ldr	r3, [r3, #4]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030218 	.word	0x00030218

000d44f8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_Delay_Microseconds+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	68db      	ldr	r3, [r3, #12]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030218 	.word	0x00030218

000d4508 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	695b      	ldr	r3, [r3, #20]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030218 	.word	0x00030218

000d4518 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <hal_ble_stack_init+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	689b      	ldr	r3, [r3, #8]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030278 	.word	0x00030278

000d4528 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <hal_ble_gap_set_advertising_data+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030278 	.word	0x00030278

000d4538 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <hal_ble_gap_set_scan_response_data+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030278 	.word	0x00030278

000d4548 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <hal_ble_gap_start_advertising+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030278 	.word	0x00030278

000d4558 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b03      	ldr	r3, [pc, #12]	; (d4568 <hal_ble_gap_disconnect+0x10>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4562:	9301      	str	r3, [sp, #4]
   d4564:	bd08      	pop	{r3, pc}
   d4566:	0000      	.short	0x0000
   d4568:	00030278 	.word	0x00030278

000d456c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b03      	ldr	r3, [pc, #12]	; (d457c <hal_ble_gatt_server_add_service+0x10>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4576:	9301      	str	r3, [sp, #4]
   d4578:	bd08      	pop	{r3, pc}
   d457a:	0000      	.short	0x0000
   d457c:	00030278 	.word	0x00030278

000d4580 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b03      	ldr	r3, [pc, #12]	; (d4590 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d458a:	9301      	str	r3, [sp, #4]
   d458c:	bd08      	pop	{r3, pc}
   d458e:	0000      	.short	0x0000
   d4590:	00030278 	.word	0x00030278

000d4594 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b03      	ldr	r3, [pc, #12]	; (d45a4 <hal_ble_gatt_client_write_with_response+0x10>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d459e:	9301      	str	r3, [sp, #4]
   d45a0:	bd08      	pop	{r3, pc}
   d45a2:	0000      	.short	0x0000
   d45a4:	00030278 	.word	0x00030278

000d45a8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b03      	ldr	r3, [pc, #12]	; (d45b8 <hal_ble_gatt_client_write_without_response+0x10>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d45b2:	9301      	str	r3, [sp, #4]
   d45b4:	bd08      	pop	{r3, pc}
   d45b6:	0000      	.short	0x0000
   d45b8:	00030278 	.word	0x00030278

000d45bc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b03      	ldr	r3, [pc, #12]	; (d45cc <hal_ble_gatt_server_add_characteristic+0x10>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d45c6:	9301      	str	r3, [sp, #4]
   d45c8:	bd08      	pop	{r3, pc}
   d45ca:	0000      	.short	0x0000
   d45cc:	00030278 	.word	0x00030278

000d45d0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b03      	ldr	r3, [pc, #12]	; (d45e0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d45da:	9301      	str	r3, [sp, #4]
   d45dc:	bd08      	pop	{r3, pc}
   d45de:	0000      	.short	0x0000
   d45e0:	00030278 	.word	0x00030278

000d45e4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b03      	ldr	r3, [pc, #12]	; (d45f4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d45ee:	9301      	str	r3, [sp, #4]
   d45f0:	bd08      	pop	{r3, pc}
   d45f2:	0000      	.short	0x0000
   d45f4:	00030278 	.word	0x00030278

000d45f8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b03      	ldr	r3, [pc, #12]	; (d4608 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4602:	9301      	str	r3, [sp, #4]
   d4604:	bd08      	pop	{r3, pc}
   d4606:	0000      	.short	0x0000
   d4608:	00030278 	.word	0x00030278

000d460c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <os_thread_is_current+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	689b      	ldr	r3, [r3, #8]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030248 	.word	0x00030248

000d461c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <os_thread_join+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	691b      	ldr	r3, [r3, #16]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030248 	.word	0x00030248

000d462c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <os_thread_cleanup+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	695b      	ldr	r3, [r3, #20]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030248 	.word	0x00030248

000d463c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <os_mutex_recursive_create+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030248 	.word	0x00030248

000d464c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <os_mutex_recursive_destroy+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030248 	.word	0x00030248

000d465c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <os_mutex_recursive_lock+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030248 	.word	0x00030248

000d466c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <os_mutex_recursive_unlock+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030248 	.word	0x00030248

000d467c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <inet_inet_ntop+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	695b      	ldr	r3, [r3, #20]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030264 	.word	0x00030264

000d468c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_USART_Init+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	681b      	ldr	r3, [r3, #0]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003023c 	.word	0x0003023c

000d469c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_USART_Write_Data+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	68db      	ldr	r3, [r3, #12]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003023c 	.word	0x0003023c

000d46ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_USART_Available_Data+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	691b      	ldr	r3, [r3, #16]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003023c 	.word	0x0003023c

000d46bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_USART_Read_Data+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	695b      	ldr	r3, [r3, #20]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003023c 	.word	0x0003023c

000d46cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_USART_Peek_Data+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	699b      	ldr	r3, [r3, #24]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003023c 	.word	0x0003023c

000d46dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_USART_Flush_Data+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	69db      	ldr	r3, [r3, #28]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	0003023c 	.word	0x0003023c

000d46ec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_USART_Available_Data_For_Write+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	0003023c 	.word	0x0003023c

000d46fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_USB_USART_Init+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	681b      	ldr	r3, [r3, #0]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	0003024c 	.word	0x0003024c

000d470c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <HAL_USB_USART_Begin+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	685b      	ldr	r3, [r3, #4]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	0003024c 	.word	0x0003024c

000d471c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <HAL_USB_USART_Available_Data+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	691b      	ldr	r3, [r3, #16]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	0003024c 	.word	0x0003024c

000d472c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	695b      	ldr	r3, [r3, #20]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	0003024c 	.word	0x0003024c

000d473c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <HAL_USB_USART_Receive_Data+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	699b      	ldr	r3, [r3, #24]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	0003024c 	.word	0x0003024c

000d474c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <HAL_USB_USART_Send_Data+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	69db      	ldr	r3, [r3, #28]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	0003024c 	.word	0x0003024c

000d475c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <HAL_USB_USART_Flush_Data+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6a1b      	ldr	r3, [r3, #32]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003024c 	.word	0x0003024c

000d476c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <panic_+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030260 	.word	0x00030260

000d477c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <log_message+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030260 	.word	0x00030260

000d478c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <set_system_mode+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	685b      	ldr	r3, [r3, #4]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030220 	.word	0x00030220

000d479c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b03      	ldr	r3, [pc, #12]	; (d47ac <system_ctrl_set_app_request_handler+0x10>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d47a6:	9301      	str	r3, [sp, #4]
   d47a8:	bd08      	pop	{r3, pc}
   d47aa:	0000      	.short	0x0000
   d47ac:	00030220 	.word	0x00030220

000d47b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b03      	ldr	r3, [pc, #12]	; (d47c0 <system_ctrl_set_result+0x10>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47ba:	9301      	str	r3, [sp, #4]
   d47bc:	bd08      	pop	{r3, pc}
   d47be:	0000      	.short	0x0000
   d47c0:	00030220 	.word	0x00030220

000d47c4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b03      	ldr	r3, [pc, #12]	; (d47d4 <system_sleep_ext+0x10>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d47ce:	9301      	str	r3, [sp, #4]
   d47d0:	bd08      	pop	{r3, pc}
   d47d2:	0000      	.short	0x0000
   d47d4:	00030220 	.word	0x00030220

000d47d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <network_connect+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	685b      	ldr	r3, [r3, #4]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030240 	.word	0x00030240

000d47e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <network_connecting+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	689b      	ldr	r3, [r3, #8]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030240 	.word	0x00030240

000d47f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <network_disconnect+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	68db      	ldr	r3, [r3, #12]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030240 	.word	0x00030240

000d4808 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <network_ready+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	691b      	ldr	r3, [r3, #16]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030240 	.word	0x00030240

000d4818 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <network_on+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	695b      	ldr	r3, [r3, #20]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030240 	.word	0x00030240

000d4828 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <network_off+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	699b      	ldr	r3, [r3, #24]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030240 	.word	0x00030240

000d4838 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <network_listen+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	69db      	ldr	r3, [r3, #28]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030240 	.word	0x00030240

000d4848 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <network_listening+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6a1b      	ldr	r3, [r3, #32]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030240 	.word	0x00030240

000d4858 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <network_set_listen_timeout+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030240 	.word	0x00030240

000d4868 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <network_get_listen_timeout+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030240 	.word	0x00030240

000d4878 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <spark_set_random_seed_from_cloud_handler+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030244 	.word	0x00030244

000d4888 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <malloc+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	681b      	ldr	r3, [r3, #0]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003021c 	.word	0x0003021c

000d4898 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <free+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	685b      	ldr	r3, [r3, #4]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003021c 	.word	0x0003021c

000d48a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <realloc+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	689b      	ldr	r3, [r3, #8]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003021c 	.word	0x0003021c

000d48b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48b8:	2200      	movs	r2, #0
   d48ba:	4611      	mov	r1, r2
   d48bc:	6840      	ldr	r0, [r0, #4]
   d48be:	f7ff bfc3 	b.w	d4848 <network_listening>

000d48c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48c2:	2200      	movs	r2, #0
   d48c4:	4611      	mov	r1, r2
   d48c6:	6840      	ldr	r0, [r0, #4]
   d48c8:	f7ff bfce 	b.w	d4868 <network_get_listen_timeout>

000d48cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48cc:	2200      	movs	r2, #0
   d48ce:	6840      	ldr	r0, [r0, #4]
   d48d0:	f7ff bfc2 	b.w	d4858 <network_set_listen_timeout>

000d48d4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48d4:	2200      	movs	r2, #0
   d48d6:	f081 0101 	eor.w	r1, r1, #1
   d48da:	6840      	ldr	r0, [r0, #4]
   d48dc:	f7ff bfac 	b.w	d4838 <network_listen>

000d48e0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48e0:	2300      	movs	r3, #0
   d48e2:	461a      	mov	r2, r3
   d48e4:	4619      	mov	r1, r3
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff bf9e 	b.w	d4828 <network_off>

000d48ec <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48ec:	2300      	movs	r3, #0
   d48ee:	461a      	mov	r2, r3
   d48f0:	4619      	mov	r1, r3
   d48f2:	6840      	ldr	r0, [r0, #4]
   d48f4:	f7ff bf90 	b.w	d4818 <network_on>

000d48f8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48f8:	2200      	movs	r2, #0
   d48fa:	4611      	mov	r1, r2
   d48fc:	6840      	ldr	r0, [r0, #4]
   d48fe:	f7ff bf83 	b.w	d4808 <network_ready>

000d4902 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4902:	2200      	movs	r2, #0
   d4904:	4611      	mov	r1, r2
   d4906:	6840      	ldr	r0, [r0, #4]
   d4908:	f7ff bf6e 	b.w	d47e8 <network_connecting>

000d490c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d490c:	2200      	movs	r2, #0
   d490e:	2102      	movs	r1, #2
   d4910:	6840      	ldr	r0, [r0, #4]
   d4912:	f7ff bf71 	b.w	d47f8 <network_disconnect>

000d4916 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4916:	2300      	movs	r3, #0
   d4918:	461a      	mov	r2, r3
   d491a:	6840      	ldr	r0, [r0, #4]
   d491c:	f7ff bf5c 	b.w	d47d8 <network_connect>

000d4920 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4920:	4b02      	ldr	r3, [pc, #8]	; (d492c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4922:	2203      	movs	r2, #3
   d4924:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4926:	4a02      	ldr	r2, [pc, #8]	; (d4930 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4928:	601a      	str	r2, [r3, #0]
   d492a:	4770      	bx	lr
   d492c:	2003e3e8 	.word	0x2003e3e8
   d4930:	000d6950 	.word	0x000d6950

000d4934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4934:	b510      	push	{r4, lr}
   d4936:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4938:	6800      	ldr	r0, [r0, #0]
   d493a:	b118      	cbz	r0, d4944 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d493c:	f7ff ffac 	bl	d4898 <free>
            wakeupSource_ = nullptr;
   d4940:	2300      	movs	r3, #0
   d4942:	6023      	str	r3, [r4, #0]
   d4944:	bd10      	pop	{r4, pc}

000d4946 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4946:	b510      	push	{r4, lr}
   d4948:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d494a:	f7ff fff3 	bl	d4934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d494e:	4620      	mov	r0, r4
   d4950:	bd10      	pop	{r4, pc}

000d4952 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4952:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4954:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4958:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d495a:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d495c:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d495e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4962:	f8c0 2006 	str.w	r2, [r0, #6]
   d4966:	889b      	ldrh	r3, [r3, #4]
   d4968:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d496a:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d496c:	f7ff ffe2 	bl	d4934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d4970:	682b      	ldr	r3, [r5, #0]
   d4972:	b113      	cbz	r3, d497a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4974:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d4976:	2300      	movs	r3, #0
   d4978:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d497a:	4620      	mov	r0, r4
   d497c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4980 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4980:	b538      	push	{r3, r4, r5, lr}
   d4982:	460c      	mov	r4, r1
   d4984:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d4986:	f7ff ffd5 	bl	d4934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d498a:	b144      	cbz	r4, d499e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d498c:	8820      	ldrh	r0, [r4, #0]
   d498e:	f7ff ff7b 	bl	d4888 <malloc>
   d4992:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4994:	b128      	cbz	r0, d49a2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4996:	8822      	ldrh	r2, [r4, #0]
   d4998:	4621      	mov	r1, r4
   d499a:	f001 ff1c 	bl	d67d6 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d499e:	2000      	movs	r0, #0
   d49a0:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d49a2:	4801      	ldr	r0, [pc, #4]	; (d49a8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d49a4:	bd38      	pop	{r3, r4, r5, pc}
   d49a6:	bf00      	nop
   d49a8:	fffffefc 	.word	0xfffffefc

000d49ac <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d49ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d49ae:	4d30      	ldr	r5, [pc, #192]	; (d4a70 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d49b0:	7d0b      	ldrb	r3, [r1, #20]
   d49b2:	4604      	mov	r4, r0
   d49b4:	b08b      	sub	sp, #44	; 0x2c
   d49b6:	4608      	mov	r0, r1
   d49b8:	1daf      	adds	r7, r5, #6
   d49ba:	b313      	cbz	r3, d4a02 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d49bc:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d49be:	791b      	ldrb	r3, [r3, #4]
   d49c0:	b1fb      	cbz	r3, d4a02 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49c2:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d49c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d49c8:	a902      	add	r1, sp, #8
   d49ca:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49cc:	9202      	str	r2, [sp, #8]
   d49ce:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d49d2:	f88d 200e 	strb.w	r2, [sp, #14]
   d49d6:	f8ad 2010 	strh.w	r2, [sp, #16]
   d49da:	f8ad 3012 	strh.w	r3, [sp, #18]
   d49de:	f7ff fef1 	bl	d47c4 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d49e2:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d49e4:	b200      	sxth	r0, r0
   d49e6:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d49ea:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d49ee:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d49f0:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d49f2:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d49f6:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d49f8:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d49fa:	4628      	mov	r0, r5
   d49fc:	f7ff ffc0 	bl	d4980 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d4a00:	e01c      	b.n	d4a3c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d4a02:	2320      	movs	r3, #32
   d4a04:	2600      	movs	r6, #0
   d4a06:	9302      	str	r3, [sp, #8]
   d4a08:	4b1a      	ldr	r3, [pc, #104]	; (d4a74 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d4a0a:	9300      	str	r3, [sp, #0]
   d4a0c:	491a      	ldr	r1, [pc, #104]	; (d4a78 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d4a0e:	9603      	str	r6, [sp, #12]
   d4a10:	4633      	mov	r3, r6
   d4a12:	2032      	movs	r0, #50	; 0x32
   d4a14:	aa02      	add	r2, sp, #8
   d4a16:	f7ff feb1 	bl	d477c <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4a1e:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4a22:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d4a24:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4a28:	4811      	ldr	r0, [pc, #68]	; (d4a70 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4a2a:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4a2c:	f88d 600e 	strb.w	r6, [sp, #14]
   d4a30:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d4a34:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4a38:	f7ff ff8b 	bl	d4952 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4a3c:	a802      	add	r0, sp, #8
   d4a3e:	f7ff ff79 	bl	d4934 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4a42:	2300      	movs	r3, #0
   d4a44:	6023      	str	r3, [r4, #0]
   d4a46:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4a48:	71a3      	strb	r3, [r4, #6]
   d4a4a:	8123      	strh	r3, [r4, #8]
   d4a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4a50:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d4a52:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d4a56:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4a58:	683b      	ldr	r3, [r7, #0]
   d4a5a:	f8c4 3006 	str.w	r3, [r4, #6]
   d4a5e:	88bb      	ldrh	r3, [r7, #4]
   d4a60:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d4a62:	6829      	ldr	r1, [r5, #0]
   d4a64:	4620      	mov	r0, r4
   d4a66:	f7ff ff8b 	bl	d4980 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	b00b      	add	sp, #44	; 0x2c
   d4a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a70:	2003e3f0 	.word	0x2003e3f0
   d4a74:	000d6983 	.word	0x000d6983
   d4a78:	000d697c 	.word	0x000d697c

000d4a7c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4a7c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4a7e:	4c09      	ldr	r4, [pc, #36]	; (d4aa4 <_GLOBAL__sub_I_System+0x28>)
   d4a80:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4a82:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4a86:	6020      	str	r0, [r4, #0]
   d4a88:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4a8a:	71a0      	strb	r0, [r4, #6]
   d4a8c:	8120      	strh	r0, [r4, #8]
   d4a8e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a90:	f7ff fe7c 	bl	d478c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4a94:	4620      	mov	r0, r4
   d4a96:	4a04      	ldr	r2, [pc, #16]	; (d4aa8 <_GLOBAL__sub_I_System+0x2c>)
   d4a98:	4904      	ldr	r1, [pc, #16]	; (d4aac <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4a9e:	f001 bd15 	b.w	d64cc <__aeabi_atexit>
   d4aa2:	bf00      	nop
   d4aa4:	2003e3f0 	.word	0x2003e3f0
   d4aa8:	2003e348 	.word	0x2003e348
   d4aac:	000d4947 	.word	0x000d4947

000d4ab0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4ab0:	b510      	push	{r4, lr}
   d4ab2:	4604      	mov	r4, r0
{
	free(buffer);
   d4ab4:	6800      	ldr	r0, [r0, #0]
   d4ab6:	f7ff feef 	bl	d4898 <free>
}
   d4aba:	4620      	mov	r0, r4
   d4abc:	bd10      	pop	{r4, pc}

000d4abe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4abe:	b510      	push	{r4, lr}
   d4ac0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4ac2:	6800      	ldr	r0, [r0, #0]
   d4ac4:	b108      	cbz	r0, d4aca <_ZN6String10invalidateEv+0xc>
   d4ac6:	f7ff fee7 	bl	d4898 <free>
	buffer = NULL;
   d4aca:	2300      	movs	r3, #0
   d4acc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4ace:	60a3      	str	r3, [r4, #8]
   d4ad0:	6063      	str	r3, [r4, #4]
   d4ad2:	bd10      	pop	{r4, pc}

000d4ad4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4ad4:	b538      	push	{r3, r4, r5, lr}
   d4ad6:	4604      	mov	r4, r0
   d4ad8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4ada:	6800      	ldr	r0, [r0, #0]
   d4adc:	3101      	adds	r1, #1
   d4ade:	f7ff fee3 	bl	d48a8 <realloc>
	if (newbuffer) {
   d4ae2:	b110      	cbz	r0, d4aea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4ae4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4ae8:	2001      	movs	r0, #1
	}
	return 0;
}
   d4aea:	bd38      	pop	{r3, r4, r5, pc}

000d4aec <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4aec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4aee:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4af0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4af2:	b113      	cbz	r3, d4afa <_ZN6String7reserveEj+0xe>
   d4af4:	6843      	ldr	r3, [r0, #4]
   d4af6:	428b      	cmp	r3, r1
   d4af8:	d207      	bcs.n	d4b0a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4afa:	4620      	mov	r0, r4
   d4afc:	f7ff ffea 	bl	d4ad4 <_ZN6String12changeBufferEj>
   d4b00:	b120      	cbz	r0, d4b0c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4b02:	68a3      	ldr	r3, [r4, #8]
   d4b04:	b90b      	cbnz	r3, d4b0a <_ZN6String7reserveEj+0x1e>
   d4b06:	6822      	ldr	r2, [r4, #0]
   d4b08:	7013      	strb	r3, [r2, #0]
   d4b0a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4b0c:	bd10      	pop	{r4, pc}

000d4b0e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4b0e:	b570      	push	{r4, r5, r6, lr}
   d4b10:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4b12:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4b14:	4604      	mov	r4, r0
   d4b16:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4b18:	f7ff ffe8 	bl	d4aec <_ZN6String7reserveEj>
   d4b1c:	b918      	cbnz	r0, d4b26 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4b1e:	4620      	mov	r0, r4
   d4b20:	f7ff ffcd 	bl	d4abe <_ZN6String10invalidateEv>
		return *this;
   d4b24:	e009      	b.n	d4b3a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4b26:	462a      	mov	r2, r5
   d4b28:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4b2a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4b2c:	6820      	ldr	r0, [r4, #0]
   d4b2e:	f001 fe52 	bl	d67d6 <memcpy>
	buffer[len] = 0;
   d4b32:	6822      	ldr	r2, [r4, #0]
   d4b34:	68a3      	ldr	r3, [r4, #8]
   d4b36:	2100      	movs	r1, #0
   d4b38:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	bd70      	pop	{r4, r5, r6, pc}

000d4b3e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4b3e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b40:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4b42:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b44:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4b46:	6043      	str	r3, [r0, #4]
	len = 0;
   d4b48:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4b4a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4b4c:	460d      	mov	r5, r1
   d4b4e:	b139      	cbz	r1, d4b60 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4b50:	4608      	mov	r0, r1
   d4b52:	f001 fe9f 	bl	d6894 <strlen>
   d4b56:	4629      	mov	r1, r5
   d4b58:	4602      	mov	r2, r0
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f7ff ffd7 	bl	d4b0e <_ZN6String4copyEPKcj>
}
   d4b60:	4620      	mov	r0, r4
   d4b62:	bd38      	pop	{r3, r4, r5, pc}

000d4b64 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4b64:	b538      	push	{r3, r4, r5, lr}
   d4b66:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4b68:	460c      	mov	r4, r1
   d4b6a:	b141      	cbz	r1, d4b7e <_ZN6StringaSEPKc+0x1a>
   d4b6c:	4608      	mov	r0, r1
   d4b6e:	f001 fe91 	bl	d6894 <strlen>
   d4b72:	4621      	mov	r1, r4
   d4b74:	4602      	mov	r2, r0
   d4b76:	4628      	mov	r0, r5
   d4b78:	f7ff ffc9 	bl	d4b0e <_ZN6String4copyEPKcj>
   d4b7c:	e001      	b.n	d4b82 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4b7e:	f7ff ff9e 	bl	d4abe <_ZN6String10invalidateEv>

	return *this;
}
   d4b82:	4628      	mov	r0, r5
   d4b84:	bd38      	pop	{r3, r4, r5, pc}

000d4b86 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b86:	4770      	bx	lr

000d4b88 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b88:	2000      	movs	r0, #0
   d4b8a:	4770      	bx	lr

000d4b8c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b8c:	4770      	bx	lr

000d4b8e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b8e:	2000      	movs	r0, #0
   d4b90:	4770      	bx	lr

000d4b92 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b92:	4770      	bx	lr

000d4b94 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4b94:	2000      	movs	r0, #0
   d4b96:	4770      	bx	lr

000d4b98 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4b98:	b510      	push	{r4, lr}
   d4b9a:	2114      	movs	r1, #20
   d4b9c:	4604      	mov	r4, r0
   d4b9e:	f001 fca3 	bl	d64e8 <_ZdlPvj>
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	bd10      	pop	{r4, pc}

000d4ba6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4ba6:	b510      	push	{r4, lr}
   d4ba8:	2114      	movs	r1, #20
   d4baa:	4604      	mov	r4, r0
   d4bac:	f001 fc9c 	bl	d64e8 <_ZdlPvj>
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4bb4:	b510      	push	{r4, lr}
   d4bb6:	2114      	movs	r1, #20
   d4bb8:	4604      	mov	r4, r0
   d4bba:	f001 fc95 	bl	d64e8 <_ZdlPvj>
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	bd10      	pop	{r4, pc}

000d4bc2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4bc2:	f7ff ba6a 	b.w	d409a <_ZdlPv>

000d4bc6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4bc6:	f7ff ba68 	b.w	d409a <_ZdlPv>

000d4bca <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4bca:	f7ff ba66 	b.w	d409a <_ZdlPv>

000d4bce <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4bce:	b510      	push	{r4, lr}
   d4bd0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4bd2:	6800      	ldr	r0, [r0, #0]
   d4bd4:	b108      	cbz	r0, d4bda <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4bd6:	f7ff fd39 	bl	d464c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4bda:	4620      	mov	r0, r4
   d4bdc:	bd10      	pop	{r4, pc}
	...

000d4be0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4be0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4be2:	200a      	movs	r0, #10
   d4be4:	4a02      	ldr	r2, [pc, #8]	; (d4bf0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4be6:	2100      	movs	r1, #0
   d4be8:	f7ff fdc0 	bl	d476c <panic_>
    }
}
   d4bec:	bd08      	pop	{r3, pc}
   d4bee:	bf00      	nop
   d4bf0:	000d44f9 	.word	0x000d44f9

000d4bf4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bf4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4bf6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4bf8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4bfa:	689b      	ldr	r3, [r3, #8]
   d4bfc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4bfe:	68a3      	ldr	r3, [r4, #8]
   d4c00:	3b01      	subs	r3, #1
   d4c02:	60a3      	str	r3, [r4, #8]
   d4c04:	b92b      	cbnz	r3, d4c12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4c06:	6823      	ldr	r3, [r4, #0]
   d4c08:	4620      	mov	r0, r4
   d4c0a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4c10:	4718      	bx	r3
   d4c12:	bd10      	pop	{r4, pc}

000d4c14 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4c14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4c18:	b2da      	uxtb	r2, r3
   d4c1a:	2a09      	cmp	r2, #9
   d4c1c:	d801      	bhi.n	d4c22 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4c1e:	4618      	mov	r0, r3
   d4c20:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4c22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4c26:	2b05      	cmp	r3, #5
   d4c28:	d801      	bhi.n	d4c2e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4c2a:	3857      	subs	r0, #87	; 0x57
   d4c2c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4c2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4c32:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4c34:	bf94      	ite	ls
   d4c36:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4c38:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4c3c:	4770      	bx	lr
	...

000d4c40 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4c40:	b510      	push	{r4, lr}
            locked_(false) {
   d4c42:	2300      	movs	r3, #0
   d4c44:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4c46:	4b04      	ldr	r3, [pc, #16]	; (d4c58 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4c48:	4604      	mov	r4, r0
   d4c4a:	6818      	ldr	r0, [r3, #0]
   d4c4c:	f7ff fd06 	bl	d465c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4c50:	2301      	movs	r3, #1
   d4c52:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4c54:	4620      	mov	r0, r4
   d4c56:	bd10      	pop	{r4, pc}
   d4c58:	2003e408 	.word	0x2003e408

000d4c5c <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4c5c:	b510      	push	{r4, lr}
        if (locked_) {
   d4c5e:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4c60:	4604      	mov	r4, r0
        if (locked_) {
   d4c62:	b11b      	cbz	r3, d4c6c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4c64:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4c66:	6818      	ldr	r0, [r3, #0]
   d4c68:	f7ff fd00 	bl	d466c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	bd10      	pop	{r4, pc}
   d4c70:	2003e408 	.word	0x2003e408

000d4c74 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4c74:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4c76:	7982      	ldrb	r2, [r0, #6]
   d4c78:	798b      	ldrb	r3, [r1, #6]
   d4c7a:	429a      	cmp	r2, r3
   d4c7c:	d106      	bne.n	d4c8c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4c7e:	2206      	movs	r2, #6
   d4c80:	f001 fd9a 	bl	d67b8 <memcmp>
   d4c84:	fab0 f080 	clz	r0, r0
   d4c88:	0940      	lsrs	r0, r0, #5
   d4c8a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4c8c:	2000      	movs	r0, #0
}
   d4c8e:	bd08      	pop	{r3, pc}

000d4c90 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4c90:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4c92:	2301      	movs	r3, #1
   d4c94:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4c96:	4b05      	ldr	r3, [pc, #20]	; (d4cac <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4c98:	4602      	mov	r2, r0
   d4c9a:	f103 0110 	add.w	r1, r3, #16
   d4c9e:	f853 4b04 	ldr.w	r4, [r3], #4
   d4ca2:	f842 4b04 	str.w	r4, [r2], #4
   d4ca6:	428b      	cmp	r3, r1
   d4ca8:	d1f9      	bne.n	d4c9e <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4caa:	bd10      	pop	{r4, pc}
   d4cac:	000d6bb0 	.word	0x000d6bb0

000d4cb0 <_ZN8particle7BleUuidC1ERKS0_>:
        type_ = BleUuidType::LONG;
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4cb0:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4cb2:	690b      	ldr	r3, [r1, #16]
   d4cb4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4cb6:	f101 0210 	add.w	r2, r1, #16
   d4cba:	4603      	mov	r3, r0
   d4cbc:	f851 4b04 	ldr.w	r4, [r1], #4
   d4cc0:	f843 4b04 	str.w	r4, [r3], #4
   d4cc4:	4291      	cmp	r1, r2
   d4cc6:	d1f9      	bne.n	d4cbc <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4cc8:	bd10      	pop	{r4, pc}

000d4cca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4cca:	b510      	push	{r4, lr}
    if (uuid128) {
   d4ccc:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4cce:	4604      	mov	r4, r0
    if (uuid128) {
   d4cd0:	b1b9      	cbz	r1, d4d02 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4cd2:	2a01      	cmp	r2, #1
   d4cd4:	d109      	bne.n	d4cea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4cd6:	4603      	mov	r3, r0
   d4cd8:	f101 0210 	add.w	r2, r1, #16
   d4cdc:	f851 0b04 	ldr.w	r0, [r1], #4
   d4ce0:	f843 0b04 	str.w	r0, [r3], #4
   d4ce4:	4291      	cmp	r1, r2
   d4ce6:	d1f9      	bne.n	d4cdc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4ce8:	e008      	b.n	d4cfc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4cea:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4cec:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4cee:	5c98      	ldrb	r0, [r3, r2]
   d4cf0:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4cf4:	3a01      	subs	r2, #1
   d4cf6:	b2d2      	uxtb	r2, r2
   d4cf8:	2aff      	cmp	r2, #255	; 0xff
   d4cfa:	d1f8      	bne.n	d4cee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4cfc:	2301      	movs	r3, #1
   d4cfe:	6123      	str	r3, [r4, #16]
   d4d00:	e002      	b.n	d4d08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4d02:	2210      	movs	r2, #16
   d4d04:	f001 fd8d 	bl	d6822 <memset>
    }
}
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4d0c:	b538      	push	{r3, r4, r5, lr}
   d4d0e:	4605      	mov	r5, r0
   d4d10:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d4d12:	461a      	mov	r2, r3
   d4d14:	f7ff ffd9 	bl	d4cca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4d18:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4d1a:	0a24      	lsrs	r4, r4, #8
   d4d1c:	736c      	strb	r4, [r5, #13]
}
   d4d1e:	4628      	mov	r0, r5
   d4d20:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d24 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4d24:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d4d26:	6902      	ldr	r2, [r0, #16]
   d4d28:	b90a      	cbnz	r2, d4d2e <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d4d2a:	8980      	ldrh	r0, [r0, #12]
   d4d2c:	e003      	b.n	d4d36 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4d2e:	2210      	movs	r2, #16
   d4d30:	4903      	ldr	r1, [pc, #12]	; (d4d40 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d4d32:	f001 fd41 	bl	d67b8 <memcmp>
   d4d36:	3000      	adds	r0, #0
   d4d38:	bf18      	it	ne
   d4d3a:	2001      	movne	r0, #1
    }
}
   d4d3c:	bd08      	pop	{r3, pc}
   d4d3e:	bf00      	nop
   d4d40:	000d6bb0 	.word	0x000d6bb0

000d4d44 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d4d44:	6900      	ldr	r0, [r0, #16]
   d4d46:	4770      	bx	lr

000d4d48 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d4d48:	b538      	push	{r3, r4, r5, lr}
   d4d4a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d4d4c:	2214      	movs	r2, #20
   d4d4e:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d4d50:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d4d52:	f001 fd66 	bl	d6822 <memset>
    if (type_ == BleUuidType::SHORT) {
   d4d56:	6923      	ldr	r3, [r4, #16]
   d4d58:	b92b      	cbnz	r3, d4d66 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4d5a:	7b62      	ldrb	r2, [r4, #13]
   d4d5c:	7b23      	ldrb	r3, [r4, #12]
   d4d5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4d62:	802b      	strh	r3, [r5, #0]
   d4d64:	e00a      	b.n	d4d7c <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d4d66:	2301      	movs	r3, #1
   d4d68:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4d6a:	f104 0210 	add.w	r2, r4, #16
   d4d6e:	462b      	mov	r3, r5
   d4d70:	f854 1b04 	ldr.w	r1, [r4], #4
   d4d74:	f843 1b04 	str.w	r1, [r3], #4
   d4d78:	4294      	cmp	r4, r2
   d4d7a:	d1f9      	bne.n	d4d70 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d4d7c:	4628      	mov	r0, r5
   d4d7e:	bd38      	pop	{r3, r4, r5, pc}

000d4d80 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4d80:	7b42      	ldrb	r2, [r0, #13]
   d4d82:	7b00      	ldrb	r0, [r0, #12]
}
   d4d84:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4d88:	4770      	bx	lr

000d4d8a <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d4d8a:	4770      	bx	lr

000d4d8c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4d8c:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4d8e:	690b      	ldr	r3, [r1, #16]
   d4d90:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4d92:	f101 0210 	add.w	r2, r1, #16
   d4d96:	4603      	mov	r3, r0
   d4d98:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d9c:	f843 4b04 	str.w	r4, [r3], #4
   d4da0:	4291      	cmp	r1, r2
   d4da2:	d1f9      	bne.n	d4d98 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4da4:	bd10      	pop	{r4, pc}

000d4da6 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4da6:	b510      	push	{r4, lr}
   d4da8:	b086      	sub	sp, #24
   d4daa:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4dac:	2201      	movs	r2, #1
   d4dae:	a801      	add	r0, sp, #4
   d4db0:	f7ff ff8b 	bl	d4cca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4db4:	a901      	add	r1, sp, #4
   d4db6:	4620      	mov	r0, r4
   d4db8:	f7ff ffe8 	bl	d4d8c <_ZN8particle7BleUuidaSERKS0_>
}
   d4dbc:	b006      	add	sp, #24
   d4dbe:	bd10      	pop	{r4, pc}

000d4dc0 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4dc0:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4dc2:	6902      	ldr	r2, [r0, #16]
   d4dc4:	690b      	ldr	r3, [r1, #16]
   d4dc6:	429a      	cmp	r2, r3
   d4dc8:	d106      	bne.n	d4dd8 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4dca:	2210      	movs	r2, #16
   d4dcc:	f001 fcf4 	bl	d67b8 <memcmp>
   d4dd0:	fab0 f080 	clz	r0, r0
   d4dd4:	0940      	lsrs	r0, r0, #5
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	2000      	movs	r0, #0
}
   d4dda:	bd08      	pop	{r3, pc}

000d4ddc <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d4ddc:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d4de0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4de2:	4b31      	ldr	r3, [pc, #196]	; (d4ea8 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4de4:	460e      	mov	r6, r1
   d4de6:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4de8:	4602      	mov	r2, r0
   d4dea:	f103 0110 	add.w	r1, r3, #16
   d4dee:	f853 0b04 	ldr.w	r0, [r3], #4
   d4df2:	f842 0b04 	str.w	r0, [r2], #4
   d4df6:	428b      	cmp	r3, r1
   d4df8:	d1f9      	bne.n	d4dee <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d4dfa:	2e00      	cmp	r6, #0
   d4dfc:	d051      	beq.n	d4ea2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4dfe:	2124      	movs	r1, #36	; 0x24
   d4e00:	4630      	mov	r0, r6
   d4e02:	f001 fd4f 	bl	d68a4 <strnlen>
   d4e06:	2804      	cmp	r0, #4
   d4e08:	d010      	beq.n	d4e2c <_ZN8particle7BleUuid9constructEPKc+0x50>
   d4e0a:	2700      	movs	r7, #0
   d4e0c:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4e0e:	2124      	movs	r1, #36	; 0x24
   d4e10:	4630      	mov	r0, r6
   d4e12:	f001 fd47 	bl	d68a4 <strnlen>
   d4e16:	42b8      	cmp	r0, r7
   d4e18:	d901      	bls.n	d4e1e <_ZN8particle7BleUuid9constructEPKc+0x42>
   d4e1a:	bb44      	cbnz	r4, d4e6e <_ZN8particle7BleUuid9constructEPKc+0x92>
   d4e1c:	e041      	b.n	d4ea2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d4e1e:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d4e20:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4e22:	42a5      	cmp	r5, r4
   d4e24:	d03d      	beq.n	d4ea2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d4e26:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d4e2a:	e7fa      	b.n	d4e22 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4e2c:	7830      	ldrb	r0, [r6, #0]
   d4e2e:	f7ff fef1 	bl	d4c14 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4e32:	1e04      	subs	r4, r0, #0
   d4e34:	db18      	blt.n	d4e68 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4e36:	7870      	ldrb	r0, [r6, #1]
   d4e38:	f7ff feec 	bl	d4c14 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4e3c:	2800      	cmp	r0, #0
   d4e3e:	db13      	blt.n	d4e68 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4e40:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4e44:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4e48:	78b0      	ldrb	r0, [r6, #2]
   d4e4a:	f7ff fee3 	bl	d4c14 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4e4e:	1e04      	subs	r4, r0, #0
   d4e50:	db0a      	blt.n	d4e68 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4e52:	78f0      	ldrb	r0, [r6, #3]
   d4e54:	f7ff fede 	bl	d4c14 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4e58:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4e5a:	bfa1      	itttt	ge
   d4e5c:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d4e60:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d4e64:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d4e66:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d4e68:	2300      	movs	r3, #0
   d4e6a:	612b      	str	r3, [r5, #16]
   d4e6c:	e019      	b.n	d4ea2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d4e6e:	5df0      	ldrb	r0, [r6, r7]
   d4e70:	f7ff fed0 	bl	d4c14 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4e74:	0603      	lsls	r3, r0, #24
   d4e76:	d412      	bmi.n	d4e9e <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d4e78:	3c01      	subs	r4, #1
   d4e7a:	0100      	lsls	r0, r0, #4
   d4e7c:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4e7e:	2124      	movs	r1, #36	; 0x24
   d4e80:	4630      	mov	r0, r6
   d4e82:	f001 fd0f 	bl	d68a4 <strnlen>
   d4e86:	3701      	adds	r7, #1
   d4e88:	4287      	cmp	r7, r0
   d4e8a:	d208      	bcs.n	d4e9e <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d4e8c:	5df0      	ldrb	r0, [r6, r7]
   d4e8e:	f7ff fec1 	bl	d4c14 <_ZN8particle11hexToNibbleEc>
   d4e92:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4e94:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4e96:	bfa2      	ittt	ge
   d4e98:	5d2b      	ldrbge	r3, [r5, r4]
   d4e9a:	4318      	orrge	r0, r3
   d4e9c:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4e9e:	3701      	adds	r7, #1
   d4ea0:	e7b5      	b.n	d4e0e <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d4ea2:	b003      	add	sp, #12
   d4ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ea6:	bf00      	nop
   d4ea8:	000d6bb0 	.word	0x000d6bb0

000d4eac <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d4eac:	b538      	push	{r3, r4, r5, lr}
   d4eae:	4604      	mov	r4, r0
   d4eb0:	460d      	mov	r5, r1
        : BleUuid() {
   d4eb2:	f7ff feed 	bl	d4c90 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	4629      	mov	r1, r5
   d4eba:	f7ff ff8f 	bl	d4ddc <_ZN8particle7BleUuid9constructEPKc>
}
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	bd38      	pop	{r3, r4, r5, pc}

000d4ec2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4ec4:	b18b      	cbz	r3, d4eea <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4ec6:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4ec8:	1ce5      	adds	r5, r4, #3
   d4eca:	428d      	cmp	r5, r1
   d4ecc:	d80f      	bhi.n	d4eee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4ece:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4ed0:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4ed2:	5d87      	ldrb	r7, [r0, r6]
   d4ed4:	4297      	cmp	r7, r2
   d4ed6:	d105      	bne.n	d4ee4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4ed8:	442e      	add	r6, r5
   d4eda:	42b1      	cmp	r1, r6
   d4edc:	d307      	bcc.n	d4eee <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4ede:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4ee0:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4ee4:	3501      	adds	r5, #1
   d4ee6:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4ee8:	e7ee      	b.n	d4ec8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4eea:	4618      	mov	r0, r3
   d4eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4eee:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ef2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4ef2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4ef6:	4604      	mov	r4, r0
   d4ef8:	460e      	mov	r6, r1
   d4efa:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4efc:	4617      	mov	r7, r2
   d4efe:	2a00      	cmp	r2, #0
   d4f00:	d03a      	beq.n	d4f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4f02:	460a      	mov	r2, r1
   d4f04:	ab01      	add	r3, sp, #4
   d4f06:	6a01      	ldr	r1, [r0, #32]
   d4f08:	f7ff ffdb 	bl	d4ec2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4f0c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4f10:	6a22      	ldr	r2, [r4, #32]
   d4f12:	bb03      	cbnz	r3, d4f56 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4f14:	b1f8      	cbz	r0, d4f56 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4f16:	1c96      	adds	r6, r2, #2
   d4f18:	442e      	add	r6, r5
   d4f1a:	1a36      	subs	r6, r6, r0
   d4f1c:	2e1f      	cmp	r6, #31
   d4f1e:	d82b      	bhi.n	d4f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4f20:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4f24:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4f28:	ebc8 0202 	rsb	r2, r8, r2
   d4f2c:	1a12      	subs	r2, r2, r0
   d4f2e:	eb00 0108 	add.w	r1, r0, r8
   d4f32:	eb05 0009 	add.w	r0, r5, r9
   d4f36:	b292      	uxth	r2, r2
   d4f38:	4421      	add	r1, r4
   d4f3a:	4420      	add	r0, r4
   d4f3c:	f001 fc56 	bl	d67ec <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4f40:	1c6b      	adds	r3, r5, #1
   d4f42:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4f46:	462a      	mov	r2, r5
   d4f48:	4639      	mov	r1, r7
   d4f4a:	eb04 0009 	add.w	r0, r4, r9
   d4f4e:	f001 fc42 	bl	d67d6 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4f52:	6226      	str	r6, [r4, #32]
   d4f54:	e010      	b.n	d4f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4f56:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4f58:	182b      	adds	r3, r5, r0
   d4f5a:	2b1f      	cmp	r3, #31
   d4f5c:	d80c      	bhi.n	d4f78 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4f5e:	1c6b      	adds	r3, r5, #1
   d4f60:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4f62:	4422      	add	r2, r4
   d4f64:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4f66:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4f68:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4f6a:	4420      	add	r0, r4
   d4f6c:	462a      	mov	r2, r5
   d4f6e:	f001 fc32 	bl	d67d6 <memcpy>
        selfLen_ += len;
   d4f72:	6a22      	ldr	r2, [r4, #32]
   d4f74:	442a      	add	r2, r5
   d4f76:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4f78:	6a20      	ldr	r0, [r4, #32]
}
   d4f7a:	b003      	add	sp, #12
   d4f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f80 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4f82:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4f84:	4603      	mov	r3, r0
   d4f86:	f100 021f 	add.w	r2, r0, #31
   d4f8a:	2000      	movs	r0, #0
   d4f8c:	f803 0b01 	strb.w	r0, [r3], #1
   d4f90:	4293      	cmp	r3, r2
   d4f92:	f04f 0100 	mov.w	r1, #0
   d4f96:	d1f9      	bne.n	d4f8c <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4f98:	aa04      	add	r2, sp, #16
   d4f9a:	2306      	movs	r3, #6
   d4f9c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4fa0:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4fa2:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4fa4:	9100      	str	r1, [sp, #0]
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	4619      	mov	r1, r3
   d4faa:	f7ff ffa2 	bl	d4ef2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4fae:	4620      	mov	r0, r4
   d4fb0:	b004      	add	sp, #16
   d4fb2:	bd10      	pop	{r4, pc}

000d4fb4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4fb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4fb6:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4fb8:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4fba:	ab01      	add	r3, sp, #4
   d4fbc:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4fbe:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4fc0:	f7ff ff7f 	bl	d4ec2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4fc4:	4605      	mov	r5, r0
   d4fc6:	b178      	cbz	r0, d4fe8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4fc8:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4fca:	6a22      	ldr	r2, [r4, #32]
   d4fcc:	1829      	adds	r1, r5, r0
   d4fce:	1a12      	subs	r2, r2, r0
   d4fd0:	1b52      	subs	r2, r2, r5
   d4fd2:	4421      	add	r1, r4
   d4fd4:	4420      	add	r0, r4
   d4fd6:	f001 fbfe 	bl	d67d6 <memcpy>
        selfLen_ -= len;
   d4fda:	6a23      	ldr	r3, [r4, #32]
   d4fdc:	1b5d      	subs	r5, r3, r5
   d4fde:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4fe0:	4631      	mov	r1, r6
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff ffe6 	bl	d4fb4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4fe8:	b002      	add	sp, #8
   d4fea:	bd70      	pop	{r4, r5, r6, pc}

000d4fec <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4fec:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4fee:	2500      	movs	r5, #0
   d4ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4ff4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d4ff6:	8043      	strh	r3, [r0, #2]
   d4ff8:	220e      	movs	r2, #14
   d4ffa:	4629      	mov	r1, r5
   d4ffc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4ffe:	7105      	strb	r5, [r0, #4]
   d5000:	3006      	adds	r0, #6
   d5002:	f001 fc0e 	bl	d6822 <memset>
   d5006:	f104 0014 	add.w	r0, r4, #20
   d500a:	f7ff fe41 	bl	d4c90 <_ZN8particle7BleUuidC1Ev>
   d500e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5012:	f7ff fe3d 	bl	d4c90 <_ZN8particle7BleUuidC1Ev>
   d5016:	4904      	ldr	r1, [pc, #16]	; (d5028 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5018:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d501c:	f7ff fd8f 	bl	d4b3e <_ZN6StringC1EPK19__FlashStringHelper>
   d5020:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5022:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5024:	4620      	mov	r0, r4
   d5026:	bd38      	pop	{r3, r4, r5, pc}
   d5028:	000d6c67 	.word	0x000d6c67

000d502c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d502c:	b510      	push	{r4, lr}
   d502e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5030:	69c2      	ldr	r2, [r0, #28]
   d5032:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5036:	4293      	cmp	r3, r2
   d5038:	4618      	mov	r0, r3
   d503a:	d006      	beq.n	d504a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d503c:	6804      	ldr	r4, [r0, #0]
   d503e:	8824      	ldrh	r4, [r4, #0]
   d5040:	428c      	cmp	r4, r1
   d5042:	f103 0308 	add.w	r3, r3, #8
   d5046:	d1f6      	bne.n	d5036 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5048:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d504a:	2000      	movs	r0, #0
    }
   d504c:	bd10      	pop	{r4, pc}
	...

000d5050 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5054:	4680      	mov	r8, r0
   d5056:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5058:	460e      	mov	r6, r1
   d505a:	b369      	cbz	r1, d50b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d505c:	b362      	cbz	r2, d50b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d505e:	2af4      	cmp	r2, #244	; 0xf4
   d5060:	6805      	ldr	r5, [r0, #0]
   d5062:	bf28      	it	cs
   d5064:	22f4      	movcs	r2, #244	; 0xf4
   d5066:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5068:	782a      	ldrb	r2, [r5, #0]
   d506a:	b1a2      	cbz	r2, d5096 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d506c:	792b      	ldrb	r3, [r5, #4]
   d506e:	0798      	lsls	r0, r3, #30
   d5070:	d507      	bpl.n	d5082 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5072:	2300      	movs	r3, #0
   d5074:	4622      	mov	r2, r4
   d5076:	89a8      	ldrh	r0, [r5, #12]
   d5078:	f7ff fa82 	bl	d4580 <hal_ble_gatt_server_set_characteristic_value>
   d507c:	2800      	cmp	r0, #0
   d507e:	da02      	bge.n	d5086 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5080:	e043      	b.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5082:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5086:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d508a:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d508c:	06da      	lsls	r2, r3, #27
   d508e:	d518      	bpl.n	d50c2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5090:	2f01      	cmp	r7, #1
   d5092:	d123      	bne.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5094:	e015      	b.n	d50c2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5096:	8868      	ldrh	r0, [r5, #2]
   d5098:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d509c:	4298      	cmp	r0, r3
   d509e:	d00d      	beq.n	d50bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d50a0:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d50a2:	0759      	lsls	r1, r3, #29
   d50a4:	d523      	bpl.n	d50ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d50a6:	2f01      	cmp	r7, #1
   d50a8:	d021      	beq.n	d50ee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d50aa:	89a9      	ldrh	r1, [r5, #12]
   d50ac:	9200      	str	r2, [sp, #0]
   d50ae:	4623      	mov	r3, r4
   d50b0:	4632      	mov	r2, r6
   d50b2:	f7ff fa79 	bl	d45a8 <hal_ble_gatt_client_write_without_response>
   d50b6:	e028      	b.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d50b8:	4815      	ldr	r0, [pc, #84]	; (d5110 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d50ba:	e026      	b.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d50bc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d50c0:	e023      	b.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d50c2:	069a      	lsls	r2, r3, #26
   d50c4:	d521      	bpl.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d50c6:	2f02      	cmp	r7, #2
   d50c8:	d01f      	beq.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50ca:	89a8      	ldrh	r0, [r5, #12]
   d50cc:	2300      	movs	r3, #0
   d50ce:	4622      	mov	r2, r4
   d50d0:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d50d2:	b002      	add	sp, #8
   d50d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50d8:	f7ff ba8e 	b.w	d45f8 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50dc:	89a8      	ldrh	r0, [r5, #12]
   d50de:	2300      	movs	r3, #0
   d50e0:	4622      	mov	r2, r4
   d50e2:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d50e4:	b002      	add	sp, #8
   d50e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50ea:	f7ff ba7b 	b.w	d45e4 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d50ee:	071b      	lsls	r3, r3, #28
   d50f0:	d501      	bpl.n	d50f6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d50f2:	2f02      	cmp	r7, #2
   d50f4:	d102      	bne.n	d50fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d50f6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d50fa:	e006      	b.n	d510a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d50fc:	2300      	movs	r3, #0
   d50fe:	89a9      	ldrh	r1, [r5, #12]
   d5100:	9300      	str	r3, [sp, #0]
   d5102:	4632      	mov	r2, r6
   d5104:	4623      	mov	r3, r4
   d5106:	f7ff fa45 	bl	d4594 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d510a:	b002      	add	sp, #8
   d510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5110:	fffffef2 	.word	0xfffffef2

000d5114 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5114:	b510      	push	{r4, lr}
    return impl()->address();
   d5116:	680a      	ldr	r2, [r1, #0]
   d5118:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d511c:	6003      	str	r3, [r0, #0]
   d511e:	6853      	ldr	r3, [r2, #4]
   d5120:	6043      	str	r3, [r0, #4]
}
   d5122:	bd10      	pop	{r4, pc}

000d5124 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5126:	6802      	ldr	r2, [r0, #0]
   d5128:	680b      	ldr	r3, [r1, #0]
   d512a:	8812      	ldrh	r2, [r2, #0]
   d512c:	881b      	ldrh	r3, [r3, #0]
   d512e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5130:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5132:	d10c      	bne.n	d514e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5134:	4601      	mov	r1, r0
   d5136:	4668      	mov	r0, sp
   d5138:	f7ff ffec 	bl	d5114 <_ZNK8particle13BlePeerDevice7addressEv>
   d513c:	4621      	mov	r1, r4
   d513e:	a802      	add	r0, sp, #8
   d5140:	f7ff ffe8 	bl	d5114 <_ZNK8particle13BlePeerDevice7addressEv>
   d5144:	a902      	add	r1, sp, #8
   d5146:	4668      	mov	r0, sp
   d5148:	f7ff fd94 	bl	d4c74 <_ZNK8particle10BleAddresseqERKS0_>
   d514c:	b900      	cbnz	r0, d5150 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d514e:	2000      	movs	r0, #0
}
   d5150:	b004      	add	sp, #16
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5154:	b510      	push	{r4, lr}
   d5156:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5158:	2034      	movs	r0, #52	; 0x34
   d515a:	f7fe ff9c 	bl	d4096 <_Znwj>
   d515e:	4601      	mov	r1, r0
   d5160:	b168      	cbz	r0, d517e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5162:	2300      	movs	r3, #0
   d5164:	6003      	str	r3, [r0, #0]
   d5166:	6043      	str	r3, [r0, #4]
   d5168:	6083      	str	r3, [r0, #8]
   d516a:	60c3      	str	r3, [r0, #12]
   d516c:	6103      	str	r3, [r0, #16]
   d516e:	6143      	str	r3, [r0, #20]
   d5170:	6183      	str	r3, [r0, #24]
   d5172:	61c3      	str	r3, [r0, #28]
   d5174:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5176:	6243      	str	r3, [r0, #36]	; 0x24
   d5178:	6283      	str	r3, [r0, #40]	; 0x28
   d517a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d517c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d517e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5180:	b919      	cbnz	r1, d518a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5182:	4a0a      	ldr	r2, [pc, #40]	; (d51ac <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5184:	200a      	movs	r0, #10
   d5186:	f7ff faf1 	bl	d476c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d518a:	2000      	movs	r0, #0
   d518c:	f7ff f9c4 	bl	d4518 <hal_ble_stack_init>
   d5190:	b120      	cbz	r0, d519c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5192:	4a06      	ldr	r2, [pc, #24]	; (d51ac <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5194:	2100      	movs	r1, #0
   d5196:	200a      	movs	r0, #10
   d5198:	f7ff fae8 	bl	d476c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d519c:	2200      	movs	r2, #0
   d519e:	6821      	ldr	r1, [r4, #0]
   d51a0:	4803      	ldr	r0, [pc, #12]	; (d51b0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d51a2:	f7ff fa15 	bl	d45d0 <hal_ble_set_callback_on_periph_link_events>
}
   d51a6:	4620      	mov	r0, r4
   d51a8:	bd10      	pop	{r4, pc}
   d51aa:	bf00      	nop
   d51ac:	000d44f9 	.word	0x000d44f9
   d51b0:	000d55a9 	.word	0x000d55a9

000d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d51b4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d51b6:	4c0a      	ldr	r4, [pc, #40]	; (d51e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d51b8:	6823      	ldr	r3, [r4, #0]
   d51ba:	07db      	lsls	r3, r3, #31
   d51bc:	d40e      	bmi.n	d51dc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d51be:	4620      	mov	r0, r4
   d51c0:	f7fe ff6f 	bl	d40a2 <__cxa_guard_acquire>
   d51c4:	b150      	cbz	r0, d51dc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d51c6:	4807      	ldr	r0, [pc, #28]	; (d51e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d51c8:	f7ff ffc4 	bl	d5154 <_ZN8particle14BleLocalDeviceC1Ev>
   d51cc:	4620      	mov	r0, r4
   d51ce:	f7fe ff6d 	bl	d40ac <__cxa_guard_release>
   d51d2:	4a05      	ldr	r2, [pc, #20]	; (d51e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d51d4:	4905      	ldr	r1, [pc, #20]	; (d51ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d51d6:	4803      	ldr	r0, [pc, #12]	; (d51e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d51d8:	f001 f978 	bl	d64cc <__aeabi_atexit>
    return instance;
}
   d51dc:	4801      	ldr	r0, [pc, #4]	; (d51e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d51de:	bd10      	pop	{r4, pc}
   d51e0:	2003e400 	.word	0x2003e400
   d51e4:	2003e3fc 	.word	0x2003e3fc
   d51e8:	2003e348 	.word	0x2003e348
   d51ec:	000d53bf 	.word	0x000d53bf

000d51f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d51f0:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d51f2:	6803      	ldr	r3, [r0, #0]
   d51f4:	3b09      	subs	r3, #9
   d51f6:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d51f8:	b08a      	sub	sp, #40	; 0x28
   d51fa:	4604      	mov	r4, r0
   d51fc:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d51fe:	d819      	bhi.n	d5234 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5200:	f7ff ffd8 	bl	d51b4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5204:	88a1      	ldrh	r1, [r4, #4]
   d5206:	6800      	ldr	r0, [r0, #0]
   d5208:	f7ff ff10 	bl	d502c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d520c:	4602      	mov	r2, r0
   d520e:	b958      	cbnz	r0, d5228 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5210:	2320      	movs	r3, #32
   d5212:	9302      	str	r3, [sp, #8]
   d5214:	4b08      	ldr	r3, [pc, #32]	; (d5238 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5216:	9003      	str	r0, [sp, #12]
   d5218:	9300      	str	r3, [sp, #0]
   d521a:	aa02      	add	r2, sp, #8
   d521c:	4603      	mov	r3, r0
   d521e:	4907      	ldr	r1, [pc, #28]	; (d523c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5220:	2032      	movs	r0, #50	; 0x32
   d5222:	f7ff faab 	bl	d477c <log_message>
   d5226:	e005      	b.n	d5234 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5228:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d522a:	b11d      	cbz	r5, d5234 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d522c:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d522e:	68e1      	ldr	r1, [r4, #12]
   d5230:	6920      	ldr	r0, [r4, #16]
   d5232:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5234:	b00a      	add	sp, #40	; 0x28
   d5236:	bd70      	pop	{r4, r5, r6, pc}
   d5238:	000d6a5a 	.word	0x000d6a5a
   d523c:	000d6a10 	.word	0x000d6a10

000d5240 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5240:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5242:	a801      	add	r0, sp, #4
   d5244:	f7ff fcfc 	bl	d4c40 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5248:	2000      	movs	r0, #0
   d524a:	f7ff f965 	bl	d4518 <hal_ble_stack_init>
   d524e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d5250:	a801      	add	r0, sp, #4
   d5252:	f7ff fd03 	bl	d4c5c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d5256:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d525a:	b002      	add	sp, #8
   d525c:	bd10      	pop	{r4, pc}

000d525e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d525e:	4608      	mov	r0, r1
   d5260:	b909      	cbnz	r1, d5266 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5262:	460a      	mov	r2, r1
   d5264:	e001      	b.n	d526a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5266:	6a09      	ldr	r1, [r1, #32]
   d5268:	2200      	movs	r2, #0
   d526a:	f7ff b95d 	b.w	d4528 <hal_ble_gap_set_advertising_data>

000d526e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d526e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5270:	460c      	mov	r4, r1
   d5272:	b911      	cbnz	r1, d527a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5274:	460a      	mov	r2, r1
   d5276:	4608      	mov	r0, r1
   d5278:	e006      	b.n	d5288 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d527a:	2101      	movs	r1, #1
   d527c:	4620      	mov	r0, r4
   d527e:	f7ff fe99 	bl	d4fb4 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5282:	6a21      	ldr	r1, [r4, #32]
   d5284:	2200      	movs	r2, #0
   d5286:	4620      	mov	r0, r4
    }
}
   d5288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d528c:	f7ff b954 	b.w	d4538 <hal_ble_gap_set_scan_response_data>

000d5290 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5290:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5292:	a801      	add	r0, sp, #4
   d5294:	f7ff fcd4 	bl	d4c40 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5298:	2000      	movs	r0, #0
   d529a:	f7ff f955 	bl	d4548 <hal_ble_gap_start_advertising>
   d529e:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d52a0:	a801      	add	r0, sp, #4
   d52a2:	f7ff fcdb 	bl	d4c5c <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d52a6:	4620      	mov	r0, r4
   d52a8:	b002      	add	sp, #8
   d52aa:	bd10      	pop	{r4, pc}

000d52ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d52ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d52ae:	4605      	mov	r5, r0
   d52b0:	460c      	mov	r4, r1
    WiringBleLock lk;
   d52b2:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d52b4:	4616      	mov	r6, r2
    WiringBleLock lk;
   d52b6:	f7ff fcc3 	bl	d4c40 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d52ba:	4621      	mov	r1, r4
   d52bc:	4628      	mov	r0, r5
   d52be:	f7ff ffce 	bl	d525e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d52c2:	2800      	cmp	r0, #0
   d52c4:	db08      	blt.n	d52d8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d52c6:	4631      	mov	r1, r6
   d52c8:	4628      	mov	r0, r5
   d52ca:	f7ff ffd0 	bl	d526e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d52ce:	2800      	cmp	r0, #0
   d52d0:	db02      	blt.n	d52d8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d52d2:	4628      	mov	r0, r5
   d52d4:	f7ff ffdc 	bl	d5290 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d52d8:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d52da:	a801      	add	r0, sp, #4
   d52dc:	f7ff fcbe 	bl	d4c5c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d52e0:	4620      	mov	r0, r4
   d52e2:	b002      	add	sp, #8
   d52e4:	bd70      	pop	{r4, r5, r6, pc}

000d52e6 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d52e6:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d52e8:	69d8      	ldr	r0, [r3, #28]
}
   d52ea:	2800      	cmp	r0, #0
   d52ec:	bfd4      	ite	le
   d52ee:	2000      	movle	r0, #0
   d52f0:	2001      	movgt	r0, #1
   d52f2:	4770      	bx	lr

000d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d52f4:	680b      	ldr	r3, [r1, #0]
   d52f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d52f8:	b113      	cbz	r3, d5300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d52fa:	685a      	ldr	r2, [r3, #4]
   d52fc:	3201      	adds	r2, #1
   d52fe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5300:	4770      	bx	lr

000d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5302:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5304:	f851 3b04 	ldr.w	r3, [r1], #4
   d5308:	4604      	mov	r4, r0
   d530a:	f840 3b04 	str.w	r3, [r0], #4
   d530e:	f7ff fff1 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5312:	6823      	ldr	r3, [r4, #0]
   d5314:	b90b      	cbnz	r3, d531a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5316:	f7ff fc63 	bl	d4be0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d531a:	4620      	mov	r0, r4
   d531c:	bd10      	pop	{r4, pc}

000d531e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d531e:	b510      	push	{r4, lr}
   d5320:	f851 3b04 	ldr.w	r3, [r1], #4
   d5324:	4604      	mov	r4, r0
   d5326:	f840 3b04 	str.w	r3, [r0], #4
   d532a:	f7ff ffe3 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d532e:	4620      	mov	r0, r4
   d5330:	bd10      	pop	{r4, pc}

000d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5332:	b510      	push	{r4, lr}
   d5334:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5336:	6800      	ldr	r0, [r0, #0]
   d5338:	b128      	cbz	r0, d5346 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d533a:	6843      	ldr	r3, [r0, #4]
   d533c:	3b01      	subs	r3, #1
   d533e:	6043      	str	r3, [r0, #4]
   d5340:	b90b      	cbnz	r3, d5346 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5342:	f7ff fc57 	bl	d4bf4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5346:	4620      	mov	r0, r4
   d5348:	bd10      	pop	{r4, pc}

000d534a <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d534a:	b510      	push	{r4, lr}
   d534c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d534e:	3004      	adds	r0, #4
   d5350:	f7ff ffef 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5354:	4620      	mov	r0, r4
   d5356:	bd10      	pop	{r4, pc}

000d5358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5358:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d535a:	6804      	ldr	r4, [r0, #0]
   d535c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d535e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5360:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5364:	42a6      	cmp	r6, r4
   d5366:	d004      	beq.n	d5372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5368:	1d20      	adds	r0, r4, #4
   d536a:	f7ff ffe2 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d536e:	3408      	adds	r4, #8
   d5370:	e7f8      	b.n	d5364 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5372:	6828      	ldr	r0, [r5, #0]
   d5374:	f7ff fa90 	bl	d4898 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5378:	4628      	mov	r0, r5
   d537a:	bd70      	pop	{r4, r5, r6, pc}

000d537c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d537c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d537e:	6804      	ldr	r4, [r0, #0]
   d5380:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5382:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5384:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5388:	42a6      	cmp	r6, r4
   d538a:	d004      	beq.n	d5396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d538c:	1d20      	adds	r0, r4, #4
   d538e:	f7ff ffd0 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5392:	3408      	adds	r4, #8
   d5394:	e7f8      	b.n	d5388 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5396:	6828      	ldr	r0, [r5, #0]
   d5398:	f7ff fa7e 	bl	d4898 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d539c:	4628      	mov	r0, r5
   d539e:	bd70      	pop	{r4, r5, r6, pc}

000d53a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d53a0:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d53a2:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d53a4:	f104 0018 	add.w	r0, r4, #24
   d53a8:	f7ff ffe8 	bl	d537c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d53ac:	f104 000c 	add.w	r0, r4, #12
   d53b0:	f7ff ffd2 	bl	d5358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d53b4:	4620      	mov	r0, r4
   d53b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d53ba:	f7fe be6e 	b.w	d409a <_ZdlPv>

000d53be <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d53be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d53c0:	6804      	ldr	r4, [r0, #0]
   d53c2:	4607      	mov	r7, r0
   d53c4:	b1c4      	cbz	r4, d53f8 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d53c6:	69a5      	ldr	r5, [r4, #24]
   d53c8:	69e3      	ldr	r3, [r4, #28]
   d53ca:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d53ce:	42ae      	cmp	r6, r5
   d53d0:	d004      	beq.n	d53dc <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53d2:	1d28      	adds	r0, r5, #4
   d53d4:	f7ff ffad 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53d8:	3508      	adds	r5, #8
   d53da:	e7f8      	b.n	d53ce <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d53dc:	69a0      	ldr	r0, [r4, #24]
   d53de:	f7ff fa5b 	bl	d4898 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d53e2:	f104 000c 	add.w	r0, r4, #12
   d53e6:	f7ff ffc9 	bl	d537c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d53ea:	4620      	mov	r0, r4
   d53ec:	f7ff ffb4 	bl	d5358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d53f0:	2134      	movs	r1, #52	; 0x34
   d53f2:	4620      	mov	r0, r4
   d53f4:	f001 f878 	bl	d64e8 <_ZdlPvj>
   d53f8:	4638      	mov	r0, r7
   d53fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53fc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d53fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d53fe:	2500      	movs	r5, #0
   d5400:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5402:	6045      	str	r5, [r0, #4]
   d5404:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5406:	2024      	movs	r0, #36	; 0x24
   d5408:	f7fe fe45 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d540c:	4604      	mov	r4, r0
   d540e:	b178      	cbz	r0, d5430 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5410:	4603      	mov	r3, r0
   d5412:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5416:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d541a:	f8c0 5002 	str.w	r5, [r0, #2]
   d541e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5420:	7285      	strb	r5, [r0, #10]
   d5422:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5424:	60c5      	str	r5, [r0, #12]
   d5426:	6105      	str	r5, [r0, #16]
   d5428:	6145      	str	r5, [r0, #20]
   d542a:	6185      	str	r5, [r0, #24]
   d542c:	61c5      	str	r5, [r0, #28]
   d542e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5430:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5432:	2014      	movs	r0, #20
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	f7fe fe2e 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d543a:	4603      	mov	r3, r0
   d543c:	b128      	cbz	r0, d544a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d543e:	2201      	movs	r2, #1
   d5440:	6042      	str	r2, [r0, #4]
   d5442:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5444:	4a08      	ldr	r2, [pc, #32]	; (d5468 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5446:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5448:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d544a:	a802      	add	r0, sp, #8
   d544c:	6872      	ldr	r2, [r6, #4]
   d544e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5452:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5454:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5456:	f7ff ff6c 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d545a:	6833      	ldr	r3, [r6, #0]
   d545c:	b90b      	cbnz	r3, d5462 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d545e:	f7ff fbbf 	bl	d4be0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5462:	4630      	mov	r0, r6
   d5464:	b002      	add	sp, #8
   d5466:	bd70      	pop	{r4, r5, r6, pc}
   d5468:	000d69ec 	.word	0x000d69ec

000d546c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d546c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d546e:	b570      	push	{r4, r5, r6, lr}
   d5470:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5472:	d91a      	bls.n	d54aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5474:	4290      	cmp	r0, r2
   d5476:	d219      	bcs.n	d54ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5478:	f1a1 0608 	sub.w	r6, r1, #8
   d547c:	1a51      	subs	r1, r2, r1
   d547e:	3904      	subs	r1, #4
   d5480:	1f15      	subs	r5, r2, #4
   d5482:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5484:	1f2b      	subs	r3, r5, #4
   d5486:	429e      	cmp	r6, r3
   d5488:	d025      	beq.n	d54d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d548a:	2c04      	cmp	r4, #4
   d548c:	d007      	beq.n	d549e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d548e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5492:	f844 3c04 	str.w	r3, [r4, #-4]
   d5496:	4629      	mov	r1, r5
   d5498:	4620      	mov	r0, r4
   d549a:	f7ff ff2b 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d549e:	4628      	mov	r0, r5
   d54a0:	f7ff ff47 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54a4:	3d08      	subs	r5, #8
   d54a6:	3c08      	subs	r4, #8
   d54a8:	e7ec      	b.n	d5484 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d54aa:	d014      	beq.n	d54d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d54ac:	1d0c      	adds	r4, r1, #4
   d54ae:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d54b0:	1f23      	subs	r3, r4, #4
   d54b2:	429d      	cmp	r5, r3
   d54b4:	d00f      	beq.n	d54d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d54b6:	2e04      	cmp	r6, #4
   d54b8:	d007      	beq.n	d54ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d54ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d54be:	f846 3c04 	str.w	r3, [r6, #-4]
   d54c2:	4621      	mov	r1, r4
   d54c4:	4630      	mov	r0, r6
   d54c6:	f7ff ff15 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d54ca:	4620      	mov	r0, r4
   d54cc:	f7ff ff31 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54d0:	3408      	adds	r4, #8
   d54d2:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d54d4:	e7ec      	b.n	d54b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d54d6:	bd70      	pop	{r4, r5, r6, pc}

000d54d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d54d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d54dc:	6804      	ldr	r4, [r0, #0]
   d54de:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d54e0:	4605      	mov	r5, r0
   d54e2:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d54e4:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d54e8:	42a7      	cmp	r7, r4
   d54ea:	d018      	beq.n	d551e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d54ec:	4641      	mov	r1, r8
   d54ee:	4620      	mov	r0, r4
   d54f0:	f7ff fe18 	bl	d5124 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d54f4:	4606      	mov	r6, r0
   d54f6:	b908      	cbnz	r0, d54fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d54f8:	3408      	adds	r4, #8
   d54fa:	e7f5      	b.n	d54e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d54fc:	b18c      	cbz	r4, d5522 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d54fe:	1d20      	adds	r0, r4, #4
   d5500:	f7ff ff17 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5504:	682b      	ldr	r3, [r5, #0]
   d5506:	686a      	ldr	r2, [r5, #4]
   d5508:	f104 0108 	add.w	r1, r4, #8
   d550c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5510:	4620      	mov	r0, r4
   d5512:	f7ff ffab 	bl	d546c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5516:	686b      	ldr	r3, [r5, #4]
   d5518:	3b01      	subs	r3, #1
   d551a:	606b      	str	r3, [r5, #4]
    return true;
   d551c:	e002      	b.n	d5524 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d551e:	2600      	movs	r6, #0
   d5520:	e000      	b.n	d5524 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5522:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5524:	4630      	mov	r0, r6
   d5526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d552a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d552a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d552c:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d552e:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5532:	6847      	ldr	r7, [r0, #4]
   d5534:	9300      	str	r3, [sp, #0]
   d5536:	a801      	add	r0, sp, #4
   d5538:	f7ff fedc 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d553c:	6866      	ldr	r6, [r4, #4]
   d553e:	68a3      	ldr	r3, [r4, #8]
   d5540:	429e      	cmp	r6, r3
   d5542:	db14      	blt.n	d556e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5544:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5546:	2e00      	cmp	r6, #0
   d5548:	dd0b      	ble.n	d5562 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d554a:	00f0      	lsls	r0, r6, #3
   d554c:	f7ff f99c 	bl	d4888 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5550:	4605      	mov	r5, r0
   d5552:	b318      	cbz	r0, d559c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5554:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5558:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d555c:	f7ff ff86 	bl	d546c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5560:	e000      	b.n	d5564 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5562:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5564:	6820      	ldr	r0, [r4, #0]
   d5566:	f7ff f997 	bl	d4898 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d556a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d556c:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d556e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5570:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5572:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5576:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d557a:	4629      	mov	r1, r5
   d557c:	f105 0008 	add.w	r0, r5, #8
   d5580:	f7ff ff74 	bl	d546c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5584:	b135      	cbz	r5, d5594 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5586:	9b00      	ldr	r3, [sp, #0]
   d5588:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d558c:	a901      	add	r1, sp, #4
   d558e:	1d28      	adds	r0, r5, #4
   d5590:	f7ff feb0 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5594:	6863      	ldr	r3, [r4, #4]
   d5596:	3301      	adds	r3, #1
   d5598:	6063      	str	r3, [r4, #4]
   d559a:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d559c:	a801      	add	r0, sp, #4
   d559e:	f7ff fec8 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d55a2:	4628      	mov	r0, r5
   d55a4:	b003      	add	sp, #12
   d55a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d55a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d55a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d55ac:	4604      	mov	r4, r0
   d55ae:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d55b0:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d55b2:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d55b4:	f7ff fb44 	bl	d4c40 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d55b8:	6823      	ldr	r3, [r4, #0]
   d55ba:	2b03      	cmp	r3, #3
   d55bc:	d002      	beq.n	d55c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d55be:	2b04      	cmp	r3, #4
   d55c0:	d042      	beq.n	d5648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d55c2:	e087      	b.n	d56d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d55c4:	a804      	add	r0, sp, #16
   d55c6:	f7ff ff19 	bl	d53fc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d55ca:	9b04      	ldr	r3, [sp, #16]
   d55cc:	8922      	ldrh	r2, [r4, #8]
   d55ce:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d55d0:	6862      	ldr	r2, [r4, #4]
   d55d2:	9904      	ldr	r1, [sp, #16]
   d55d4:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d55d8:	f8c1 3002 	str.w	r3, [r1, #2]
   d55dc:	6853      	ldr	r3, [r2, #4]
   d55de:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55e2:	a807      	add	r0, sp, #28
   d55e4:	9b04      	ldr	r3, [sp, #16]
   d55e6:	9306      	str	r3, [sp, #24]
   d55e8:	a905      	add	r1, sp, #20
   d55ea:	f7ff fe83 	bl	d52f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d55ee:	a906      	add	r1, sp, #24
   d55f0:	f105 0018 	add.w	r0, r5, #24
   d55f4:	f7ff ff99 	bl	d552a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d55f8:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55fa:	a807      	add	r0, sp, #28
   d55fc:	f7ff fe99 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5600:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5602:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5604:	b974      	cbnz	r4, d5624 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5606:	4b36      	ldr	r3, [pc, #216]	; (d56e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5608:	9300      	str	r3, [sp, #0]
   d560a:	aa06      	add	r2, sp, #24
   d560c:	4623      	mov	r3, r4
   d560e:	4935      	ldr	r1, [pc, #212]	; (d56e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5610:	9407      	str	r4, [sp, #28]
   d5612:	2032      	movs	r0, #50	; 0x32
   d5614:	f7ff f8b2 	bl	d477c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5618:	9b04      	ldr	r3, [sp, #16]
   d561a:	4621      	mov	r1, r4
   d561c:	8818      	ldrh	r0, [r3, #0]
   d561e:	f7fe ff9b 	bl	d4558 <hal_ble_gap_disconnect>
   d5622:	e00d      	b.n	d5640 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5624:	4a30      	ldr	r2, [pc, #192]	; (d56e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5626:	9200      	str	r2, [sp, #0]
   d5628:	2300      	movs	r3, #0
   d562a:	aa06      	add	r2, sp, #24
   d562c:	492d      	ldr	r1, [pc, #180]	; (d56e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d562e:	9307      	str	r3, [sp, #28]
   d5630:	2001      	movs	r0, #1
   d5632:	f7ff f8a3 	bl	d477c <log_message>
                if (impl->connectedCb_) {
   d5636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5638:	b113      	cbz	r3, d5640 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d563a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d563c:	a804      	add	r0, sp, #16
   d563e:	4798      	blx	r3
   d5640:	a805      	add	r0, sp, #20
   d5642:	f7ff fe76 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5646:	e045      	b.n	d56d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5648:	8921      	ldrh	r1, [r4, #8]
   d564a:	4628      	mov	r0, r5
   d564c:	f7ff fcee 	bl	d502c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5650:	4607      	mov	r7, r0
   d5652:	2800      	cmp	r0, #0
   d5654:	d03e      	beq.n	d56d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5656:	6804      	ldr	r4, [r0, #0]
   d5658:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d565a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d565c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5660:	8022      	strh	r2, [r4, #0]
   d5662:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5666:	4299      	cmp	r1, r3
   d5668:	d003      	beq.n	d5672 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d566a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d566e:	8042      	strh	r2, [r0, #2]
   d5670:	e7f9      	b.n	d5666 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5672:	68e6      	ldr	r6, [r4, #12]
   d5674:	6923      	ldr	r3, [r4, #16]
   d5676:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d567a:	45b0      	cmp	r8, r6
   d567c:	d004      	beq.n	d5688 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d567e:	1d30      	adds	r0, r6, #4
   d5680:	f7ff fe57 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5684:	3608      	adds	r6, #8
   d5686:	e7f8      	b.n	d567a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5688:	2300      	movs	r3, #0
   d568a:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d568c:	69a6      	ldr	r6, [r4, #24]
   d568e:	69e3      	ldr	r3, [r4, #28]
   d5690:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5694:	45b0      	cmp	r8, r6
   d5696:	d004      	beq.n	d56a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5698:	1d30      	adds	r0, r6, #4
   d569a:	f7ff fe4a 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d569e:	3608      	adds	r6, #8
   d56a0:	e7f8      	b.n	d5694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d56a2:	2300      	movs	r3, #0
   d56a4:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d56a6:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d56a8:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d56aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d56ac:	b113      	cbz	r3, d56b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d56ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d56b0:	4638      	mov	r0, r7
   d56b2:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d56b4:	2320      	movs	r3, #32
   d56b6:	4a0d      	ldr	r2, [pc, #52]	; (d56ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d56b8:	9306      	str	r3, [sp, #24]
   d56ba:	9200      	str	r2, [sp, #0]
   d56bc:	2300      	movs	r3, #0
   d56be:	4909      	ldr	r1, [pc, #36]	; (d56e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d56c0:	9307      	str	r3, [sp, #28]
   d56c2:	2001      	movs	r0, #1
   d56c4:	aa06      	add	r2, sp, #24
   d56c6:	f7ff f859 	bl	d477c <log_message>
                    impl->peers_.removeOne(*peer);
   d56ca:	4639      	mov	r1, r7
   d56cc:	f105 0018 	add.w	r0, r5, #24
   d56d0:	f7ff ff02 	bl	d54d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d56d4:	a803      	add	r0, sp, #12
   d56d6:	f7ff fac1 	bl	d4c5c <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d56da:	b00e      	add	sp, #56	; 0x38
   d56dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d56e0:	000d6a72 	.word	0x000d6a72
   d56e4:	000d6a10 	.word	0x000d6a10
   d56e8:	000d6a98 	.word	0x000d6a98
   d56ec:	000d6ab5 	.word	0x000d6ab5

000d56f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d56f0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d56f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56f4:	4606      	mov	r6, r0
   d56f6:	460c      	mov	r4, r1
   d56f8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d56fa:	d914      	bls.n	d5726 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d56fc:	4290      	cmp	r0, r2
   d56fe:	d213      	bcs.n	d5728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5700:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5704:	1a6c      	subs	r4, r5, r1
   d5706:	f1a1 0708 	sub.w	r7, r1, #8
   d570a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d570c:	42af      	cmp	r7, r5
   d570e:	d018      	beq.n	d5742 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5710:	b11c      	cbz	r4, d571a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5712:	4629      	mov	r1, r5
   d5714:	4620      	mov	r0, r4
   d5716:	f7ff fe02 	bl	d531e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d571a:	1d28      	adds	r0, r5, #4
   d571c:	f7ff fe09 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5720:	3d08      	subs	r5, #8
   d5722:	3c08      	subs	r4, #8
   d5724:	e7f2      	b.n	d570c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5726:	d00c      	beq.n	d5742 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5728:	42ac      	cmp	r4, r5
   d572a:	d00a      	beq.n	d5742 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d572c:	b11e      	cbz	r6, d5736 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d572e:	4621      	mov	r1, r4
   d5730:	4630      	mov	r0, r6
   d5732:	f7ff fdf4 	bl	d531e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5736:	1d20      	adds	r0, r4, #4
   d5738:	f7ff fdfb 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d573c:	3408      	adds	r4, #8
   d573e:	3608      	adds	r6, #8
   d5740:	e7f2      	b.n	d5728 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5744 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5744:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5746:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5748:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d574a:	dd0b      	ble.n	d5764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d574c:	00f0      	lsls	r0, r6, #3
   d574e:	f7ff f89b 	bl	d4888 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5752:	4604      	mov	r4, r0
   d5754:	b170      	cbz	r0, d5774 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5756:	e895 0006 	ldmia.w	r5, {r1, r2}
   d575a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d575e:	f7ff ffc7 	bl	d56f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5762:	e000      	b.n	d5766 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5764:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5766:	6828      	ldr	r0, [r5, #0]
   d5768:	f7ff f896 	bl	d4898 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d576c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d576e:	60ae      	str	r6, [r5, #8]
        return true;
   d5770:	2001      	movs	r0, #1
   d5772:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5774:	bd70      	pop	{r4, r5, r6, pc}

000d5776 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5776:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5778:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d577a:	6845      	ldr	r5, [r0, #4]
   d577c:	4668      	mov	r0, sp
   d577e:	f7ff fdce 	bl	d531e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5782:	6861      	ldr	r1, [r4, #4]
   d5784:	68a3      	ldr	r3, [r4, #8]
   d5786:	4299      	cmp	r1, r3
   d5788:	db05      	blt.n	d5796 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d578a:	3101      	adds	r1, #1
   d578c:	4620      	mov	r0, r4
   d578e:	f7ff ffd9 	bl	d5744 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5792:	4606      	mov	r6, r0
   d5794:	b198      	cbz	r0, d57be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5796:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5798:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d579a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d579e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d57a2:	4629      	mov	r1, r5
   d57a4:	f105 0008 	add.w	r0, r5, #8
   d57a8:	f7ff ffa2 	bl	d56f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d57ac:	b11d      	cbz	r5, d57b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d57ae:	4669      	mov	r1, sp
   d57b0:	4628      	mov	r0, r5
   d57b2:	f7ff fdb4 	bl	d531e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d57b6:	6863      	ldr	r3, [r4, #4]
   d57b8:	3301      	adds	r3, #1
   d57ba:	6063      	str	r3, [r4, #4]
   d57bc:	2601      	movs	r6, #1
   d57be:	a801      	add	r0, sp, #4
   d57c0:	f7ff fdb7 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d57c4:	4630      	mov	r0, r6
   d57c6:	b002      	add	sp, #8
   d57c8:	bd70      	pop	{r4, r5, r6, pc}

000d57ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d57ca:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d57cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57ce:	4606      	mov	r6, r0
   d57d0:	460c      	mov	r4, r1
   d57d2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d57d4:	d914      	bls.n	d5800 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d57d6:	4290      	cmp	r0, r2
   d57d8:	d213      	bcs.n	d5802 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d57da:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d57de:	1a6c      	subs	r4, r5, r1
   d57e0:	f1a1 0708 	sub.w	r7, r1, #8
   d57e4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d57e6:	42af      	cmp	r7, r5
   d57e8:	d018      	beq.n	d581c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d57ea:	b11c      	cbz	r4, d57f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d57ec:	4629      	mov	r1, r5
   d57ee:	4620      	mov	r0, r4
   d57f0:	f7ff fd87 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d57f4:	1d28      	adds	r0, r5, #4
   d57f6:	f7ff fd9c 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d57fa:	3d08      	subs	r5, #8
   d57fc:	3c08      	subs	r4, #8
   d57fe:	e7f2      	b.n	d57e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5800:	d00c      	beq.n	d581c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5802:	42ac      	cmp	r4, r5
   d5804:	d00a      	beq.n	d581c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5806:	b11e      	cbz	r6, d5810 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5808:	4621      	mov	r1, r4
   d580a:	4630      	mov	r0, r6
   d580c:	f7ff fd79 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5810:	1d20      	adds	r0, r4, #4
   d5812:	f7ff fd8e 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5816:	3408      	adds	r4, #8
   d5818:	3608      	adds	r6, #8
   d581a:	e7f2      	b.n	d5802 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d581e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d581e:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5820:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5822:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5824:	dd0b      	ble.n	d583e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5826:	00f0      	lsls	r0, r6, #3
   d5828:	f7ff f82e 	bl	d4888 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d582c:	4604      	mov	r4, r0
   d582e:	b170      	cbz	r0, d584e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5830:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5834:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5838:	f7ff ffc7 	bl	d57ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d583c:	e000      	b.n	d5840 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d583e:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5840:	6828      	ldr	r0, [r5, #0]
   d5842:	f7ff f829 	bl	d4898 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5846:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5848:	60ae      	str	r6, [r5, #8]
        return true;
   d584a:	2001      	movs	r0, #1
   d584c:	bd70      	pop	{r4, r5, r6, pc}
    }
   d584e:	bd70      	pop	{r4, r5, r6, pc}

000d5850 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5850:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5852:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5854:	6845      	ldr	r5, [r0, #4]
   d5856:	4668      	mov	r0, sp
   d5858:	f7ff fd53 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d585c:	6861      	ldr	r1, [r4, #4]
   d585e:	68a3      	ldr	r3, [r4, #8]
   d5860:	4299      	cmp	r1, r3
   d5862:	db05      	blt.n	d5870 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5864:	3101      	adds	r1, #1
   d5866:	4620      	mov	r0, r4
   d5868:	f7ff ffd9 	bl	d581e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d586c:	4606      	mov	r6, r0
   d586e:	b198      	cbz	r0, d5898 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5870:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5872:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5874:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5878:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d587c:	4629      	mov	r1, r5
   d587e:	f105 0008 	add.w	r0, r5, #8
   d5882:	f7ff ffa2 	bl	d57ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5886:	b11d      	cbz	r5, d5890 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5888:	4669      	mov	r1, sp
   d588a:	4628      	mov	r0, r5
   d588c:	f7ff fd39 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5890:	6863      	ldr	r3, [r4, #4]
   d5892:	3301      	adds	r3, #1
   d5894:	6063      	str	r3, [r4, #4]
   d5896:	2601      	movs	r6, #1
   d5898:	a801      	add	r0, sp, #4
   d589a:	f7ff fd4a 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d589e:	4630      	mov	r0, r6
   d58a0:	b002      	add	sp, #8
   d58a2:	bd70      	pop	{r4, r5, r6, pc}

000d58a4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d58a4:	b510      	push	{r4, lr}
   d58a6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d58a8:	6840      	ldr	r0, [r0, #4]
   d58aa:	b108      	cbz	r0, d58b0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d58ac:	f7fe fbf5 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d58b0:	4620      	mov	r0, r4
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d58b4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d58b6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d58b8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d58ba:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d58be:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d58c2:	f7ff f8f5 	bl	d4ab0 <_ZN6StringD1Ev>
   d58c6:	4668      	mov	r0, sp
   d58c8:	f7ff ffec 	bl	d58a4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d58cc:	b003      	add	sp, #12
   d58ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d58d4:	b538      	push	{r3, r4, r5, lr}
   d58d6:	2300      	movs	r3, #0
   d58d8:	4604      	mov	r4, r0
   d58da:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d58dc:	2014      	movs	r0, #20
   d58de:	460d      	mov	r5, r1
   d58e0:	f7fe fbd9 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d58e4:	b128      	cbz	r0, d58f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d58e6:	2301      	movs	r3, #1
   d58e8:	6043      	str	r3, [r0, #4]
   d58ea:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d58ec:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d58ee:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d58f0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d58f2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d58f4:	4620      	mov	r0, r4
   d58f6:	bd38      	pop	{r3, r4, r5, pc}
   d58f8:	000d69b4 	.word	0x000d69b4

000d58fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d58fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5900:	b088      	sub	sp, #32
   d5902:	4605      	mov	r5, r0
   d5904:	461e      	mov	r6, r3
   d5906:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5908:	2300      	movs	r3, #0
   d590a:	460f      	mov	r7, r1
   d590c:	4690      	mov	r8, r2
   d590e:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5910:	9305      	str	r3, [sp, #20]
   d5912:	f7fe fbc0 	bl	d4096 <_Znwj>
   d5916:	f8cd d018 	str.w	sp, [sp, #24]
   d591a:	4604      	mov	r4, r0
   d591c:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d591e:	b1c0      	cbz	r0, d5952 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d5920:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d5924:	f7ff fb62 	bl	d4fec <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5928:	4639      	mov	r1, r7
   d592a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d592e:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d5932:	f7ff f917 	bl	d4b64 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5938:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d593a:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d593c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d593e:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5940:	f104 0014 	add.w	r0, r4, #20
   d5944:	f7ff fa22 	bl	d4d8c <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5948:	990e      	ldr	r1, [sp, #56]	; 0x38
   d594a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d594e:	f7ff fa1d 	bl	d4d8c <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5952:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5954:	2600      	movs	r6, #0
   d5956:	ab01      	add	r3, sp, #4
   d5958:	aa02      	add	r2, sp, #8
   d595a:	a803      	add	r0, sp, #12
   d595c:	9607      	str	r6, [sp, #28]
   d595e:	f7ff ffb9 	bl	d58d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5962:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5964:	9a05      	ldr	r2, [sp, #20]
   d5966:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5968:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d596a:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d596c:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d596e:	f7ff fce0 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5972:	a806      	add	r0, sp, #24
   d5974:	f7ff ff96 	bl	d58a4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5978:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d597a:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d597c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d597e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5980:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5982:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5984:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5986:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5988:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d598c:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d598e:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5990:	f7ff fccf 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5994:	a805      	add	r0, sp, #20
   d5996:	f7ff fccc 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d599a:	6829      	ldr	r1, [r5, #0]
   d599c:	b919      	cbnz	r1, d59a6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d599e:	4a03      	ldr	r2, [pc, #12]	; (d59ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d59a0:	200a      	movs	r0, #10
   d59a2:	f7fe fee3 	bl	d476c <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d59a6:	b008      	add	sp, #32
   d59a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d59ac:	000d44f9 	.word	0x000d44f9

000d59b0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d59b0:	b510      	push	{r4, lr}
   d59b2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d59b4:	6840      	ldr	r0, [r0, #4]
   d59b6:	b108      	cbz	r0, d59bc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d59b8:	f7fe fb6f 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d59bc:	4620      	mov	r0, r4
   d59be:	bd10      	pop	{r4, pc}

000d59c0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d59c0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d59c2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d59c4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d59c6:	e88d 0009 	stmia.w	sp, {r0, r3}
   d59ca:	4668      	mov	r0, sp
   d59cc:	f7ff fff0 	bl	d59b0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d59d0:	b003      	add	sp, #12
   d59d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d59d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d59d8:	b538      	push	{r3, r4, r5, lr}
   d59da:	2300      	movs	r3, #0
   d59dc:	4604      	mov	r4, r0
   d59de:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d59e0:	2014      	movs	r0, #20
   d59e2:	460d      	mov	r5, r1
   d59e4:	f7fe fb57 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d59e8:	b128      	cbz	r0, d59f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d59ea:	2301      	movs	r3, #1
   d59ec:	6043      	str	r3, [r0, #4]
   d59ee:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d59f0:	4b02      	ldr	r3, [pc, #8]	; (d59fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d59f2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d59f4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d59f6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d59f8:	4620      	mov	r0, r4
   d59fa:	bd38      	pop	{r3, r4, r5, pc}
   d59fc:	000d69d0 	.word	0x000d69d0

000d5a00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5a02:	2600      	movs	r6, #0
   d5a04:	b087      	sub	sp, #28
   d5a06:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a08:	6046      	str	r6, [r0, #4]
   d5a0a:	4604      	mov	r4, r0
   d5a0c:	2018      	movs	r0, #24
   d5a0e:	460f      	mov	r7, r1
   d5a10:	f7fe fb41 	bl	d4096 <_Znwj>
   d5a14:	f8cd d010 	str.w	sp, [sp, #16]
   d5a18:	4605      	mov	r5, r0
   d5a1a:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5a1c:	b138      	cbz	r0, d5a2e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5a1e:	f7ff f937 	bl	d4c90 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5a22:	4639      	mov	r1, r7
   d5a24:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5a26:	82ae      	strh	r6, [r5, #20]
   d5a28:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5a2a:	f7ff f9af 	bl	d4d8c <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5a2e:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a30:	4629      	mov	r1, r5
   d5a32:	9305      	str	r3, [sp, #20]
   d5a34:	aa02      	add	r2, sp, #8
   d5a36:	ab01      	add	r3, sp, #4
   d5a38:	a803      	add	r0, sp, #12
   d5a3a:	f7ff ffcd 	bl	d59d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a3e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5a40:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5a42:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5a44:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a46:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a48:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5a4a:	f7ff fc72 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5a4e:	a804      	add	r0, sp, #16
   d5a50:	f7ff ffae 	bl	d59b0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d5a54:	6823      	ldr	r3, [r4, #0]
   d5a56:	b90b      	cbnz	r3, d5a5c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d5a58:	f7ff f8c2 	bl	d4be0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	b007      	add	sp, #28
   d5a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5a64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a68:	4617      	mov	r7, r2
   d5a6a:	b0a1      	sub	sp, #132	; 0x84
   d5a6c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5a6e:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5a70:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5a72:	f7ff f8e5 	bl	d4c40 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5a76:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5a78:	7923      	ldrb	r3, [r4, #4]
   d5a7a:	2b00      	cmp	r3, #0
   d5a7c:	f000 80de 	beq.w	d5c3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a80:	6833      	ldr	r3, [r6, #0]
   d5a82:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5a84:	691b      	ldr	r3, [r3, #16]
   d5a86:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5a8a:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a8c:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5a90:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5a94:	9b03      	ldr	r3, [sp, #12]
   d5a96:	42ab      	cmp	r3, r5
   d5a98:	d023      	beq.n	d5ae2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5a9a:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5a9e:	4650      	mov	r0, sl
   d5aa0:	f109 0114 	add.w	r1, r9, #20
   d5aa4:	f7ff f98c 	bl	d4dc0 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5aa8:	2800      	cmp	r0, #0
   d5aaa:	f000 80cc 	beq.w	d5c46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5aae:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5ab2:	4658      	mov	r0, fp
   d5ab4:	f7ff f984 	bl	d4dc0 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5ab8:	2800      	cmp	r0, #0
   d5aba:	f000 80c4 	beq.w	d5c46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5abe:	6823      	ldr	r3, [r4, #0]
   d5ac0:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5ac4:	f8d9 3000 	ldr.w	r3, [r9]
   d5ac8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5acc:	4299      	cmp	r1, r3
   d5ace:	f040 80ba 	bne.w	d5c46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5ad2:	2320      	movs	r3, #32
   d5ad4:	4a60      	ldr	r2, [pc, #384]	; (d5c58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5ad6:	9315      	str	r3, [sp, #84]	; 0x54
   d5ad8:	2300      	movs	r3, #0
   d5ada:	9200      	str	r2, [sp, #0]
   d5adc:	9316      	str	r3, [sp, #88]	; 0x58
   d5ade:	aa15      	add	r2, sp, #84	; 0x54
   d5ae0:	e0a8      	b.n	d5c34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5ae2:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5ae6:	4648      	mov	r0, r9
   d5ae8:	f7ff f91c 	bl	d4d24 <_ZNK8particle7BleUuid7isValidEv>
   d5aec:	b918      	cbnz	r0, d5af6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5aee:	495b      	ldr	r1, [pc, #364]	; (d5c5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5af0:	4648      	mov	r0, r9
   d5af2:	f7ff f958 	bl	d4da6 <_ZN8particle7BleUuidaSEPKh>
   d5af6:	6833      	ldr	r3, [r6, #0]
   d5af8:	681d      	ldr	r5, [r3, #0]
   d5afa:	685b      	ldr	r3, [r3, #4]
   d5afc:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5b00:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5b02:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5b04:	d005      	beq.n	d5b12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5b06:	6828      	ldr	r0, [r5, #0]
   d5b08:	f7ff f95a 	bl	d4dc0 <_ZNK8particle7BleUuideqERKS0_>
   d5b0c:	bb58      	cbnz	r0, d5b66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5b0e:	3508      	adds	r5, #8
   d5b10:	e7f6      	b.n	d5b00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5b12:	a80b      	add	r0, sp, #44	; 0x2c
   d5b14:	f7ff ff74 	bl	d5a00 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5b18:	4649      	mov	r1, r9
   d5b1a:	a815      	add	r0, sp, #84	; 0x54
   d5b1c:	f7ff f914 	bl	d4d48 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5b22:	2300      	movs	r3, #0
   d5b24:	3214      	adds	r2, #20
   d5b26:	a915      	add	r1, sp, #84	; 0x54
   d5b28:	2001      	movs	r0, #1
   d5b2a:	f7fe fd1f 	bl	d456c <hal_ble_gatt_server_add_service>
   d5b2e:	2800      	cmp	r0, #0
   d5b30:	d178      	bne.n	d5c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5b32:	6835      	ldr	r5, [r6, #0]
   d5b34:	a90b      	add	r1, sp, #44	; 0x2c
   d5b36:	a80d      	add	r0, sp, #52	; 0x34
   d5b38:	f7ff fbf1 	bl	d531e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5b3c:	4628      	mov	r0, r5
   d5b3e:	a90d      	add	r1, sp, #52	; 0x34
   d5b40:	f7ff fe19 	bl	d5776 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5b44:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b46:	a80e      	add	r0, sp, #56	; 0x38
   d5b48:	f7ff fbf3 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b4c:	2d00      	cmp	r5, #0
   d5b4e:	d069      	beq.n	d5c24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d5b50:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5b52:	6855      	ldr	r5, [r2, #4]
   d5b54:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d5b58:	6815      	ldr	r5, [r2, #0]
   d5b5a:	3b01      	subs	r3, #1
   d5b5c:	a80c      	add	r0, sp, #48	; 0x30
   d5b5e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d5b62:	f7ff fbe6 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5b66:	f104 0914 	add.w	r9, r4, #20
   d5b6a:	4648      	mov	r0, r9
   d5b6c:	f7ff f8da 	bl	d4d24 <_ZNK8particle7BleUuid7isValidEv>
   d5b70:	b968      	cbnz	r0, d5b8e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5b72:	4b3b      	ldr	r3, [pc, #236]	; (d5c60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5b74:	4939      	ldr	r1, [pc, #228]	; (d5c5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5b76:	881a      	ldrh	r2, [r3, #0]
   d5b78:	3201      	adds	r2, #1
   d5b7a:	b292      	uxth	r2, r2
   d5b7c:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5b7e:	a815      	add	r0, sp, #84	; 0x54
   d5b80:	2301      	movs	r3, #1
   d5b82:	f7ff f8c3 	bl	d4d0c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5b86:	a915      	add	r1, sp, #84	; 0x54
   d5b88:	4648      	mov	r0, r9
   d5b8a:	f7ff f8ff 	bl	d4d8c <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5b8e:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5b92:	4652      	mov	r2, sl
   d5b94:	2100      	movs	r1, #0
   d5b96:	a815      	add	r0, sp, #84	; 0x54
   d5b98:	f000 fe43 	bl	d6822 <memset>
    charInit.version = BLE_API_VERSION;
   d5b9c:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5b9e:	4649      	mov	r1, r9
   d5ba0:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5ba2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d5ba6:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d5baa:	f7ff f8cd 	bl	d4d48 <_ZN8particle7BleUuid7halUUIDEv>
   d5bae:	ab04      	add	r3, sp, #16
   d5bb0:	aa18      	add	r2, sp, #96	; 0x60
   d5bb2:	f10d 0c20 	add.w	ip, sp, #32
   d5bb6:	6818      	ldr	r0, [r3, #0]
   d5bb8:	6859      	ldr	r1, [r3, #4]
   d5bba:	4696      	mov	lr, r2
   d5bbc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5bc0:	3308      	adds	r3, #8
   d5bc2:	4563      	cmp	r3, ip
   d5bc4:	4672      	mov	r2, lr
   d5bc6:	d1f6      	bne.n	d5bb6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d5bc8:	6818      	ldr	r0, [r3, #0]
   d5bca:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d5bce:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d5bd0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5bd4:	682b      	ldr	r3, [r5, #0]
   d5bd6:	8a9b      	ldrh	r3, [r3, #20]
   d5bd8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5bde:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5be0:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5be2:	4b20      	ldr	r3, [pc, #128]	; (d5c64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d5be4:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5be6:	1da1      	adds	r1, r4, #6
   d5be8:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5bea:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5bec:	f7fe fce6 	bl	d45bc <hal_ble_gatt_server_add_characteristic>
   d5bf0:	bb20      	cbnz	r0, d5c3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d5bf2:	2301      	movs	r3, #1
   d5bf4:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5bf6:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5bf8:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5bfa:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5bfc:	a80d      	add	r0, sp, #52	; 0x34
   d5bfe:	f7ff fb80 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c02:	4620      	mov	r0, r4
   d5c04:	a90d      	add	r1, sp, #52	; 0x34
   d5c06:	f7ff fe23 	bl	d5850 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5c0a:	4604      	mov	r4, r0
   d5c0c:	a80e      	add	r0, sp, #56	; 0x38
   d5c0e:	f7ff fb90 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c12:	b99c      	cbnz	r4, d5c3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d5c14:	2320      	movs	r3, #32
   d5c16:	930d      	str	r3, [sp, #52]	; 0x34
   d5c18:	4b13      	ldr	r3, [pc, #76]	; (d5c68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d5c1a:	9300      	str	r3, [sp, #0]
   d5c1c:	940e      	str	r4, [sp, #56]	; 0x38
   d5c1e:	4623      	mov	r3, r4
   d5c20:	aa0d      	add	r2, sp, #52	; 0x34
   d5c22:	e007      	b.n	d5c34 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5c24:	4639      	mov	r1, r7
   d5c26:	4640      	mov	r0, r8
   d5c28:	f7ff fb6b 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c2c:	a80c      	add	r0, sp, #48	; 0x30
   d5c2e:	f7ff fb80 	bl	d5332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c32:	e00a      	b.n	d5c4a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5c34:	490d      	ldr	r1, [pc, #52]	; (d5c6c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d5c36:	2032      	movs	r0, #50	; 0x32
   d5c38:	f7fe fda0 	bl	d477c <log_message>
            return characteristic;
   d5c3c:	4639      	mov	r1, r7
   d5c3e:	4640      	mov	r0, r8
   d5c40:	f7ff fb5f 	bl	d5302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c44:	e001      	b.n	d5c4a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d5c46:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5c48:	e724      	b.n	d5a94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5c4a:	a80a      	add	r0, sp, #40	; 0x28
   d5c4c:	f7ff f806 	bl	d4c5c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5c50:	4640      	mov	r0, r8
   d5c52:	b021      	add	sp, #132	; 0x84
   d5c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c58:	000d6b85 	.word	0x000d6b85
   d5c5c:	000d6a00 	.word	0x000d6a00
   d5c60:	2003e404 	.word	0x2003e404
   d5c64:	000d51f1 	.word	0x000d51f1
   d5c68:	000d6b5e 	.word	0x000d6b5e
   d5c6c:	000d6a10 	.word	0x000d6a10

000d5c70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c70:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c72:	4c06      	ldr	r4, [pc, #24]	; (d5c8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c74:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5c76:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c78:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5c7a:	f7fe fcdf 	bl	d463c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c7e:	4620      	mov	r0, r4
   d5c80:	4a03      	ldr	r2, [pc, #12]	; (d5c90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c82:	4904      	ldr	r1, [pc, #16]	; (d5c94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5c88:	f000 bc20 	b.w	d64cc <__aeabi_atexit>
   d5c8c:	2003e408 	.word	0x2003e408
   d5c90:	2003e348 	.word	0x2003e348
   d5c94:	000d4bcf 	.word	0x000d4bcf

000d5c98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c9a:	4606      	mov	r6, r0
   d5c9c:	460d      	mov	r5, r1
   d5c9e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5ca0:	2400      	movs	r4, #0
  while (size--) {
   d5ca2:	42bd      	cmp	r5, r7
   d5ca4:	d00c      	beq.n	d5cc0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5ca6:	6833      	ldr	r3, [r6, #0]
   d5ca8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5cac:	689b      	ldr	r3, [r3, #8]
   d5cae:	4630      	mov	r0, r6
   d5cb0:	4798      	blx	r3
     if (chunk>=0)
   d5cb2:	2800      	cmp	r0, #0
   d5cb4:	db01      	blt.n	d5cba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5cb6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5cb8:	e7f3      	b.n	d5ca2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5cba:	2c00      	cmp	r4, #0
   d5cbc:	bf08      	it	eq
   d5cbe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cc4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5cc4:	b570      	push	{r4, r5, r6, lr}
   d5cc6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5cc8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5cca:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5ccc:	b149      	cbz	r1, d5ce2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5cce:	f000 fde1 	bl	d6894 <strlen>
   d5cd2:	682b      	ldr	r3, [r5, #0]
   d5cd4:	4602      	mov	r2, r0
   d5cd6:	4621      	mov	r1, r4
   d5cd8:	4628      	mov	r0, r5
   d5cda:	68db      	ldr	r3, [r3, #12]
    }
   d5cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ce0:	4718      	bx	r3
    }
   d5ce2:	bd70      	pop	{r4, r5, r6, pc}

000d5ce4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5ce4:	6803      	ldr	r3, [r0, #0]
   d5ce6:	689b      	ldr	r3, [r3, #8]
   d5ce8:	4718      	bx	r3

000d5cea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cea:	b530      	push	{r4, r5, lr}
   d5cec:	b08b      	sub	sp, #44	; 0x2c
   d5cee:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cf0:	2100      	movs	r1, #0
   d5cf2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cf6:	2a01      	cmp	r2, #1
   d5cf8:	bf98      	it	ls
   d5cfa:	220a      	movls	r2, #10
   d5cfc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5d00:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5d04:	fb05 3312 	mls	r3, r5, r2, r3
   d5d08:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d0c:	2b09      	cmp	r3, #9
   d5d0e:	bf94      	ite	ls
   d5d10:	3330      	addls	r3, #48	; 0x30
   d5d12:	3337      	addhi	r3, #55	; 0x37
   d5d14:	b2db      	uxtb	r3, r3
   d5d16:	4621      	mov	r1, r4
   d5d18:	f804 3901 	strb.w	r3, [r4], #-1
   d5d1c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5d1e:	2d00      	cmp	r5, #0
   d5d20:	d1ee      	bne.n	d5d00 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5d22:	f7ff ffcf 	bl	d5cc4 <_ZN5Print5writeEPKc>
}
   d5d26:	b00b      	add	sp, #44	; 0x2c
   d5d28:	bd30      	pop	{r4, r5, pc}
	...

000d5d2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d2c:	4b01      	ldr	r3, [pc, #4]	; (d5d34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d2e:	4a02      	ldr	r2, [pc, #8]	; (d5d38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d30:	601a      	str	r2, [r3, #0]
   d5d32:	4770      	bx	lr
   d5d34:	2003e40c 	.word	0x2003e40c
   d5d38:	000d6c33 	.word	0x000d6c33

000d5d3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d3c:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d3e:	681a      	ldr	r2, [r3, #0]
   d5d40:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d42:	601a      	str	r2, [r3, #0]
   d5d44:	4770      	bx	lr
   d5d46:	bf00      	nop
   d5d48:	2003e2e0 	.word	0x2003e2e0
   d5d4c:	2003e410 	.word	0x2003e410

000d5d50 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d50:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d52:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d54:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d56:	b113      	cbz	r3, d5d5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d58:	2203      	movs	r2, #3
   d5d5a:	4601      	mov	r1, r0
   d5d5c:	4798      	blx	r3
    }
   d5d5e:	4620      	mov	r0, r4
   d5d60:	bd10      	pop	{r4, pc}

000d5d62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d62:	b510      	push	{r4, lr}
   d5d64:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d66:	f7ff fff3 	bl	d5d50 <_ZNSt14_Function_baseD1Ev>
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	bd10      	pop	{r4, pc}
	...

000d5d70 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5d70:	4803      	ldr	r0, [pc, #12]	; (d5d80 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d72:	4a04      	ldr	r2, [pc, #16]	; (d5d84 <_GLOBAL__sub_I_RGB+0x14>)
   d5d74:	4904      	ldr	r1, [pc, #16]	; (d5d88 <_GLOBAL__sub_I_RGB+0x18>)
   d5d76:	2300      	movs	r3, #0
   d5d78:	6083      	str	r3, [r0, #8]
   d5d7a:	f000 bba7 	b.w	d64cc <__aeabi_atexit>
   d5d7e:	bf00      	nop
   d5d80:	2003e414 	.word	0x2003e414
   d5d84:	2003e348 	.word	0x2003e348
   d5d88:	000d5d63 	.word	0x000d5d63

000d5d8c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5d8c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d8e:	4b0c      	ldr	r3, [pc, #48]	; (d5dc0 <serialEventRun+0x34>)
   d5d90:	b133      	cbz	r3, d5da0 <serialEventRun+0x14>
   d5d92:	f000 f957 	bl	d6044 <_Z16_fetch_usbserialv>
   d5d96:	6803      	ldr	r3, [r0, #0]
   d5d98:	691b      	ldr	r3, [r3, #16]
   d5d9a:	4798      	blx	r3
   d5d9c:	2800      	cmp	r0, #0
   d5d9e:	dc09      	bgt.n	d5db4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5da0:	4b08      	ldr	r3, [pc, #32]	; (d5dc4 <serialEventRun+0x38>)
   d5da2:	b163      	cbz	r3, d5dbe <serialEventRun+0x32>
   d5da4:	f000 f9cc 	bl	d6140 <_Z22__fetch_global_Serial1v>
   d5da8:	6803      	ldr	r3, [r0, #0]
   d5daa:	691b      	ldr	r3, [r3, #16]
   d5dac:	4798      	blx	r3
   d5dae:	2800      	cmp	r0, #0
   d5db0:	dc03      	bgt.n	d5dba <serialEventRun+0x2e>
   d5db2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5db4:	f3af 8000 	nop.w
   d5db8:	e7f2      	b.n	d5da0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5dba:	f3af 8000 	nop.w
   d5dbe:	bd08      	pop	{r3, pc}
	...

000d5dc8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5dc8:	b508      	push	{r3, lr}
	serialEventRun();
   d5dca:	f7ff ffdf 	bl	d5d8c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5dce:	f7fe fb9b 	bl	d4508 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5dd2:	4b01      	ldr	r3, [pc, #4]	; (d5dd8 <_post_loop+0x10>)
   d5dd4:	6018      	str	r0, [r3, #0]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	2003e748 	.word	0x2003e748

000d5ddc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5ddc:	4802      	ldr	r0, [pc, #8]	; (d5de8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5dde:	4a03      	ldr	r2, [pc, #12]	; (d5dec <_Z33system_initialize_user_backup_ramv+0x10>)
   d5de0:	4903      	ldr	r1, [pc, #12]	; (d5df0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5de2:	1a12      	subs	r2, r2, r0
   d5de4:	f000 bcf7 	b.w	d67d6 <memcpy>
   d5de8:	2003f400 	.word	0x2003f400
   d5dec:	2003f404 	.word	0x2003f404
   d5df0:	000d6e80 	.word	0x000d6e80

000d5df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5df4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5df6:	2300      	movs	r3, #0
   d5df8:	9300      	str	r3, [sp, #0]
   d5dfa:	461a      	mov	r2, r3
   d5dfc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e00:	f7fe fcd6 	bl	d47b0 <system_ctrl_set_result>
}
   d5e04:	b003      	add	sp, #12
   d5e06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e0c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e0e:	8843      	ldrh	r3, [r0, #2]
   d5e10:	2b0a      	cmp	r3, #10
   d5e12:	d008      	beq.n	d5e26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e14:	2b50      	cmp	r3, #80	; 0x50
   d5e16:	d109      	bne.n	d5e2c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e18:	4b09      	ldr	r3, [pc, #36]	; (d5e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e1a:	681b      	ldr	r3, [r3, #0]
   d5e1c:	b13b      	cbz	r3, d5e2e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5e1e:	b003      	add	sp, #12
   d5e20:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5e24:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5e26:	f7ff ffe5 	bl	d5df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5e2a:	e006      	b.n	d5e3a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	9300      	str	r3, [sp, #0]
   d5e30:	461a      	mov	r2, r3
   d5e32:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e36:	f7fe fcbb 	bl	d47b0 <system_ctrl_set_result>
        break;
    }
}
   d5e3a:	b003      	add	sp, #12
   d5e3c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e40:	2003e424 	.word	0x2003e424

000d5e44 <module_user_init_hook>:

void module_user_init_hook()
{
   d5e44:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5e46:	4c10      	ldr	r4, [pc, #64]	; (d5e88 <module_user_init_hook+0x44>)
   d5e48:	4d10      	ldr	r5, [pc, #64]	; (d5e8c <module_user_init_hook+0x48>)
   d5e4a:	6823      	ldr	r3, [r4, #0]
   d5e4c:	42ab      	cmp	r3, r5
   d5e4e:	4b10      	ldr	r3, [pc, #64]	; (d5e90 <module_user_init_hook+0x4c>)
   d5e50:	bf0c      	ite	eq
   d5e52:	2201      	moveq	r2, #1
   d5e54:	2200      	movne	r2, #0
   d5e56:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e58:	d002      	beq.n	d5e60 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5e5a:	f7ff ffbf 	bl	d5ddc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e5e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e60:	f7fe fb42 	bl	d44e8 <HAL_RNG_GetRandomNumber>
   d5e64:	4604      	mov	r4, r0
    srand(seed);
   d5e66:	f000 fce5 	bl	d6834 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e6a:	4b0a      	ldr	r3, [pc, #40]	; (d5e94 <module_user_init_hook+0x50>)
   d5e6c:	b113      	cbz	r3, d5e74 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5e6e:	4620      	mov	r0, r4
   d5e70:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e74:	2100      	movs	r1, #0
   d5e76:	4807      	ldr	r0, [pc, #28]	; (d5e94 <module_user_init_hook+0x50>)
   d5e78:	f7fe fcfe 	bl	d4878 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e7c:	2100      	movs	r1, #0
   d5e7e:	4806      	ldr	r0, [pc, #24]	; (d5e98 <module_user_init_hook+0x54>)
}
   d5e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e84:	f7fe bc8a 	b.w	d479c <system_ctrl_set_app_request_handler>
   d5e88:	2003f400 	.word	0x2003f400
   d5e8c:	9a271c1e 	.word	0x9a271c1e
   d5e90:	2003e428 	.word	0x2003e428
   d5e94:	00000000 	.word	0x00000000
   d5e98:	000d5e0d 	.word	0x000d5e0d

000d5e9c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e9c:	4770      	bx	lr

000d5e9e <_ZN9IPAddressD0Ev>:
   d5e9e:	b510      	push	{r4, lr}
   d5ea0:	2118      	movs	r1, #24
   d5ea2:	4604      	mov	r4, r0
   d5ea4:	f000 fb20 	bl	d64e8 <_ZdlPvj>
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	bd10      	pop	{r4, pc}

000d5eac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5eac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5eae:	7d03      	ldrb	r3, [r0, #20]
   d5eb0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5eb2:	b08d      	sub	sp, #52	; 0x34
   d5eb4:	460e      	mov	r6, r1
   d5eb6:	f100 0704 	add.w	r7, r0, #4
   d5eba:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5ebe:	d002      	beq.n	d5ec6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5ec0:	f100 0508 	add.w	r5, r0, #8
   d5ec4:	e018      	b.n	d5ef8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ec6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ec8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5eca:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ece:	232f      	movs	r3, #47	; 0x2f
   d5ed0:	462a      	mov	r2, r5
   d5ed2:	200a      	movs	r0, #10
   d5ed4:	f7fe fbd2 	bl	d467c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5ed8:	4628      	mov	r0, r5
   d5eda:	f000 fcdb 	bl	d6894 <strlen>
   d5ede:	6833      	ldr	r3, [r6, #0]
   d5ee0:	4602      	mov	r2, r0
   d5ee2:	68db      	ldr	r3, [r3, #12]
   d5ee4:	4629      	mov	r1, r5
   d5ee6:	4630      	mov	r0, r6
   d5ee8:	4798      	blx	r3
   d5eea:	e00f      	b.n	d5f0c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5eec:	b124      	cbz	r4, d5ef8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5eee:	212e      	movs	r1, #46	; 0x2e
   d5ef0:	4630      	mov	r0, r6
   d5ef2:	f7ff fef7 	bl	d5ce4 <_ZN5Print5printEc>
   d5ef6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5ef8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5efc:	220a      	movs	r2, #10
   d5efe:	4630      	mov	r0, r6
   d5f00:	f7ff fef3 	bl	d5cea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f04:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f06:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f08:	d1f0      	bne.n	d5eec <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f0a:	4620      	mov	r0, r4
    }
    return n;
}
   d5f0c:	b00d      	add	sp, #52	; 0x34
   d5f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f10 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5f10:	b510      	push	{r4, lr}
   d5f12:	4b05      	ldr	r3, [pc, #20]	; (d5f28 <_ZN9IPAddressC1Ev+0x18>)
   d5f14:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5f16:	2211      	movs	r2, #17
   d5f18:	f840 3b04 	str.w	r3, [r0], #4
   d5f1c:	2100      	movs	r1, #0
   d5f1e:	f000 fc80 	bl	d6822 <memset>
{
    clear();
}
   d5f22:	4620      	mov	r0, r4
   d5f24:	bd10      	pop	{r4, pc}
   d5f26:	bf00      	nop
   d5f28:	000d6cd4 	.word	0x000d6cd4

000d5f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5f2c:	4603      	mov	r3, r0
   d5f2e:	4a07      	ldr	r2, [pc, #28]	; (d5f4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5f30:	b510      	push	{r4, lr}
   d5f32:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5f36:	f101 0210 	add.w	r2, r1, #16
   d5f3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5f3e:	f843 4b04 	str.w	r4, [r3], #4
   d5f42:	4291      	cmp	r1, r2
   d5f44:	d1f9      	bne.n	d5f3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5f46:	780a      	ldrb	r2, [r1, #0]
   d5f48:	701a      	strb	r2, [r3, #0]
}
   d5f4a:	bd10      	pop	{r4, pc}
   d5f4c:	000d6cd4 	.word	0x000d6cd4

000d5f50 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5f50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5f62:	2304      	movs	r3, #4
   d5f64:	6041      	str	r1, [r0, #4]
   d5f66:	7503      	strb	r3, [r0, #20]
   d5f68:	bd10      	pop	{r4, pc}

000d5f6a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5f6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5f6c:	780d      	ldrb	r5, [r1, #0]
   d5f6e:	788b      	ldrb	r3, [r1, #2]
   d5f70:	784a      	ldrb	r2, [r1, #1]
   d5f72:	78c9      	ldrb	r1, [r1, #3]
   d5f74:	9100      	str	r1, [sp, #0]
   d5f76:	4629      	mov	r1, r5
   d5f78:	f7ff ffea 	bl	d5f50 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5f7c:	b003      	add	sp, #12
   d5f7e:	bd30      	pop	{r4, r5, pc}

000d5f80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f80:	7441      	strb	r1, [r0, #17]
   d5f82:	4770      	bx	lr

000d5f84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f84:	4770      	bx	lr

000d5f86 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5f86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f88:	2100      	movs	r1, #0
   d5f8a:	7c00      	ldrb	r0, [r0, #16]
   d5f8c:	f7fe fbd6 	bl	d473c <HAL_USB_USART_Receive_Data>
}
   d5f90:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5f94:	bf28      	it	cs
   d5f96:	f04f 30ff 	movcs.w	r0, #4294967295
   d5f9a:	bd08      	pop	{r3, pc}

000d5f9c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5f9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f9e:	2101      	movs	r1, #1
   d5fa0:	7c00      	ldrb	r0, [r0, #16]
   d5fa2:	f7fe fbcb 	bl	d473c <HAL_USB_USART_Receive_Data>
}
   d5fa6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5faa:	bf28      	it	cs
   d5fac:	f04f 30ff 	movcs.w	r0, #4294967295
   d5fb0:	bd08      	pop	{r3, pc}

000d5fb2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5fb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5fb4:	7c00      	ldrb	r0, [r0, #16]
   d5fb6:	f7fe fbb9 	bl	d472c <HAL_USB_USART_Available_Data_For_Write>
}
   d5fba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fbe:	bd08      	pop	{r3, pc}

000d5fc0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5fc0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5fc2:	7c00      	ldrb	r0, [r0, #16]
   d5fc4:	f7fe fbaa 	bl	d471c <HAL_USB_USART_Available_Data>
}
   d5fc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fcc:	bd08      	pop	{r3, pc}

000d5fce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5fce:	7c00      	ldrb	r0, [r0, #16]
   d5fd0:	f7fe bbc4 	b.w	d475c <HAL_USB_USART_Flush_Data>

000d5fd4 <_ZN9USBSerialD0Ev>:
   d5fd4:	b510      	push	{r4, lr}
   d5fd6:	2114      	movs	r1, #20
   d5fd8:	4604      	mov	r4, r0
   d5fda:	f000 fa85 	bl	d64e8 <_ZdlPvj>
   d5fde:	4620      	mov	r0, r4
   d5fe0:	bd10      	pop	{r4, pc}

000d5fe2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5fe2:	b538      	push	{r3, r4, r5, lr}
   d5fe4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fe6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5fe8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fea:	f7fe fb9f 	bl	d472c <HAL_USB_USART_Available_Data_For_Write>
   d5fee:	2800      	cmp	r0, #0
   d5ff0:	dc01      	bgt.n	d5ff6 <_ZN9USBSerial5writeEh+0x14>
   d5ff2:	7c60      	ldrb	r0, [r4, #17]
   d5ff4:	b128      	cbz	r0, d6002 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5ff6:	4629      	mov	r1, r5
   d5ff8:	7c20      	ldrb	r0, [r4, #16]
   d5ffa:	f7fe fba7 	bl	d474c <HAL_USB_USART_Send_Data>
   d5ffe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6002:	bd38      	pop	{r3, r4, r5, pc}

000d6004 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6004:	b510      	push	{r4, lr}
   d6006:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6008:	2300      	movs	r3, #0
   d600a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d600c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6010:	60a3      	str	r3, [r4, #8]
   d6012:	4b05      	ldr	r3, [pc, #20]	; (d6028 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6014:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6016:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6018:	4608      	mov	r0, r1
{
  _serial = serial;
   d601a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d601c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d601e:	4611      	mov	r1, r2
   d6020:	f7fe fb6c 	bl	d46fc <HAL_USB_USART_Init>
}
   d6024:	4620      	mov	r0, r4
   d6026:	bd10      	pop	{r4, pc}
   d6028:	000d6ce8 	.word	0x000d6ce8

000d602c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d602c:	2200      	movs	r2, #0
   d602e:	7c00      	ldrb	r0, [r0, #16]
   d6030:	f7fe bb6c 	b.w	d470c <HAL_USB_USART_Begin>

000d6034 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6034:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6036:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6038:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d603a:	2100      	movs	r1, #0
   d603c:	f000 fbf1 	bl	d6822 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6040:	4620      	mov	r0, r4
   d6042:	bd10      	pop	{r4, pc}

000d6044 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6044:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6046:	4d0e      	ldr	r5, [pc, #56]	; (d6080 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6048:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d604a:	a801      	add	r0, sp, #4
   d604c:	f7ff fff2 	bl	d6034 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6050:	6829      	ldr	r1, [r5, #0]
   d6052:	f011 0401 	ands.w	r4, r1, #1
   d6056:	d110      	bne.n	d607a <_Z16_fetch_usbserialv+0x36>
   d6058:	4628      	mov	r0, r5
   d605a:	f7fe f822 	bl	d40a2 <__cxa_guard_acquire>
   d605e:	b160      	cbz	r0, d607a <_Z16_fetch_usbserialv+0x36>
   d6060:	aa01      	add	r2, sp, #4
   d6062:	4621      	mov	r1, r4
   d6064:	4807      	ldr	r0, [pc, #28]	; (d6084 <_Z16_fetch_usbserialv+0x40>)
   d6066:	f7ff ffcd 	bl	d6004 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d606a:	4628      	mov	r0, r5
   d606c:	f7fe f81e 	bl	d40ac <__cxa_guard_release>
   d6070:	4a05      	ldr	r2, [pc, #20]	; (d6088 <_Z16_fetch_usbserialv+0x44>)
   d6072:	4906      	ldr	r1, [pc, #24]	; (d608c <_Z16_fetch_usbserialv+0x48>)
   d6074:	4803      	ldr	r0, [pc, #12]	; (d6084 <_Z16_fetch_usbserialv+0x40>)
   d6076:	f000 fa29 	bl	d64cc <__aeabi_atexit>
	return _usbserial;
}
   d607a:	4802      	ldr	r0, [pc, #8]	; (d6084 <_Z16_fetch_usbserialv+0x40>)
   d607c:	b007      	add	sp, #28
   d607e:	bd30      	pop	{r4, r5, pc}
   d6080:	2003e42c 	.word	0x2003e42c
   d6084:	2003e430 	.word	0x2003e430
   d6088:	2003e348 	.word	0x2003e348
   d608c:	000d5f85 	.word	0x000d5f85

000d6090 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6090:	4770      	bx	lr

000d6092 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6092:	7441      	strb	r1, [r0, #17]
   d6094:	4770      	bx	lr

000d6096 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6096:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6098:	7c00      	ldrb	r0, [r0, #16]
   d609a:	f7fe fb27 	bl	d46ec <HAL_USART_Available_Data_For_Write>
}
   d609e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60a2:	bd08      	pop	{r3, pc}

000d60a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d60a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d60a6:	7c00      	ldrb	r0, [r0, #16]
   d60a8:	f7fe fb00 	bl	d46ac <HAL_USART_Available_Data>
}
   d60ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60b0:	bd08      	pop	{r3, pc}

000d60b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d60b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d60b4:	7c00      	ldrb	r0, [r0, #16]
   d60b6:	f7fe fb09 	bl	d46cc <HAL_USART_Peek_Data>
}
   d60ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60be:	bf28      	it	cs
   d60c0:	f04f 30ff 	movcs.w	r0, #4294967295
   d60c4:	bd08      	pop	{r3, pc}

000d60c6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d60c8:	7c00      	ldrb	r0, [r0, #16]
   d60ca:	f7fe faf7 	bl	d46bc <HAL_USART_Read_Data>
}
   d60ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60d2:	bf28      	it	cs
   d60d4:	f04f 30ff 	movcs.w	r0, #4294967295
   d60d8:	bd08      	pop	{r3, pc}

000d60da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d60da:	7c00      	ldrb	r0, [r0, #16]
   d60dc:	f7fe bafe 	b.w	d46dc <HAL_USART_Flush_Data>

000d60e0 <_ZN11USARTSerialD0Ev>:
   d60e0:	b510      	push	{r4, lr}
   d60e2:	2114      	movs	r1, #20
   d60e4:	4604      	mov	r4, r0
   d60e6:	f000 f9ff 	bl	d64e8 <_ZdlPvj>
   d60ea:	4620      	mov	r0, r4
   d60ec:	bd10      	pop	{r4, pc}

000d60ee <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d60ee:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d60f0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d60f2:	4604      	mov	r4, r0
   d60f4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d60f6:	b925      	cbnz	r5, d6102 <_ZN11USARTSerial5writeEh+0x14>
   d60f8:	7c00      	ldrb	r0, [r0, #16]
   d60fa:	f7fe faf7 	bl	d46ec <HAL_USART_Available_Data_For_Write>
   d60fe:	2800      	cmp	r0, #0
   d6100:	dd05      	ble.n	d610e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6102:	4631      	mov	r1, r6
   d6104:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d610a:	f7fe bac7 	b.w	d469c <HAL_USART_Write_Data>
  }
  return 0;
}
   d610e:	4628      	mov	r0, r5
   d6110:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6114 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6114:	b510      	push	{r4, lr}
   d6116:	4604      	mov	r4, r0
   d6118:	4608      	mov	r0, r1
   d611a:	4611      	mov	r1, r2
   d611c:	2200      	movs	r2, #0
   d611e:	6062      	str	r2, [r4, #4]
   d6120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6124:	60a2      	str	r2, [r4, #8]
   d6126:	4a05      	ldr	r2, [pc, #20]	; (d613c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6128:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d612a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d612c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d612e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6130:	461a      	mov	r2, r3
   d6132:	f7fe faab 	bl	d468c <HAL_USART_Init>
}
   d6136:	4620      	mov	r0, r4
   d6138:	bd10      	pop	{r4, pc}
   d613a:	bf00      	nop
   d613c:	000d6d18 	.word	0x000d6d18

000d6140 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6140:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6142:	4d0c      	ldr	r5, [pc, #48]	; (d6174 <_Z22__fetch_global_Serial1v+0x34>)
   d6144:	6829      	ldr	r1, [r5, #0]
   d6146:	f011 0401 	ands.w	r4, r1, #1
   d614a:	d111      	bne.n	d6170 <_Z22__fetch_global_Serial1v+0x30>
   d614c:	4628      	mov	r0, r5
   d614e:	f7fd ffa8 	bl	d40a2 <__cxa_guard_acquire>
   d6152:	b168      	cbz	r0, d6170 <_Z22__fetch_global_Serial1v+0x30>
   d6154:	4a08      	ldr	r2, [pc, #32]	; (d6178 <_Z22__fetch_global_Serial1v+0x38>)
   d6156:	4b09      	ldr	r3, [pc, #36]	; (d617c <_Z22__fetch_global_Serial1v+0x3c>)
   d6158:	4809      	ldr	r0, [pc, #36]	; (d6180 <_Z22__fetch_global_Serial1v+0x40>)
   d615a:	4621      	mov	r1, r4
   d615c:	f7ff ffda 	bl	d6114 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6160:	4628      	mov	r0, r5
   d6162:	f7fd ffa3 	bl	d40ac <__cxa_guard_release>
   d6166:	4a07      	ldr	r2, [pc, #28]	; (d6184 <_Z22__fetch_global_Serial1v+0x44>)
   d6168:	4907      	ldr	r1, [pc, #28]	; (d6188 <_Z22__fetch_global_Serial1v+0x48>)
   d616a:	4805      	ldr	r0, [pc, #20]	; (d6180 <_Z22__fetch_global_Serial1v+0x40>)
   d616c:	f000 f9ae 	bl	d64cc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6170:	4803      	ldr	r0, [pc, #12]	; (d6180 <_Z22__fetch_global_Serial1v+0x40>)
   d6172:	bd38      	pop	{r3, r4, r5, pc}
   d6174:	2003e4dc 	.word	0x2003e4dc
   d6178:	2003e4e0 	.word	0x2003e4e0
   d617c:	2003e458 	.word	0x2003e458
   d6180:	2003e444 	.word	0x2003e444
   d6184:	2003e348 	.word	0x2003e348
   d6188:	000d6091 	.word	0x000d6091

000d618c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d618c:	2200      	movs	r2, #0
   d618e:	4611      	mov	r1, r2
   d6190:	6840      	ldr	r0, [r0, #4]
   d6192:	f7fe bb59 	b.w	d4848 <network_listening>

000d6196 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6196:	2200      	movs	r2, #0
   d6198:	4611      	mov	r1, r2
   d619a:	6840      	ldr	r0, [r0, #4]
   d619c:	f7fe bb64 	b.w	d4868 <network_get_listen_timeout>

000d61a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d61a0:	2200      	movs	r2, #0
   d61a2:	6840      	ldr	r0, [r0, #4]
   d61a4:	f7fe bb58 	b.w	d4858 <network_set_listen_timeout>

000d61a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d61a8:	2200      	movs	r2, #0
   d61aa:	f081 0101 	eor.w	r1, r1, #1
   d61ae:	6840      	ldr	r0, [r0, #4]
   d61b0:	f7fe bb42 	b.w	d4838 <network_listen>

000d61b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d61b4:	2300      	movs	r3, #0
   d61b6:	461a      	mov	r2, r3
   d61b8:	2101      	movs	r1, #1
   d61ba:	6840      	ldr	r0, [r0, #4]
   d61bc:	f7fe bb34 	b.w	d4828 <network_off>

000d61c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d61c0:	2300      	movs	r3, #0
   d61c2:	461a      	mov	r2, r3
   d61c4:	4619      	mov	r1, r3
   d61c6:	6840      	ldr	r0, [r0, #4]
   d61c8:	f7fe bb26 	b.w	d4818 <network_on>

000d61cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d61cc:	2200      	movs	r2, #0
   d61ce:	4611      	mov	r1, r2
   d61d0:	6840      	ldr	r0, [r0, #4]
   d61d2:	f7fe bb19 	b.w	d4808 <network_ready>

000d61d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d61d6:	2200      	movs	r2, #0
   d61d8:	4611      	mov	r1, r2
   d61da:	6840      	ldr	r0, [r0, #4]
   d61dc:	f7fe bb04 	b.w	d47e8 <network_connecting>

000d61e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d61e0:	2200      	movs	r2, #0
   d61e2:	2102      	movs	r1, #2
   d61e4:	6840      	ldr	r0, [r0, #4]
   d61e6:	f7fe bb07 	b.w	d47f8 <network_disconnect>

000d61ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d61ea:	2300      	movs	r3, #0
   d61ec:	461a      	mov	r2, r3
   d61ee:	6840      	ldr	r0, [r0, #4]
   d61f0:	f7fe baf2 	b.w	d47d8 <network_connect>

000d61f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d61f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d61f6:	4605      	mov	r5, r0
   d61f8:	b188      	cbz	r0, d621e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61fa:	6804      	ldr	r4, [r0, #0]
   d61fc:	b14c      	cbz	r4, d6212 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d61fe:	68a3      	ldr	r3, [r4, #8]
   d6200:	b11b      	cbz	r3, d620a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6202:	2203      	movs	r2, #3
   d6204:	4621      	mov	r1, r4
   d6206:	4620      	mov	r0, r4
   d6208:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d620a:	2110      	movs	r1, #16
   d620c:	4620      	mov	r0, r4
   d620e:	f000 f96b 	bl	d64e8 <_ZdlPvj>
   d6212:	4628      	mov	r0, r5
   d6214:	2114      	movs	r1, #20
      }
   d6216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d621a:	f000 b965 	b.w	d64e8 <_ZdlPvj>
   d621e:	bd38      	pop	{r3, r4, r5, pc}

000d6220 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6220:	b110      	cbz	r0, d6228 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6222:	6803      	ldr	r3, [r0, #0]
   d6224:	685b      	ldr	r3, [r3, #4]
   d6226:	4718      	bx	r3
   d6228:	4770      	bx	lr

000d622a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d622a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d622c:	6803      	ldr	r3, [r0, #0]
   d622e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6230:	b1bb      	cbz	r3, d6262 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6232:	6858      	ldr	r0, [r3, #4]
   d6234:	f7fe f9ea 	bl	d460c <os_thread_is_current>
   d6238:	b978      	cbnz	r0, d625a <_ZN6ThreadD1Ev+0x30>
   d623a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d623c:	7c5a      	ldrb	r2, [r3, #17]
   d623e:	b912      	cbnz	r2, d6246 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6240:	6858      	ldr	r0, [r3, #4]
   d6242:	f7fe f9eb 	bl	d461c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6246:	6823      	ldr	r3, [r4, #0]
   d6248:	6858      	ldr	r0, [r3, #4]
   d624a:	f7fe f9ef 	bl	d462c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d624e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6250:	2300      	movs	r3, #0
   d6252:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6254:	b128      	cbz	r0, d6262 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6256:	f7ff ffcd 	bl	d61f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d625a:	6820      	ldr	r0, [r4, #0]
   d625c:	b108      	cbz	r0, d6262 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d625e:	f7ff ffc9 	bl	d61f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6262:	4620      	mov	r0, r4
   d6264:	bd10      	pop	{r4, pc}

000d6266 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6266:	b538      	push	{r3, r4, r5, lr}
   d6268:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d626a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d626e:	b108      	cbz	r0, d6274 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6270:	f7fd ff15 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6274:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6278:	b108      	cbz	r0, d627e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d627a:	f7fe f9e7 	bl	d464c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d627e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6282:	b135      	cbz	r5, d6292 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6284:	4628      	mov	r0, r5
   d6286:	f7ff ffd0 	bl	d622a <_ZN6ThreadD1Ev>
   d628a:	2104      	movs	r1, #4
   d628c:	4628      	mov	r0, r5
   d628e:	f000 f92b 	bl	d64e8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6292:	6820      	ldr	r0, [r4, #0]
   d6294:	b108      	cbz	r0, d629a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6296:	f7ff ffc3 	bl	d6220 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d629a:	4620      	mov	r0, r4
   d629c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d62a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62a0:	b510      	push	{r4, lr}
   d62a2:	4b04      	ldr	r3, [pc, #16]	; (d62b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d62a4:	4604      	mov	r4, r0
   d62a6:	f840 3b08 	str.w	r3, [r0], #8
   d62aa:	f7ff ffdc 	bl	d6266 <_ZN5spark11MeshPublishD1Ev>
   d62ae:	4620      	mov	r0, r4
   d62b0:	bd10      	pop	{r4, pc}
   d62b2:	bf00      	nop
   d62b4:	000d6d48 	.word	0x000d6d48

000d62b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d62b8:	b538      	push	{r3, r4, r5, lr}
   d62ba:	4c0e      	ldr	r4, [pc, #56]	; (d62f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d62bc:	4b0e      	ldr	r3, [pc, #56]	; (d62f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d62be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d62c0:	2500      	movs	r5, #0
   d62c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d62c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d62c8:	6063      	str	r3, [r4, #4]
   d62ca:	60a5      	str	r5, [r4, #8]
   d62cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d62d4:	f7fe f9b2 	bl	d463c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d62d8:	4b08      	ldr	r3, [pc, #32]	; (d62fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d62da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d62de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d62e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d62e4:	4620      	mov	r0, r4
   d62e6:	4a06      	ldr	r2, [pc, #24]	; (d6300 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d62e8:	4906      	ldr	r1, [pc, #24]	; (d6304 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d62ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d62ee:	f000 b8ed 	b.w	d64cc <__aeabi_atexit>
   d62f2:	bf00      	nop
   d62f4:	2003e564 	.word	0x2003e564
   d62f8:	000d6db0 	.word	0x000d6db0
   d62fc:	000d6d48 	.word	0x000d6d48
   d6300:	2003e348 	.word	0x2003e348
   d6304:	000d62a1 	.word	0x000d62a1

000d6308 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6308:	2200      	movs	r2, #0
   d630a:	4611      	mov	r1, r2
   d630c:	6840      	ldr	r0, [r0, #4]
   d630e:	f7fe ba7b 	b.w	d4808 <network_ready>

000d6312 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6312:	2200      	movs	r2, #0
   d6314:	4611      	mov	r1, r2
   d6316:	6840      	ldr	r0, [r0, #4]
   d6318:	f7fe ba96 	b.w	d4848 <network_listening>

000d631c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d631c:	2200      	movs	r2, #0
   d631e:	4611      	mov	r1, r2
   d6320:	6840      	ldr	r0, [r0, #4]
   d6322:	f7fe baa1 	b.w	d4868 <network_get_listen_timeout>

000d6326 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6326:	2200      	movs	r2, #0
   d6328:	6840      	ldr	r0, [r0, #4]
   d632a:	f7fe ba95 	b.w	d4858 <network_set_listen_timeout>

000d632e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d632e:	2200      	movs	r2, #0
   d6330:	f081 0101 	eor.w	r1, r1, #1
   d6334:	6840      	ldr	r0, [r0, #4]
   d6336:	f7fe ba7f 	b.w	d4838 <network_listen>

000d633a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d633a:	2300      	movs	r3, #0
   d633c:	461a      	mov	r2, r3
   d633e:	4619      	mov	r1, r3
   d6340:	6840      	ldr	r0, [r0, #4]
   d6342:	f7fe ba71 	b.w	d4828 <network_off>

000d6346 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6346:	2300      	movs	r3, #0
   d6348:	461a      	mov	r2, r3
   d634a:	4619      	mov	r1, r3
   d634c:	6840      	ldr	r0, [r0, #4]
   d634e:	f7fe ba63 	b.w	d4818 <network_on>

000d6352 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6352:	2200      	movs	r2, #0
   d6354:	4611      	mov	r1, r2
   d6356:	6840      	ldr	r0, [r0, #4]
   d6358:	f7fe ba46 	b.w	d47e8 <network_connecting>

000d635c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d635c:	2200      	movs	r2, #0
   d635e:	2102      	movs	r1, #2
   d6360:	6840      	ldr	r0, [r0, #4]
   d6362:	f7fe ba49 	b.w	d47f8 <network_disconnect>

000d6366 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6366:	2300      	movs	r3, #0
   d6368:	461a      	mov	r2, r3
   d636a:	6840      	ldr	r0, [r0, #4]
   d636c:	f7fe ba34 	b.w	d47d8 <network_connect>

000d6370 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6370:	4b02      	ldr	r3, [pc, #8]	; (d637c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6372:	2204      	movs	r2, #4
   d6374:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6376:	4a02      	ldr	r2, [pc, #8]	; (d6380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6378:	601a      	str	r2, [r3, #0]
   d637a:	4770      	bx	lr
   d637c:	2003e738 	.word	0x2003e738
   d6380:	000d6d7c 	.word	0x000d6d7c

000d6384 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6384:	2300      	movs	r3, #0
   d6386:	461a      	mov	r2, r3
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	f7fe ba25 	b.w	d47d8 <network_connect>

000d638e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d638e:	2200      	movs	r2, #0
   d6390:	2102      	movs	r1, #2
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	f7fe ba30 	b.w	d47f8 <network_disconnect>

000d6398 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6398:	2200      	movs	r2, #0
   d639a:	4611      	mov	r1, r2
   d639c:	6840      	ldr	r0, [r0, #4]
   d639e:	f7fe ba23 	b.w	d47e8 <network_connecting>

000d63a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63a2:	2200      	movs	r2, #0
   d63a4:	4611      	mov	r1, r2
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7fe ba2e 	b.w	d4808 <network_ready>

000d63ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d63ac:	2300      	movs	r3, #0
   d63ae:	461a      	mov	r2, r3
   d63b0:	4619      	mov	r1, r3
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	f7fe ba30 	b.w	d4818 <network_on>

000d63b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d63b8:	2300      	movs	r3, #0
   d63ba:	461a      	mov	r2, r3
   d63bc:	4619      	mov	r1, r3
   d63be:	6840      	ldr	r0, [r0, #4]
   d63c0:	f7fe ba32 	b.w	d4828 <network_off>

000d63c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d63c4:	2200      	movs	r2, #0
   d63c6:	f081 0101 	eor.w	r1, r1, #1
   d63ca:	6840      	ldr	r0, [r0, #4]
   d63cc:	f7fe ba34 	b.w	d4838 <network_listen>

000d63d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63d0:	2200      	movs	r2, #0
   d63d2:	6840      	ldr	r0, [r0, #4]
   d63d4:	f7fe ba40 	b.w	d4858 <network_set_listen_timeout>

000d63d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63d8:	2200      	movs	r2, #0
   d63da:	4611      	mov	r1, r2
   d63dc:	6840      	ldr	r0, [r0, #4]
   d63de:	f7fe ba43 	b.w	d4868 <network_get_listen_timeout>

000d63e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63e2:	2200      	movs	r2, #0
   d63e4:	4611      	mov	r1, r2
   d63e6:	6840      	ldr	r0, [r0, #4]
   d63e8:	f7fe ba2e 	b.w	d4848 <network_listening>

000d63ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63f2:	b095      	sub	sp, #84	; 0x54
   d63f4:	4616      	mov	r6, r2
   d63f6:	460d      	mov	r5, r1
   d63f8:	4607      	mov	r7, r0
    IPAddress addr;
   d63fa:	f7ff fd89 	bl	d5f10 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d63fe:	4621      	mov	r1, r4
   d6400:	2220      	movs	r2, #32
   d6402:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6404:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6406:	f000 fa0c 	bl	d6822 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d640a:	2340      	movs	r3, #64	; 0x40
   d640c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d640e:	4621      	mov	r1, r4
   d6410:	466b      	mov	r3, sp
   d6412:	aa0c      	add	r2, sp, #48	; 0x30
   d6414:	4630      	mov	r0, r6
   d6416:	f7fe f857 	bl	d44c8 <netdb_getaddrinfo>
    if (!r) {
   d641a:	4604      	mov	r4, r0
   d641c:	2800      	cmp	r0, #0
   d641e:	d144      	bne.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6420:	4602      	mov	r2, r0
   d6422:	2101      	movs	r1, #1
   d6424:	6868      	ldr	r0, [r5, #4]
   d6426:	f7fe f9ef 	bl	d4808 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d642a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d642c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d642e:	4622      	mov	r2, r4
   d6430:	6868      	ldr	r0, [r5, #4]
   d6432:	f7fe f9e9 	bl	d4808 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6436:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6438:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d643a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d643c:	2e00      	cmp	r6, #0
   d643e:	d034      	beq.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6440:	2900      	cmp	r1, #0
   d6442:	d132      	bne.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6444:	6873      	ldr	r3, [r6, #4]
   d6446:	2b02      	cmp	r3, #2
   d6448:	d002      	beq.n	d6450 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d644a:	2b0a      	cmp	r3, #10
   d644c:	d009      	beq.n	d6462 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d644e:	e02a      	b.n	d64a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6450:	f1b8 0f00 	cmp.w	r8, #0
   d6454:	d027      	beq.n	d64a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6456:	6971      	ldr	r1, [r6, #20]
   d6458:	4638      	mov	r0, r7
   d645a:	3104      	adds	r1, #4
   d645c:	f7ff fd85 	bl	d5f6a <_ZN9IPAddressaSEPKh>
   d6460:	e020      	b.n	d64a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6462:	f1b9 0f00 	cmp.w	r9, #0
   d6466:	d01e      	beq.n	d64a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6468:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d646a:	2211      	movs	r2, #17
   d646c:	a801      	add	r0, sp, #4
   d646e:	f000 f9d8 	bl	d6822 <memset>
                    a.v = 6;
   d6472:	2306      	movs	r3, #6
   d6474:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6478:	ad01      	add	r5, sp, #4
   d647a:	f104 0308 	add.w	r3, r4, #8
   d647e:	3418      	adds	r4, #24
   d6480:	6818      	ldr	r0, [r3, #0]
   d6482:	6859      	ldr	r1, [r3, #4]
   d6484:	462a      	mov	r2, r5
   d6486:	c203      	stmia	r2!, {r0, r1}
   d6488:	3308      	adds	r3, #8
   d648a:	42a3      	cmp	r3, r4
   d648c:	4615      	mov	r5, r2
   d648e:	d1f7      	bne.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6490:	a901      	add	r1, sp, #4
   d6492:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6494:	ad07      	add	r5, sp, #28
   d6496:	f7ff fd49 	bl	d5f2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d649a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d649c:	1d3c      	adds	r4, r7, #4
   d649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64a0:	682b      	ldr	r3, [r5, #0]
   d64a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d64a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64a6:	69f6      	ldr	r6, [r6, #28]
   d64a8:	e7c8      	b.n	d643c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64aa:	9800      	ldr	r0, [sp, #0]
   d64ac:	f7fe f804 	bl	d44b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d64b0:	4638      	mov	r0, r7
   d64b2:	b015      	add	sp, #84	; 0x54
   d64b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d64b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d64b8:	4b02      	ldr	r3, [pc, #8]	; (d64c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d64ba:	4a03      	ldr	r2, [pc, #12]	; (d64c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d64bc:	601a      	str	r2, [r3, #0]
   d64be:	2200      	movs	r2, #0
   d64c0:	605a      	str	r2, [r3, #4]
   d64c2:	4770      	bx	lr
   d64c4:	2003e740 	.word	0x2003e740
   d64c8:	000d6db0 	.word	0x000d6db0

000d64cc <__aeabi_atexit>:
   d64cc:	460b      	mov	r3, r1
   d64ce:	4601      	mov	r1, r0
   d64d0:	4618      	mov	r0, r3
   d64d2:	f000 b963 	b.w	d679c <__cxa_atexit>
	...

000d64d8 <_ZSt15get_new_handlerv>:
   d64d8:	4b02      	ldr	r3, [pc, #8]	; (d64e4 <_ZSt15get_new_handlerv+0xc>)
   d64da:	6818      	ldr	r0, [r3, #0]
   d64dc:	f3bf 8f5f 	dmb	sy
   d64e0:	4770      	bx	lr
   d64e2:	bf00      	nop
   d64e4:	2003e74c 	.word	0x2003e74c

000d64e8 <_ZdlPvj>:
   d64e8:	f7fd bdd7 	b.w	d409a <_ZdlPv>

000d64ec <_ZnwjRKSt9nothrow_t>:
   d64ec:	b510      	push	{r4, lr}
   d64ee:	2800      	cmp	r0, #0
   d64f0:	bf14      	ite	ne
   d64f2:	4604      	movne	r4, r0
   d64f4:	2401      	moveq	r4, #1
   d64f6:	4620      	mov	r0, r4
   d64f8:	f7fe f9c6 	bl	d4888 <malloc>
   d64fc:	b920      	cbnz	r0, d6508 <_ZnwjRKSt9nothrow_t+0x1c>
   d64fe:	f7ff ffeb 	bl	d64d8 <_ZSt15get_new_handlerv>
   d6502:	b108      	cbz	r0, d6508 <_ZnwjRKSt9nothrow_t+0x1c>
   d6504:	4780      	blx	r0
   d6506:	e7f6      	b.n	d64f6 <_ZnwjRKSt9nothrow_t+0xa>
   d6508:	bd10      	pop	{r4, pc}
	...

000d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d650c:	4b18      	ldr	r3, [pc, #96]	; (d6570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d650e:	681a      	ldr	r2, [r3, #0]
   d6510:	07d1      	lsls	r1, r2, #31
   d6512:	bf5c      	itt	pl
   d6514:	2201      	movpl	r2, #1
   d6516:	601a      	strpl	r2, [r3, #0]
   d6518:	4b16      	ldr	r3, [pc, #88]	; (d6574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d651a:	681a      	ldr	r2, [r3, #0]
   d651c:	07d2      	lsls	r2, r2, #31
   d651e:	bf5c      	itt	pl
   d6520:	2201      	movpl	r2, #1
   d6522:	601a      	strpl	r2, [r3, #0]
   d6524:	4b14      	ldr	r3, [pc, #80]	; (d6578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6526:	681a      	ldr	r2, [r3, #0]
   d6528:	07d0      	lsls	r0, r2, #31
   d652a:	bf5c      	itt	pl
   d652c:	2201      	movpl	r2, #1
   d652e:	601a      	strpl	r2, [r3, #0]
   d6530:	4b12      	ldr	r3, [pc, #72]	; (d657c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6532:	681a      	ldr	r2, [r3, #0]
   d6534:	07d1      	lsls	r1, r2, #31
   d6536:	bf5c      	itt	pl
   d6538:	2201      	movpl	r2, #1
   d653a:	601a      	strpl	r2, [r3, #0]
   d653c:	4b10      	ldr	r3, [pc, #64]	; (d6580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d653e:	681a      	ldr	r2, [r3, #0]
   d6540:	07d2      	lsls	r2, r2, #31
   d6542:	bf5c      	itt	pl
   d6544:	2201      	movpl	r2, #1
   d6546:	601a      	strpl	r2, [r3, #0]
   d6548:	4b0e      	ldr	r3, [pc, #56]	; (d6584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d654a:	681a      	ldr	r2, [r3, #0]
   d654c:	07d0      	lsls	r0, r2, #31
   d654e:	bf5c      	itt	pl
   d6550:	2201      	movpl	r2, #1
   d6552:	601a      	strpl	r2, [r3, #0]
   d6554:	4b0c      	ldr	r3, [pc, #48]	; (d6588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6556:	681a      	ldr	r2, [r3, #0]
   d6558:	07d1      	lsls	r1, r2, #31
   d655a:	bf5c      	itt	pl
   d655c:	2201      	movpl	r2, #1
   d655e:	601a      	strpl	r2, [r3, #0]
   d6560:	4b0a      	ldr	r3, [pc, #40]	; (d658c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6562:	681a      	ldr	r2, [r3, #0]
   d6564:	07d2      	lsls	r2, r2, #31
   d6566:	bf5c      	itt	pl
   d6568:	2201      	movpl	r2, #1
   d656a:	601a      	strpl	r2, [r3, #0]
   d656c:	4770      	bx	lr
   d656e:	bf00      	nop
   d6570:	2003e76c 	.word	0x2003e76c
   d6574:	2003e768 	.word	0x2003e768
   d6578:	2003e764 	.word	0x2003e764
   d657c:	2003e760 	.word	0x2003e760
   d6580:	2003e75c 	.word	0x2003e75c
   d6584:	2003e758 	.word	0x2003e758
   d6588:	2003e754 	.word	0x2003e754
   d658c:	2003e750 	.word	0x2003e750

000d6590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6590:	4b24      	ldr	r3, [pc, #144]	; (d6624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d0      	lsls	r0, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b22      	ldr	r3, [pc, #136]	; (d6628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d1      	lsls	r1, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b20      	ldr	r3, [pc, #128]	; (d662c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d2      	lsls	r2, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b1e      	ldr	r3, [pc, #120]	; (d6630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d0      	lsls	r0, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b1c      	ldr	r3, [pc, #112]	; (d6634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d1      	lsls	r1, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4b1a      	ldr	r3, [pc, #104]	; (d6638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d65ce:	681a      	ldr	r2, [r3, #0]
   d65d0:	07d2      	lsls	r2, r2, #31
   d65d2:	bf5c      	itt	pl
   d65d4:	2201      	movpl	r2, #1
   d65d6:	601a      	strpl	r2, [r3, #0]
   d65d8:	4b18      	ldr	r3, [pc, #96]	; (d663c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d65da:	681a      	ldr	r2, [r3, #0]
   d65dc:	07d0      	lsls	r0, r2, #31
   d65de:	bf5c      	itt	pl
   d65e0:	2201      	movpl	r2, #1
   d65e2:	601a      	strpl	r2, [r3, #0]
   d65e4:	4b16      	ldr	r3, [pc, #88]	; (d6640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d65e6:	681a      	ldr	r2, [r3, #0]
   d65e8:	07d1      	lsls	r1, r2, #31
   d65ea:	bf5c      	itt	pl
   d65ec:	2201      	movpl	r2, #1
   d65ee:	601a      	strpl	r2, [r3, #0]
   d65f0:	4b14      	ldr	r3, [pc, #80]	; (d6644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d65f2:	681a      	ldr	r2, [r3, #0]
   d65f4:	07d2      	lsls	r2, r2, #31
   d65f6:	bf5c      	itt	pl
   d65f8:	2201      	movpl	r2, #1
   d65fa:	601a      	strpl	r2, [r3, #0]
   d65fc:	4b12      	ldr	r3, [pc, #72]	; (d6648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	07d0      	lsls	r0, r2, #31
   d6602:	bf5c      	itt	pl
   d6604:	2201      	movpl	r2, #1
   d6606:	601a      	strpl	r2, [r3, #0]
   d6608:	4b10      	ldr	r3, [pc, #64]	; (d664c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d1      	lsls	r1, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4b0e      	ldr	r3, [pc, #56]	; (d6650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6616:	681a      	ldr	r2, [r3, #0]
   d6618:	07d2      	lsls	r2, r2, #31
   d661a:	bf5c      	itt	pl
   d661c:	2201      	movpl	r2, #1
   d661e:	601a      	strpl	r2, [r3, #0]
   d6620:	4770      	bx	lr
   d6622:	bf00      	nop
   d6624:	2003e79c 	.word	0x2003e79c
   d6628:	2003e798 	.word	0x2003e798
   d662c:	2003e794 	.word	0x2003e794
   d6630:	2003e790 	.word	0x2003e790
   d6634:	2003e78c 	.word	0x2003e78c
   d6638:	2003e788 	.word	0x2003e788
   d663c:	2003e784 	.word	0x2003e784
   d6640:	2003e780 	.word	0x2003e780
   d6644:	2003e77c 	.word	0x2003e77c
   d6648:	2003e778 	.word	0x2003e778
   d664c:	2003e774 	.word	0x2003e774
   d6650:	2003e770 	.word	0x2003e770

000d6654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6654:	4b24      	ldr	r3, [pc, #144]	; (d66e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6656:	681a      	ldr	r2, [r3, #0]
   d6658:	07d0      	lsls	r0, r2, #31
   d665a:	bf5c      	itt	pl
   d665c:	2201      	movpl	r2, #1
   d665e:	601a      	strpl	r2, [r3, #0]
   d6660:	4b22      	ldr	r3, [pc, #136]	; (d66ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6662:	681a      	ldr	r2, [r3, #0]
   d6664:	07d1      	lsls	r1, r2, #31
   d6666:	bf5c      	itt	pl
   d6668:	2201      	movpl	r2, #1
   d666a:	601a      	strpl	r2, [r3, #0]
   d666c:	4b20      	ldr	r3, [pc, #128]	; (d66f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d666e:	681a      	ldr	r2, [r3, #0]
   d6670:	07d2      	lsls	r2, r2, #31
   d6672:	bf5c      	itt	pl
   d6674:	2201      	movpl	r2, #1
   d6676:	601a      	strpl	r2, [r3, #0]
   d6678:	4b1e      	ldr	r3, [pc, #120]	; (d66f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d667a:	681a      	ldr	r2, [r3, #0]
   d667c:	07d0      	lsls	r0, r2, #31
   d667e:	bf5c      	itt	pl
   d6680:	2201      	movpl	r2, #1
   d6682:	601a      	strpl	r2, [r3, #0]
   d6684:	4b1c      	ldr	r3, [pc, #112]	; (d66f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6686:	681a      	ldr	r2, [r3, #0]
   d6688:	07d1      	lsls	r1, r2, #31
   d668a:	bf5c      	itt	pl
   d668c:	2201      	movpl	r2, #1
   d668e:	601a      	strpl	r2, [r3, #0]
   d6690:	4b1a      	ldr	r3, [pc, #104]	; (d66fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6692:	681a      	ldr	r2, [r3, #0]
   d6694:	07d2      	lsls	r2, r2, #31
   d6696:	bf5c      	itt	pl
   d6698:	2201      	movpl	r2, #1
   d669a:	601a      	strpl	r2, [r3, #0]
   d669c:	4b18      	ldr	r3, [pc, #96]	; (d6700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d669e:	681a      	ldr	r2, [r3, #0]
   d66a0:	07d0      	lsls	r0, r2, #31
   d66a2:	bf5c      	itt	pl
   d66a4:	2201      	movpl	r2, #1
   d66a6:	601a      	strpl	r2, [r3, #0]
   d66a8:	4b16      	ldr	r3, [pc, #88]	; (d6704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d66aa:	681a      	ldr	r2, [r3, #0]
   d66ac:	07d1      	lsls	r1, r2, #31
   d66ae:	bf5c      	itt	pl
   d66b0:	2201      	movpl	r2, #1
   d66b2:	601a      	strpl	r2, [r3, #0]
   d66b4:	4b14      	ldr	r3, [pc, #80]	; (d6708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d66b6:	681a      	ldr	r2, [r3, #0]
   d66b8:	07d2      	lsls	r2, r2, #31
   d66ba:	bf5c      	itt	pl
   d66bc:	2201      	movpl	r2, #1
   d66be:	601a      	strpl	r2, [r3, #0]
   d66c0:	4b12      	ldr	r3, [pc, #72]	; (d670c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d66c2:	681a      	ldr	r2, [r3, #0]
   d66c4:	07d0      	lsls	r0, r2, #31
   d66c6:	bf5c      	itt	pl
   d66c8:	2201      	movpl	r2, #1
   d66ca:	601a      	strpl	r2, [r3, #0]
   d66cc:	4b10      	ldr	r3, [pc, #64]	; (d6710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d66ce:	681a      	ldr	r2, [r3, #0]
   d66d0:	07d1      	lsls	r1, r2, #31
   d66d2:	bf5c      	itt	pl
   d66d4:	2201      	movpl	r2, #1
   d66d6:	601a      	strpl	r2, [r3, #0]
   d66d8:	4b0e      	ldr	r3, [pc, #56]	; (d6714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d66da:	681a      	ldr	r2, [r3, #0]
   d66dc:	07d2      	lsls	r2, r2, #31
   d66de:	bf5c      	itt	pl
   d66e0:	2201      	movpl	r2, #1
   d66e2:	601a      	strpl	r2, [r3, #0]
   d66e4:	4770      	bx	lr
   d66e6:	bf00      	nop
   d66e8:	2003e7cc 	.word	0x2003e7cc
   d66ec:	2003e7c8 	.word	0x2003e7c8
   d66f0:	2003e7c4 	.word	0x2003e7c4
   d66f4:	2003e7c0 	.word	0x2003e7c0
   d66f8:	2003e7bc 	.word	0x2003e7bc
   d66fc:	2003e7b8 	.word	0x2003e7b8
   d6700:	2003e7b4 	.word	0x2003e7b4
   d6704:	2003e7b0 	.word	0x2003e7b0
   d6708:	2003e7ac 	.word	0x2003e7ac
   d670c:	2003e7a8 	.word	0x2003e7a8
   d6710:	2003e7a4 	.word	0x2003e7a4
   d6714:	2003e7a0 	.word	0x2003e7a0

000d6718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6718:	4b18      	ldr	r3, [pc, #96]	; (d677c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d671a:	681a      	ldr	r2, [r3, #0]
   d671c:	07d1      	lsls	r1, r2, #31
   d671e:	bf5c      	itt	pl
   d6720:	2201      	movpl	r2, #1
   d6722:	601a      	strpl	r2, [r3, #0]
   d6724:	4b16      	ldr	r3, [pc, #88]	; (d6780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6726:	681a      	ldr	r2, [r3, #0]
   d6728:	07d2      	lsls	r2, r2, #31
   d672a:	bf5c      	itt	pl
   d672c:	2201      	movpl	r2, #1
   d672e:	601a      	strpl	r2, [r3, #0]
   d6730:	4b14      	ldr	r3, [pc, #80]	; (d6784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6732:	681a      	ldr	r2, [r3, #0]
   d6734:	07d0      	lsls	r0, r2, #31
   d6736:	bf5c      	itt	pl
   d6738:	2201      	movpl	r2, #1
   d673a:	601a      	strpl	r2, [r3, #0]
   d673c:	4b12      	ldr	r3, [pc, #72]	; (d6788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d673e:	681a      	ldr	r2, [r3, #0]
   d6740:	07d1      	lsls	r1, r2, #31
   d6742:	bf5c      	itt	pl
   d6744:	2201      	movpl	r2, #1
   d6746:	601a      	strpl	r2, [r3, #0]
   d6748:	4b10      	ldr	r3, [pc, #64]	; (d678c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d674a:	681a      	ldr	r2, [r3, #0]
   d674c:	07d2      	lsls	r2, r2, #31
   d674e:	bf5c      	itt	pl
   d6750:	2201      	movpl	r2, #1
   d6752:	601a      	strpl	r2, [r3, #0]
   d6754:	4b0e      	ldr	r3, [pc, #56]	; (d6790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6756:	681a      	ldr	r2, [r3, #0]
   d6758:	07d0      	lsls	r0, r2, #31
   d675a:	bf5c      	itt	pl
   d675c:	2201      	movpl	r2, #1
   d675e:	601a      	strpl	r2, [r3, #0]
   d6760:	4b0c      	ldr	r3, [pc, #48]	; (d6794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6762:	681a      	ldr	r2, [r3, #0]
   d6764:	07d1      	lsls	r1, r2, #31
   d6766:	bf5c      	itt	pl
   d6768:	2201      	movpl	r2, #1
   d676a:	601a      	strpl	r2, [r3, #0]
   d676c:	4b0a      	ldr	r3, [pc, #40]	; (d6798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d676e:	681a      	ldr	r2, [r3, #0]
   d6770:	07d2      	lsls	r2, r2, #31
   d6772:	bf5c      	itt	pl
   d6774:	2201      	movpl	r2, #1
   d6776:	601a      	strpl	r2, [r3, #0]
   d6778:	4770      	bx	lr
   d677a:	bf00      	nop
   d677c:	2003e7ec 	.word	0x2003e7ec
   d6780:	2003e7e8 	.word	0x2003e7e8
   d6784:	2003e7e4 	.word	0x2003e7e4
   d6788:	2003e7e0 	.word	0x2003e7e0
   d678c:	2003e7dc 	.word	0x2003e7dc
   d6790:	2003e7d8 	.word	0x2003e7d8
   d6794:	2003e7d4 	.word	0x2003e7d4
   d6798:	2003e7d0 	.word	0x2003e7d0

000d679c <__cxa_atexit>:
   d679c:	b510      	push	{r4, lr}
   d679e:	4c05      	ldr	r4, [pc, #20]	; (d67b4 <__cxa_atexit+0x18>)
   d67a0:	4613      	mov	r3, r2
   d67a2:	b12c      	cbz	r4, d67b0 <__cxa_atexit+0x14>
   d67a4:	460a      	mov	r2, r1
   d67a6:	4601      	mov	r1, r0
   d67a8:	2002      	movs	r0, #2
   d67aa:	f3af 8000 	nop.w
   d67ae:	bd10      	pop	{r4, pc}
   d67b0:	4620      	mov	r0, r4
   d67b2:	bd10      	pop	{r4, pc}
   d67b4:	00000000 	.word	0x00000000

000d67b8 <memcmp>:
   d67b8:	b510      	push	{r4, lr}
   d67ba:	3901      	subs	r1, #1
   d67bc:	4402      	add	r2, r0
   d67be:	4290      	cmp	r0, r2
   d67c0:	d007      	beq.n	d67d2 <memcmp+0x1a>
   d67c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d67c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d67ca:	42a3      	cmp	r3, r4
   d67cc:	d0f7      	beq.n	d67be <memcmp+0x6>
   d67ce:	1b18      	subs	r0, r3, r4
   d67d0:	bd10      	pop	{r4, pc}
   d67d2:	2000      	movs	r0, #0
   d67d4:	bd10      	pop	{r4, pc}

000d67d6 <memcpy>:
   d67d6:	b510      	push	{r4, lr}
   d67d8:	1e43      	subs	r3, r0, #1
   d67da:	440a      	add	r2, r1
   d67dc:	4291      	cmp	r1, r2
   d67de:	d004      	beq.n	d67ea <memcpy+0x14>
   d67e0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d67e4:	f803 4f01 	strb.w	r4, [r3, #1]!
   d67e8:	e7f8      	b.n	d67dc <memcpy+0x6>
   d67ea:	bd10      	pop	{r4, pc}

000d67ec <memmove>:
   d67ec:	4288      	cmp	r0, r1
   d67ee:	b510      	push	{r4, lr}
   d67f0:	eb01 0302 	add.w	r3, r1, r2
   d67f4:	d801      	bhi.n	d67fa <memmove+0xe>
   d67f6:	1e42      	subs	r2, r0, #1
   d67f8:	e00b      	b.n	d6812 <memmove+0x26>
   d67fa:	4298      	cmp	r0, r3
   d67fc:	d2fb      	bcs.n	d67f6 <memmove+0xa>
   d67fe:	1881      	adds	r1, r0, r2
   d6800:	1ad2      	subs	r2, r2, r3
   d6802:	42d3      	cmn	r3, r2
   d6804:	d004      	beq.n	d6810 <memmove+0x24>
   d6806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d680a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d680e:	e7f8      	b.n	d6802 <memmove+0x16>
   d6810:	bd10      	pop	{r4, pc}
   d6812:	4299      	cmp	r1, r3
   d6814:	d004      	beq.n	d6820 <memmove+0x34>
   d6816:	f811 4b01 	ldrb.w	r4, [r1], #1
   d681a:	f802 4f01 	strb.w	r4, [r2, #1]!
   d681e:	e7f8      	b.n	d6812 <memmove+0x26>
   d6820:	bd10      	pop	{r4, pc}

000d6822 <memset>:
   d6822:	4402      	add	r2, r0
   d6824:	4603      	mov	r3, r0
   d6826:	4293      	cmp	r3, r2
   d6828:	d002      	beq.n	d6830 <memset+0xe>
   d682a:	f803 1b01 	strb.w	r1, [r3], #1
   d682e:	e7fa      	b.n	d6826 <memset+0x4>
   d6830:	4770      	bx	lr
	...

000d6834 <srand>:
   d6834:	b538      	push	{r3, r4, r5, lr}
   d6836:	4b12      	ldr	r3, [pc, #72]	; (d6880 <srand+0x4c>)
   d6838:	681c      	ldr	r4, [r3, #0]
   d683a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d683c:	4605      	mov	r5, r0
   d683e:	b9d3      	cbnz	r3, d6876 <srand+0x42>
   d6840:	2018      	movs	r0, #24
   d6842:	f7fe f821 	bl	d4888 <malloc>
   d6846:	f243 330e 	movw	r3, #13070	; 0x330e
   d684a:	63a0      	str	r0, [r4, #56]	; 0x38
   d684c:	8003      	strh	r3, [r0, #0]
   d684e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6852:	8043      	strh	r3, [r0, #2]
   d6854:	f241 2334 	movw	r3, #4660	; 0x1234
   d6858:	8083      	strh	r3, [r0, #4]
   d685a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d685e:	80c3      	strh	r3, [r0, #6]
   d6860:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6864:	8103      	strh	r3, [r0, #8]
   d6866:	2305      	movs	r3, #5
   d6868:	8143      	strh	r3, [r0, #10]
   d686a:	230b      	movs	r3, #11
   d686c:	8183      	strh	r3, [r0, #12]
   d686e:	2201      	movs	r2, #1
   d6870:	2300      	movs	r3, #0
   d6872:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6878:	2200      	movs	r2, #0
   d687a:	611d      	str	r5, [r3, #16]
   d687c:	615a      	str	r2, [r3, #20]
   d687e:	bd38      	pop	{r3, r4, r5, pc}
   d6880:	2003e344 	.word	0x2003e344

000d6884 <strcpy>:
   d6884:	4603      	mov	r3, r0
   d6886:	f811 2b01 	ldrb.w	r2, [r1], #1
   d688a:	f803 2b01 	strb.w	r2, [r3], #1
   d688e:	2a00      	cmp	r2, #0
   d6890:	d1f9      	bne.n	d6886 <strcpy+0x2>
   d6892:	4770      	bx	lr

000d6894 <strlen>:
   d6894:	4603      	mov	r3, r0
   d6896:	f813 2b01 	ldrb.w	r2, [r3], #1
   d689a:	2a00      	cmp	r2, #0
   d689c:	d1fb      	bne.n	d6896 <strlen+0x2>
   d689e:	1a18      	subs	r0, r3, r0
   d68a0:	3801      	subs	r0, #1
   d68a2:	4770      	bx	lr

000d68a4 <strnlen>:
   d68a4:	b510      	push	{r4, lr}
   d68a6:	4603      	mov	r3, r0
   d68a8:	4401      	add	r1, r0
   d68aa:	428b      	cmp	r3, r1
   d68ac:	d004      	beq.n	d68b8 <strnlen+0x14>
   d68ae:	781a      	ldrb	r2, [r3, #0]
   d68b0:	1c5c      	adds	r4, r3, #1
   d68b2:	b10a      	cbz	r2, d68b8 <strnlen+0x14>
   d68b4:	4623      	mov	r3, r4
   d68b6:	e7f8      	b.n	d68aa <strnlen+0x6>
   d68b8:	1a18      	subs	r0, r3, r0
   d68ba:	bd10      	pop	{r4, pc}

000d68bc <dynalib_user>:
   d68bc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d68cc:	0000 0000 0032 4536 3034 3030 3130 422d     ....2.6E400001-B
   d68dc:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   d68ec:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   d68fc:	3030 2d32 3542 3341 462d 3933 2d33 3045     002-B5A3-F393-E0
   d690c:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   d691c:	4536 3034 3030 3330 422d 4135 2d33 3346     6E400003-B5A3-F3
   d692c:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   d693c:	4143 4539 7400 0078 7872 0000               CA9E.tx.rx..

000d6948 <_ZTVN5spark13EthernetClassE>:
	...
   d6950:	4917 000d 490d 000d 4903 000d 48f9 000d     .I...I...I...H..
   d6960:	48ed 000d 48e1 000d 48d5 000d 48cd 000d     .H...H...H...H..
   d6970:	48c3 000d 48b9 000d 63ed 000d 6977 6972     .H...H...c..wiri
   d6980:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d6990:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d69a0:	6920 766e 6c61 6469 002e 0000                invalid....

000d69ac <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d69b4:	4b93 000d 4b99 000d 58b5 000d 4bc3 000d     .K...K...X...K..
   d69c4:	4b95 000d                                   .K..

000d69c8 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d69d0:	4b8d 000d 4ba7 000d 59c1 000d 4bc7 000d     .K...K...Y...K..
   d69e0:	4b8f 000d                                   .K..

000d69e4 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d69ec:	4b87 000d 4bb5 000d 53a1 000d 4bcb 000d     .K...K...S...K..
   d69fc:	4b89 000d                                   .K..

000d6a00 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d6a00:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d6a10:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d6a20:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d6a30:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d6a40:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d6a50:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d6a60:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d6a70:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d6a80:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d6a90:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d6aa0:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d6ab0:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d6ac0:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d6ad0:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d6ae0:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d6af0:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d6b00:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d6b10:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d6b20:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d6b30:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d6b40:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d6b50:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d6b60:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d6b70:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d6b80:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d6b90:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d6ba0:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d6bb0 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d6bb0:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d6bc0:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d6bd0:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d6be0:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d6bf0:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d6c00:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d6c10:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d6c20:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d6c30:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d6c40:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d6c50:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d6c60:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d6c70:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d6c80:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d6c90:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d6ca0:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d6cb0:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d6cc0:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d6ccc <_ZTV9IPAddress>:
	...
   d6cd4:	5ead 000d 5e9d 000d 5e9f 000d               .^...^...^..

000d6ce0 <_ZTV9USBSerial>:
	...
   d6ce8:	5f85 000d 5fd5 000d 5fe3 000d 5c99 000d     ._..._..._...\..
   d6cf8:	5fc1 000d 5f87 000d 5f9d 000d 5fcf 000d     ._..._..._..._..
   d6d08:	5fb3 000d 5f81 000d                         ._..._..

000d6d10 <_ZTV11USARTSerial>:
	...
   d6d18:	6091 000d 60e1 000d 60ef 000d 5c99 000d     .`...`...`...\..
   d6d28:	60a5 000d 60c7 000d 60b3 000d 60db 000d     .`...`...`...`..
   d6d38:	6093 000d 6097 000d                         .`...`..

000d6d40 <_ZTVN5spark9MeshClassE>:
	...
   d6d48:	61eb 000d 61e1 000d 61d7 000d 61cd 000d     .a...a...a...a..
   d6d58:	61c1 000d 61b5 000d 61a9 000d 61a1 000d     .a...a...a...a..
   d6d68:	6197 000d 618d 000d 63ed 000d               .a...a...c..

000d6d74 <_ZTVN5spark9WiFiClassE>:
	...
   d6d7c:	6367 000d 635d 000d 6353 000d 6309 000d     gc..]c..Sc...c..
   d6d8c:	6347 000d 633b 000d 632f 000d 6327 000d     Gc..;c../c..'c..
   d6d9c:	631d 000d 6313 000d 63ed 000d               .c...c...c..

000d6da8 <_ZTVN5spark12NetworkClassE>:
	...
   d6db0:	6385 000d 638f 000d 6399 000d 63a3 000d     .c...c...c...c..
   d6dc0:	63ad 000d 63b9 000d 63c5 000d 63d1 000d     .c...c...c...c..
   d6dd0:	63d9 000d 63e3 000d 63ed 000d               .c...c...c..

000d6ddc <_ZSt7nothrow>:
   d6ddc:	0000 0000                                   ....

000d6de0 <__sf_fake_stdin>:
	...

000d6e00 <__sf_fake_stdout>:
	...

000d6e20 <__sf_fake_stderr>:
	...
   d6e40:	0043                                        C.

000d6e42 <link_const_variable_data_end>:
	...

000d6e44 <link_constructors_location>:
   d6e44:	000d4391 	.word	0x000d4391
   d6e48:	000d4921 	.word	0x000d4921
   d6e4c:	000d4a7d 	.word	0x000d4a7d
   d6e50:	000d5c71 	.word	0x000d5c71
   d6e54:	000d5d2d 	.word	0x000d5d2d
   d6e58:	000d5d3d 	.word	0x000d5d3d
   d6e5c:	000d5d71 	.word	0x000d5d71
   d6e60:	000d62b9 	.word	0x000d62b9
   d6e64:	000d6371 	.word	0x000d6371
   d6e68:	000d64b9 	.word	0x000d64b9
   d6e6c:	000d650d 	.word	0x000d650d
   d6e70:	000d6591 	.word	0x000d6591
   d6e74:	000d6655 	.word	0x000d6655
   d6e78:	000d6719 	.word	0x000d6719

000d6e7c <link_constructors_end>:
   d6e7c:	00000000 	.word	0x00000000

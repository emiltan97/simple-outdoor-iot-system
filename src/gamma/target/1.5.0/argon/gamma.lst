
c:/Users/Acer/Desktop/ELEC4740_IoT/project/src/gamma/target/1.5.0/argon/gamma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003524  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7540  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003dbe0  000d7544  0001dbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000ba4  2003dc4c  2003dc4c  0002dc4c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d75b0  000d75b0  000275b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75d8  000d75d8  000275d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b17b5  00000000  00000000  000275dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000cbd7  00000000  00000000  000d8d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a93d  00000000  00000000  000e5968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002330  00000000  00000000  001002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004338  00000000  00000000  001025d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002eb56  00000000  00000000  0010690d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001db14  00000000  00000000  00135463  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ffe73  00000000  00000000  00152f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6ac  00000000  00000000  00252dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ff06 	bl	d6e3e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff26 	bl	d6e8a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dbe0 	.word	0x2003dbe0
   d4048:	000d7544 	.word	0x000d7544
   d404c:	2003dc4c 	.word	0x2003dc4c
   d4050:	2003dc4c 	.word	0x2003dc4c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fa27 	bl	d64ac <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d753c 	.word	0x000d753c
   d4080:	000d7504 	.word	0x000d7504

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b852 	b.w	d412c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8b1 	bl	d41f0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b9cd 	b.w	d6430 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc85 	b.w	d49a4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bc8b 	b.w	d49b4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc89 	b.w	d49b4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
BlePeerDevice beta;
BlePeerDevice alpha; 
BleAddress betaAddress;
BleAddress alphaAddress;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40b4:	b513      	push	{r0, r1, r4, lr}
  // If the data comes from BETA
  if (peer.address() == betaAddress) {
   d40b6:	4611      	mov	r1, r2
   d40b8:	4668      	mov	r0, sp
BlePeerDevice beta;
BlePeerDevice alpha; 
BleAddress betaAddress;
BleAddress alphaAddress;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d40ba:	4614      	mov	r4, r2
  // If the data comes from BETA
  if (peer.address() == betaAddress) {
   d40bc:	f001 f9f8 	bl	d54b0 <_ZNK8particle13BlePeerDevice7addressEv>
   d40c0:	4908      	ldr	r1, [pc, #32]	; (d40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>)
   d40c2:	4668      	mov	r0, sp
   d40c4:	f000 fe86 	bl	d4dd4 <_ZNK8particle10BleAddresseqERKS0_>
   d40c8:	b938      	cbnz	r0, d40da <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
    //    memcpy(txBuf, command, sizeof(txBuf));
    //    betaRxCharacteristic.setValue(txBuf, sizeof(txBuf));
    // }
  }
  // If the data comes from ALPHA
  else if (peer.address() == alphaAddress) {
   d40ca:	4621      	mov	r1, r4
   d40cc:	4668      	mov	r0, sp
   d40ce:	f001 f9ef 	bl	d54b0 <_ZNK8particle13BlePeerDevice7addressEv>
   d40d2:	4905      	ldr	r1, [pc, #20]	; (d40e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
   d40d4:	4668      	mov	r0, sp
   d40d6:	f000 fe7d 	bl	d4dd4 <_ZNK8particle10BleAddresseqERKS0_>
    //    strcpy(command, "0");
    //    memcpy(txBuf, command, sizeof(txBuf));
    //    betaRxCharacteristic.setValue(txBuf, sizeof(txBuf));
  }

  hasReceivedData = HIGH;
   d40da:	4b04      	ldr	r3, [pc, #16]	; (d40ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d40dc:	2201      	movs	r2, #1
   d40de:	601a      	str	r2, [r3, #0]
}
   d40e0:	b002      	add	sp, #8
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	2003e3a4 	.word	0x2003e3a4
   d40e8:	2003dcc0 	.word	0x2003dcc0
   d40ec:	2003dce0 	.word	0x2003dce0

000d40f0 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d40f0:	b538      	push	{r3, r4, r5, lr}
   d40f2:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d40f4:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d40f6:	b128      	cbz	r0, d4104 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d40f8:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d40fa:	210c      	movs	r1, #12
   d40fc:	f002 fd28 	bl	d6b50 <_ZdlPvj>
            wakeupSource = next;
   d4100:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
   d4102:	e7f8      	b.n	d40f6 <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
   d4104:	4620      	mov	r0, r4
   d4106:	bd38      	pop	{r3, r4, r5, pc}

000d4108 <_ZN17SystemSleepResultD1Ev>:
            result.wakeupSource_ = nullptr;
        }
        return *this;
    }

    ~SystemSleepResult() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d410c:	6800      	ldr	r0, [r0, #0]
   d410e:	b108      	cbz	r0, d4114 <_ZN17SystemSleepResultD1Ev+0xc>
            free(wakeupSource_);
   d4110:	f000 fc50 	bl	d49b4 <free>
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4118:	6803      	ldr	r3, [r0, #0]
   d411a:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
   d411c:	b120      	cbz	r0, d4128 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
   d411e:	8883      	ldrh	r3, [r0, #4]
   d4120:	428b      	cmp	r3, r1
   d4122:	d001      	beq.n	d4128 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
   d4124:	6880      	ldr	r0, [r0, #8]
   d4126:	e7f9      	b.n	d411c <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
   d4128:	4770      	bx	lr
	...

000d412c <setup>:

void setup() {
   d412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin();
   d412e:	f002 fabd 	bl	d66ac <_Z16_fetch_usbserialv>
   d4132:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4136:	f002 faad 	bl	d6694 <_ZN9USBSerial5beginEl>
  BLE.on();
   d413a:	f001 fa09 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d413e:	f001 fa4d 	bl	d55dc <_ZNK8particle14BleLocalDevice2onEv>
  betaTxCharacteristic.onDataReceived(onDataReceived, &betaTxCharacteristic);
   d4142:	4a25      	ldr	r2, [pc, #148]	; (d41d8 <setup+0xac>)
   d4144:	4925      	ldr	r1, [pc, #148]	; (d41dc <setup+0xb0>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d4146:	4c26      	ldr	r4, [pc, #152]	; (d41e0 <setup+0xb4>)
   d4148:	4610      	mov	r0, r2
   d414a:	f001 f933 	bl	d53b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
  alphaTxCharacteristic.onDataReceived(onDataReceived, &alphaTxCharacteristic);
   d414e:	4a25      	ldr	r2, [pc, #148]	; (d41e4 <setup+0xb8>)
   d4150:	4922      	ldr	r1, [pc, #136]	; (d41dc <setup+0xb0>)
   d4152:	4610      	mov	r0, r2
   d4154:	f001 f92e 	bl	d53b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4158:	7d23      	ldrb	r3, [r4, #20]
   d415a:	b1fb      	cbz	r3, d419c <setup+0x70>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d415c:	2301      	movs	r3, #1
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d415e:	2104      	movs	r1, #4
   d4160:	4620      	mov	r0, r4
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4162:	7223      	strb	r3, [r4, #8]
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
   d4164:	f7ff ffd8 	bl	d4118 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d4168:	4606      	mov	r6, r0
   d416a:	b110      	cbz	r0, d4172 <setup+0x46>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d416c:	4b1e      	ldr	r3, [pc, #120]	; (d41e8 <setup+0xbc>)
   d416e:	60c3      	str	r3, [r0, #12]
   d4170:	e014      	b.n	d419c <setup+0x70>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4172:	491e      	ldr	r1, [pc, #120]	; (d41ec <setup+0xc0>)
   d4174:	2010      	movs	r0, #16
   d4176:	f002 fced 	bl	d6b54 <_ZnwjRKSt9nothrow_t>
   d417a:	4605      	mov	r5, r0
   d417c:	b338      	cbz	r0, d41ce <setup+0xa2>
   d417e:	2710      	movs	r7, #16
   d4180:	463a      	mov	r2, r7
   d4182:	4631      	mov	r1, r6
   d4184:	f002 fe81 	bl	d6e8a <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
   d4188:	2302      	movs	r3, #2
   d418a:	806b      	strh	r3, [r5, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d418c:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d418e:	802f      	strh	r7, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4190:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4192:	6923      	ldr	r3, [r4, #16]
   d4194:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4196:	4b14      	ldr	r3, [pc, #80]	; (d41e8 <setup+0xbc>)
   d4198:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d419a:	6125      	str	r5, [r4, #16]
        return *this;
    }

#if HAL_PLATFORM_BLE
    SystemSleepConfiguration& ble() {
        if (valid_) {
   d419c:	7d23      	ldrb	r3, [r4, #20]
   d419e:	4d10      	ldr	r5, [pc, #64]	; (d41e0 <setup+0xb4>)
   d41a0:	b1c3      	cbz	r3, d41d4 <setup+0xa8>
            // Check if BLE has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_BLE);
   d41a2:	210c      	movs	r1, #12
   d41a4:	4628      	mov	r0, r5
   d41a6:	f7ff ffb7 	bl	d4118 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
   d41aa:	4604      	mov	r4, r0
   d41ac:	b990      	cbnz	r0, d41d4 <setup+0xa8>
                return *this;
            }
            // Otherwise, configure BLE as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_base_t();
   d41ae:	490f      	ldr	r1, [pc, #60]	; (d41ec <setup+0xc0>)
   d41b0:	200c      	movs	r0, #12
   d41b2:	f002 fccf 	bl	d6b54 <_ZnwjRKSt9nothrow_t>
   d41b6:	b160      	cbz	r0, d41d2 <setup+0xa6>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->size = sizeof(hal_wakeup_source_base_t);
   d41b8:	230c      	movs	r3, #12
            wakeupSource->version = HAL_SLEEP_VERSION;
   d41ba:	2202      	movs	r2, #2
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_BLE);
            if (wakeup) {
                return *this;
            }
            // Otherwise, configure BLE as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_base_t();
   d41bc:	6044      	str	r4, [r0, #4]
   d41be:	6084      	str	r4, [r0, #8]
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->size = sizeof(hal_wakeup_source_base_t);
   d41c0:	8003      	strh	r3, [r0, #0]
            wakeupSource->version = HAL_SLEEP_VERSION;
   d41c2:	8042      	strh	r2, [r0, #2]
            wakeupSource->type = HAL_WAKEUP_SOURCE_TYPE_BLE;
   d41c4:	8083      	strh	r3, [r0, #4]
            wakeupSource->next = config_.wakeup_sources;
   d41c6:	692b      	ldr	r3, [r5, #16]
   d41c8:	6083      	str	r3, [r0, #8]
            config_.wakeup_sources = wakeupSource;
   d41ca:	6128      	str	r0, [r5, #16]

  sleepConfig.mode(SystemSleepMode::STOP)
    .duration(300s)
    .ble(); 
}
   d41cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
   d41ce:	7520      	strb	r0, [r4, #20]
   d41d0:	e7e4      	b.n	d419c <setup+0x70>
                return *this;
            }
            // Otherwise, configure BLE as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_base_t();
            if (!wakeupSource) {
                valid_ = false;
   d41d2:	7528      	strb	r0, [r5, #20]
   d41d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d41d6:	bf00      	nop
   d41d8:	2003e394 	.word	0x2003e394
   d41dc:	000d40b5 	.word	0x000d40b5
   d41e0:	2003dc50 	.word	0x2003dc50
   d41e4:	2003e39c 	.word	0x2003e39c
   d41e8:	000493e0 	.word	0x000493e0
   d41ec:	000d749c 	.word	0x000d749c

000d41f0 <loop>:

void loop() {
   d41f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /*******************************************
   *      WHEN CONNECTED TO SENSOR NODES     *
   *******************************************/
  if (alpha.connected() && beta.connected()) {
   d41f4:	4875      	ldr	r0, [pc, #468]	; (d43cc <loop+0x1dc>)
  sleepConfig.mode(SystemSleepMode::STOP)
    .duration(300s)
    .ble(); 
}

void loop() {
   d41f6:	b088      	sub	sp, #32
  /*******************************************
   *      WHEN CONNECTED TO SENSOR NODES     *
   *******************************************/
  if (alpha.connected() && beta.connected()) {
   d41f8:	f001 f94a 	bl	d5490 <_ZNK8particle13BlePeerDevice9connectedEv>
   d41fc:	b120      	cbz	r0, d4208 <loop+0x18>
   d41fe:	4874      	ldr	r0, [pc, #464]	; (d43d0 <loop+0x1e0>)
   d4200:	f001 f946 	bl	d5490 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4204:	2800      	cmp	r0, #0
   d4206:	d133      	bne.n	d4270 <loop+0x80>
  /*******************************************
   *         ATTEMPTING TO CONNECT           *
   *******************************************/
  else {
    // preventing from scanning too often
    if (millis() - lastScan >= SCAN_PERIOD_MS) {
   d4208:	4c72      	ldr	r4, [pc, #456]	; (d43d4 <loop+0x1e4>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d420a:	f000 f9f3 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
   d420e:	6823      	ldr	r3, [r4, #0]
   d4210:	1ac0      	subs	r0, r0, r3
   d4212:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4216:	f0c0 80d5 	bcc.w	d43c4 <loop+0x1d4>
   d421a:	f000 f9eb 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
      lastScan = millis();
   d421e:	6020      	str	r0, [r4, #0]
      size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d4220:	f001 f996 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4224:	2214      	movs	r2, #20
   d4226:	496c      	ldr	r1, [pc, #432]	; (d43d8 <loop+0x1e8>)
   d4228:	f001 f9e8 	bl	d55fc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
      if (count > 0) {
   d422c:	4607      	mov	r7, r0
   d422e:	2800      	cmp	r0, #0
   d4230:	f000 80c8 	beq.w	d43c4 <loop+0x1d4>
        // scanning surrounding ble devices 
        for (uint8_t ii = 0; ii < count; ii++) {
          BleUuid foundServiceUuid;
          size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4234:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d43d8 <loop+0x1e8>
   d4238:	2500      	movs	r5, #0
    if (millis() - lastScan >= SCAN_PERIOD_MS) {
      lastScan = millis();
      size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
      if (count > 0) {
        // scanning surrounding ble devices 
        for (uint8_t ii = 0; ii < count; ii++) {
   d423a:	b2ec      	uxtb	r4, r5
   d423c:	42a7      	cmp	r7, r4
   d423e:	f240 80c1 	bls.w	d43c4 <loop+0x1d4>
          BleUuid foundServiceUuid;
   d4242:	a803      	add	r0, sp, #12
   d4244:	f000 fdd4 	bl	d4df0 <_ZN8particle7BleUuidC1Ev>
          size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4248:	2354      	movs	r3, #84	; 0x54
   d424a:	435c      	muls	r4, r3
   d424c:	f104 0008 	add.w	r0, r4, #8
   d4250:	2201      	movs	r2, #1
   d4252:	a903      	add	r1, sp, #12
   d4254:	4440      	add	r0, r8
   d4256:	4e60      	ldr	r6, [pc, #384]	; (d43d8 <loop+0x1e8>)
   d4258:	f000 ffb1 	bl	d51be <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
          // connecting to beta 
          if (svcCount > 0 && foundServiceUuid == betaUuid) {
   d425c:	2800      	cmp	r0, #0
   d425e:	f000 80af 	beq.w	d43c0 <loop+0x1d0>
   d4262:	495e      	ldr	r1, [pc, #376]	; (d43dc <loop+0x1ec>)
   d4264:	a803      	add	r0, sp, #12
   d4266:	f000 fe63 	bl	d4f30 <_ZNK8particle7BleUuideqERKS0_>
   d426a:	2800      	cmp	r0, #0
   d426c:	d07f      	beq.n	d436e <loop+0x17e>
   d426e:	e05b      	b.n	d4328 <loop+0x138>
void loop() {
  /*******************************************
   *      WHEN CONNECTED TO SENSOR NODES     *
   *******************************************/
  if (alpha.connected() && beta.connected()) {
    hasReceivedData = LOW;
   d4270:	4d5b      	ldr	r5, [pc, #364]	; (d43e0 <loop+0x1f0>)
    sleepResult = System.sleep(sleepConfig); // sleep for 5 minutes
   d4272:	495c      	ldr	r1, [pc, #368]	; (d43e4 <loop+0x1f4>)
   d4274:	a803      	add	r0, sp, #12
void loop() {
  /*******************************************
   *      WHEN CONNECTED TO SENSOR NODES     *
   *******************************************/
  if (alpha.connected() && beta.connected()) {
    hasReceivedData = LOW;
   d4276:	2600      	movs	r6, #0
   d4278:	602e      	str	r6, [r5, #0]
    sleepResult = System.sleep(sleepConfig); // sleep for 5 minutes
   d427a:	f000 fc25 	bl	d4ac8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
   d427e:	4b5a      	ldr	r3, [pc, #360]	; (d43e8 <loop+0x1f8>)
   d4280:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   d4284:	809a      	strh	r2, [r3, #4]
        compatResult_ = result.compatResult_;
   d4286:	aa08      	add	r2, sp, #32
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4288:	6818      	ldr	r0, [r3, #0]
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d428a:	f852 1d0e 	ldr.w	r1, [r2, #-14]!
   d428e:	f8c3 1006 	str.w	r1, [r3, #6]
   d4292:	8892      	ldrh	r2, [r2, #4]
   d4294:	815a      	strh	r2, [r3, #10]
   d4296:	461c      	mov	r4, r3
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4298:	b110      	cbz	r0, d42a0 <loop+0xb0>
            free(wakeupSource_);
   d429a:	f000 fb8b 	bl	d49b4 <free>
            wakeupSource_ = nullptr;
   d429e:	6026      	str	r6, [r4, #0]

    SystemSleepResult& operator=(SystemSleepResult&& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
        if (result.wakeupSource_) {
   d42a0:	9b03      	ldr	r3, [sp, #12]
   d42a2:	b113      	cbz	r3, d42aa <loop+0xba>
            wakeupSource_ = result.wakeupSource_;
   d42a4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d42a6:	2300      	movs	r3, #0
   d42a8:	9303      	str	r3, [sp, #12]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d42aa:	9803      	ldr	r0, [sp, #12]
   d42ac:	b108      	cbz	r0, d42b2 <loop+0xc2>
            free(wakeupSource_);
   d42ae:	f000 fb81 	bl	d49b4 <free>
   d42b2:	6823      	ldr	r3, [r4, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
   d42b4:	2b00      	cmp	r3, #0
   d42b6:	d033      	beq.n	d4320 <loop+0x130>
     **************************************/
    if (sleepResult.wakeupReason() == SystemSleepWakeupReason::BY_BLE) {}
    /**************************************
     *        IF WOKEN UP BY RTC          *
     **************************************/
    else if (sleepResult.wakeupReason() == SystemSleepWakeupReason::BY_RTC) {
   d42b8:	889b      	ldrh	r3, [r3, #4]
   d42ba:	2b04      	cmp	r3, #4
   d42bc:	d130      	bne.n	d4320 <loop+0x130>
      // poll alpha node to measure only the sunlight and the air temperature (5 minutes)
      if (ctr < 2) {
   d42be:	4c4b      	ldr	r4, [pc, #300]	; (d43ec <loop+0x1fc>)
   d42c0:	6823      	ldr	r3, [r4, #0]
   d42c2:	2b01      	cmp	r3, #1
   d42c4:	dc16      	bgt.n	d42f4 <loop+0x104>
        strcpy(command, "1");
   d42c6:	494a      	ldr	r1, [pc, #296]	; (d43f0 <loop+0x200>)
   d42c8:	484a      	ldr	r0, [pc, #296]	; (d43f4 <loop+0x204>)
   d42ca:	f002 fe0f 	bl	d6eec <strcpy>
        memcpy(txBuf, command, sizeof(txBuf));
   d42ce:	4b49      	ldr	r3, [pc, #292]	; (d43f4 <loop+0x204>)
   d42d0:	4a49      	ldr	r2, [pc, #292]	; (d43f8 <loop+0x208>)
   d42d2:	f103 0114 	add.w	r1, r3, #20
   d42d6:	f853 0b04 	ldr.w	r0, [r3], #4
   d42da:	f842 0b04 	str.w	r0, [r2], #4
   d42de:	428b      	cmp	r3, r1
   d42e0:	d1f9      	bne.n	d42d6 <loop+0xe6>
        alphaRxCharacteristic.setValue(txBuf, sizeof(txBuf));
   d42e2:	2300      	movs	r3, #0
   d42e4:	2214      	movs	r2, #20
   d42e6:	4944      	ldr	r1, [pc, #272]	; (d43f8 <loop+0x208>)
   d42e8:	4844      	ldr	r0, [pc, #272]	; (d43fc <loop+0x20c>)
   d42ea:	f000 ffc1 	bl	d5270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        ctr++;
   d42ee:	6823      	ldr	r3, [r4, #0]
   d42f0:	3301      	adds	r3, #1
   d42f2:	e014      	b.n	d431e <loop+0x12e>
      } 
      // poll alpha node to measure every sensors (10 minutes)
      else {
        strcpy(command, "2");
   d42f4:	4942      	ldr	r1, [pc, #264]	; (d4400 <loop+0x210>)
   d42f6:	483f      	ldr	r0, [pc, #252]	; (d43f4 <loop+0x204>)
   d42f8:	f002 fdf8 	bl	d6eec <strcpy>
        memcpy(txBuf, command, sizeof(txBuf));
   d42fc:	4b3d      	ldr	r3, [pc, #244]	; (d43f4 <loop+0x204>)
   d42fe:	4a3e      	ldr	r2, [pc, #248]	; (d43f8 <loop+0x208>)
   d4300:	f103 0114 	add.w	r1, r3, #20
   d4304:	f853 0b04 	ldr.w	r0, [r3], #4
   d4308:	f842 0b04 	str.w	r0, [r2], #4
   d430c:	428b      	cmp	r3, r1
   d430e:	d1f9      	bne.n	d4304 <loop+0x114>
        alphaRxCharacteristic.setValue(txBuf, sizeof(txBuf));
   d4310:	2300      	movs	r3, #0
   d4312:	2214      	movs	r2, #20
   d4314:	4938      	ldr	r1, [pc, #224]	; (d43f8 <loop+0x208>)
   d4316:	4839      	ldr	r0, [pc, #228]	; (d43fc <loop+0x20c>)
   d4318:	f000 ffaa 	bl	d5270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        ctr = 1;
   d431c:	2301      	movs	r3, #1
   d431e:	6023      	str	r3, [r4, #0]
      }
    }
    while (!hasReceivedData); // Stay awake until it receives a response
   d4320:	682b      	ldr	r3, [r5, #0]
   d4322:	2b00      	cmp	r3, #0
   d4324:	d14e      	bne.n	d43c4 <loop+0x1d4>
   d4326:	e7fe      	b.n	d4326 <loop+0x136>
        for (uint8_t ii = 0; ii < count; ii++) {
          BleUuid foundServiceUuid;
          size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
          // connecting to beta 
          if (svcCount > 0 && foundServiceUuid == betaUuid) {
            beta = BLE.connect(scanResults[ii].address);
   d4328:	f001 f912 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d432c:	4434      	add	r4, r6
   d432e:	2301      	movs	r3, #1
   d4330:	4622      	mov	r2, r4
   d4332:	4601      	mov	r1, r0
   d4334:	a801      	add	r0, sp, #4
   d4336:	f001 fe1f 	bl	d5f78 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d433a:	a901      	add	r1, sp, #4
   d433c:	4824      	ldr	r0, [pc, #144]	; (d43d0 <loop+0x1e0>)
   d433e:	f001 fa96 	bl	d586e <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4342:	a801      	add	r0, sp, #4
   d4344:	f001 f9b6 	bl	d56b4 <_ZN8particle13BlePeerDeviceD1Ev>
            if (beta.connected()) {
   d4348:	4821      	ldr	r0, [pc, #132]	; (d43d0 <loop+0x1e0>)
   d434a:	f001 f8a1 	bl	d5490 <_ZNK8particle13BlePeerDevice9connectedEv>
   d434e:	2800      	cmp	r0, #0
   d4350:	d038      	beq.n	d43c4 <loop+0x1d4>
              betaAddress = scanResults[ii].address;
   d4352:	4622      	mov	r2, r4
   d4354:	ca03      	ldmia	r2!, {r0, r1}
   d4356:	4b2b      	ldr	r3, [pc, #172]	; (d4404 <loop+0x214>)
              beta.getCharacteristicByUUID(betaTxCharacteristic, betaTxUuid);
   d4358:	4a2b      	ldr	r2, [pc, #172]	; (d4408 <loop+0x218>)
          size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
          // connecting to beta 
          if (svcCount > 0 && foundServiceUuid == betaUuid) {
            beta = BLE.connect(scanResults[ii].address);
            if (beta.connected()) {
              betaAddress = scanResults[ii].address;
   d435a:	6018      	str	r0, [r3, #0]
   d435c:	6059      	str	r1, [r3, #4]
              beta.getCharacteristicByUUID(betaTxCharacteristic, betaTxUuid);
   d435e:	481c      	ldr	r0, [pc, #112]	; (d43d0 <loop+0x1e0>)
   d4360:	492a      	ldr	r1, [pc, #168]	; (d440c <loop+0x21c>)
   d4362:	f001 fa60 	bl	d5826 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
              beta.getCharacteristicByUUID(betaRxCharacteristic, betaRxUuid);
   d4366:	4a2a      	ldr	r2, [pc, #168]	; (d4410 <loop+0x220>)
   d4368:	492a      	ldr	r1, [pc, #168]	; (d4414 <loop+0x224>)
   d436a:	4819      	ldr	r0, [pc, #100]	; (d43d0 <loop+0x1e0>)
   d436c:	e025      	b.n	d43ba <loop+0x1ca>
            }
          break;
          }
          // connecting to alpha
          else if (svcCount > 0 && foundServiceUuid == alphaUuid) {
   d436e:	492a      	ldr	r1, [pc, #168]	; (d4418 <loop+0x228>)
   d4370:	a803      	add	r0, sp, #12
   d4372:	f000 fddd 	bl	d4f30 <_ZNK8particle7BleUuideqERKS0_>
   d4376:	b318      	cbz	r0, d43c0 <loop+0x1d0>
            alpha = BLE.connect(scanResults[ii].address); 
   d4378:	f001 f8ea 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d437c:	4434      	add	r4, r6
   d437e:	2301      	movs	r3, #1
   d4380:	4622      	mov	r2, r4
   d4382:	4601      	mov	r1, r0
   d4384:	a801      	add	r0, sp, #4
   d4386:	f001 fdf7 	bl	d5f78 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d438a:	a901      	add	r1, sp, #4
   d438c:	480f      	ldr	r0, [pc, #60]	; (d43cc <loop+0x1dc>)
   d438e:	f001 fa6e 	bl	d586e <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4392:	a801      	add	r0, sp, #4
   d4394:	f001 f98e 	bl	d56b4 <_ZN8particle13BlePeerDeviceD1Ev>
            if (alpha.connected()) {
   d4398:	480c      	ldr	r0, [pc, #48]	; (d43cc <loop+0x1dc>)
   d439a:	f001 f879 	bl	d5490 <_ZNK8particle13BlePeerDevice9connectedEv>
   d439e:	b188      	cbz	r0, d43c4 <loop+0x1d4>
              alphaAddress = scanResults[ii].address;
   d43a0:	4622      	mov	r2, r4
   d43a2:	ca03      	ldmia	r2!, {r0, r1}
   d43a4:	4b1d      	ldr	r3, [pc, #116]	; (d441c <loop+0x22c>)
              alpha.getCharacteristicByUUID(alphaTxCharacteristic, alphaTxUuid);
   d43a6:	4a1e      	ldr	r2, [pc, #120]	; (d4420 <loop+0x230>)
          }
          // connecting to alpha
          else if (svcCount > 0 && foundServiceUuid == alphaUuid) {
            alpha = BLE.connect(scanResults[ii].address); 
            if (alpha.connected()) {
              alphaAddress = scanResults[ii].address;
   d43a8:	6018      	str	r0, [r3, #0]
   d43aa:	6059      	str	r1, [r3, #4]
              alpha.getCharacteristicByUUID(alphaTxCharacteristic, alphaTxUuid);
   d43ac:	4807      	ldr	r0, [pc, #28]	; (d43cc <loop+0x1dc>)
   d43ae:	491d      	ldr	r1, [pc, #116]	; (d4424 <loop+0x234>)
   d43b0:	f001 fa39 	bl	d5826 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
              alpha.getCharacteristicByUUID(alphaRxCharacteristic, alphaRxUuid);
   d43b4:	4a1c      	ldr	r2, [pc, #112]	; (d4428 <loop+0x238>)
   d43b6:	4911      	ldr	r1, [pc, #68]	; (d43fc <loop+0x20c>)
   d43b8:	4804      	ldr	r0, [pc, #16]	; (d43cc <loop+0x1dc>)
   d43ba:	f001 fa34 	bl	d5826 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
          }
        }
      }
    }
  }   
   d43be:	e001      	b.n	d43c4 <loop+0x1d4>
   d43c0:	3501      	adds	r5, #1
    if (millis() - lastScan >= SCAN_PERIOD_MS) {
      lastScan = millis();
      size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
      if (count > 0) {
        // scanning surrounding ble devices 
        for (uint8_t ii = 0; ii < count; ii++) {
   d43c2:	e73a      	b.n	d423a <loop+0x4a>
          }
        }
      }
    }
  }   
   d43c4:	b008      	add	sp, #32
   d43c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d43ca:	bf00      	nop
   d43cc:	2003dc68 	.word	0x2003dc68
   d43d0:	2003e3bc 	.word	0x2003e3bc
   d43d4:	2003dcdc 	.word	0x2003dcdc
   d43d8:	2003dd04 	.word	0x2003dd04
   d43dc:	2003dcc8 	.word	0x2003dcc8
   d43e0:	2003dce0 	.word	0x2003dce0
   d43e4:	2003dc50 	.word	0x2003dc50
   d43e8:	2003dce4 	.word	0x2003dce4
   d43ec:	2003dbe0 	.word	0x2003dbe0
   d43f0:	000d7292 	.word	0x000d7292
   d43f4:	2003dcf0 	.word	0x2003dcf0
   d43f8:	2003dc70 	.word	0x2003dc70
   d43fc:	2003e3b4 	.word	0x2003e3b4
   d4400:	000d6f38 	.word	0x000d6f38
   d4404:	2003e3a4 	.word	0x2003e3a4
   d4408:	2003e3d8 	.word	0x2003e3d8
   d440c:	2003e394 	.word	0x2003e394
   d4410:	2003e3c4 	.word	0x2003e3c4
   d4414:	2003e3ac 	.word	0x2003e3ac
   d4418:	2003dc84 	.word	0x2003dc84
   d441c:	2003dcc0 	.word	0x2003dcc0
   d4420:	2003dcac 	.word	0x2003dcac
   d4424:	2003e39c 	.word	0x2003e39c
   d4428:	2003dc98 	.word	0x2003dc98

000d442c <_GLOBAL__sub_I_hasReceivedData>:
   d442c:	b538      	push	{r3, r4, r5, lr}
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d442e:	4c41      	ldr	r4, [pc, #260]	; (d4534 <_GLOBAL__sub_I_hasReceivedData+0x108>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4430:	f000 f8c8 	bl	d45c4 <HAL_Pin_Map>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4434:	2510      	movs	r5, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d4436:	1d20      	adds	r0, r4, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4438:	462a      	mov	r2, r5
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   d443a:	6020      	str	r0, [r4, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d443c:	2100      	movs	r1, #0
   d443e:	f002 fd24 	bl	d6e8a <memset>
   d4442:	2301      	movs	r3, #1
   d4444:	7523      	strb	r3, [r4, #20]
char command[20]; 

/********************************************************
 *                  SLEEP VARS                          *
 *******************************************************/
SystemSleepConfiguration sleepConfig; 
   d4446:	4a3c      	ldr	r2, [pc, #240]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d4448:	493c      	ldr	r1, [pc, #240]	; (d453c <_GLOBAL__sub_I_hasReceivedData+0x110>)
        config_.size = sizeof(hal_sleep_config_t);
   d444a:	80a5      	strh	r5, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
   d444c:	2302      	movs	r3, #2
   d444e:	4620      	mov	r0, r4
   d4450:	80e3      	strh	r3, [r4, #6]
   d4452:	f002 fb6f 	bl	d6b34 <__aeabi_atexit>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4456:	483a      	ldr	r0, [pc, #232]	; (d4540 <_GLOBAL__sub_I_hasReceivedData+0x114>)
SystemSleepResult sleepResult;
   d4458:	4a37      	ldr	r2, [pc, #220]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d445a:	493a      	ldr	r1, [pc, #232]	; (d4544 <_GLOBAL__sub_I_hasReceivedData+0x118>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d445c:	4d3a      	ldr	r5, [pc, #232]	; (d4548 <_GLOBAL__sub_I_hasReceivedData+0x11c>)
   d445e:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4460:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4464:	7184      	strb	r4, [r0, #6]
   d4466:	8104      	strh	r4, [r0, #8]
   d4468:	8143      	strh	r3, [r0, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d446a:	6004      	str	r4, [r0, #0]
   d446c:	8084      	strh	r4, [r0, #4]
   d446e:	f002 fb61 	bl	d6b34 <__aeabi_atexit>
   d4472:	1928      	adds	r0, r5, r4
   d4474:	f000 fcaa 	bl	d4dcc <_ZN8particle10BleAddressC1Ev>
   d4478:	f104 0008 	add.w	r0, r4, #8
   d447c:	4428      	add	r0, r5
   d447e:	f000 fe47 	bl	d5110 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4482:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4486:	4428      	add	r0, r5
   d4488:	3454      	adds	r4, #84	; 0x54
   d448a:	f000 fe41 	bl	d5110 <_ZN8particle18BleAdvertisingDataC1Ev>
 *                    BLE VARS                          *
 *******************************************************/
const size_t SCAN_RESULT_COUNT = 20;
const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;
BleScanResult scanResults[SCAN_RESULT_COUNT];
   d448e:	f5b4 6fd2 	cmp.w	r4, #1680	; 0x690
   d4492:	d1ee      	bne.n	d4472 <_GLOBAL__sub_I_hasReceivedData+0x46>
// UUIDs
const BleUuid betaUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4494:	492d      	ldr	r1, [pc, #180]	; (d454c <_GLOBAL__sub_I_hasReceivedData+0x120>)
   d4496:	482e      	ldr	r0, [pc, #184]	; (d4550 <_GLOBAL__sub_I_hasReceivedData+0x124>)
   d4498:	f000 fdc0 	bl	d501c <_ZN8particle7BleUuidC1EPKc>
const BleUuid alphaUuid("7E400001-B5A3-F393-E0A9-E50E24DCCA9E"); 
   d449c:	492d      	ldr	r1, [pc, #180]	; (d4554 <_GLOBAL__sub_I_hasReceivedData+0x128>)
   d449e:	482e      	ldr	r0, [pc, #184]	; (d4558 <_GLOBAL__sub_I_hasReceivedData+0x12c>)
   d44a0:	f000 fdbc 	bl	d501c <_ZN8particle7BleUuidC1EPKc>
const BleUuid betaRxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d44a4:	492d      	ldr	r1, [pc, #180]	; (d455c <_GLOBAL__sub_I_hasReceivedData+0x130>)
   d44a6:	482e      	ldr	r0, [pc, #184]	; (d4560 <_GLOBAL__sub_I_hasReceivedData+0x134>)
   d44a8:	f000 fdb8 	bl	d501c <_ZN8particle7BleUuidC1EPKc>
const BleUuid betaTxUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d44ac:	492d      	ldr	r1, [pc, #180]	; (d4564 <_GLOBAL__sub_I_hasReceivedData+0x138>)
   d44ae:	482e      	ldr	r0, [pc, #184]	; (d4568 <_GLOBAL__sub_I_hasReceivedData+0x13c>)
   d44b0:	f000 fdb4 	bl	d501c <_ZN8particle7BleUuidC1EPKc>
const BleUuid alphaRxUuid("7E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d44b4:	492d      	ldr	r1, [pc, #180]	; (d456c <_GLOBAL__sub_I_hasReceivedData+0x140>)
   d44b6:	482e      	ldr	r0, [pc, #184]	; (d4570 <_GLOBAL__sub_I_hasReceivedData+0x144>)
   d44b8:	f000 fdb0 	bl	d501c <_ZN8particle7BleUuidC1EPKc>
const BleUuid alphaTxUuid("7E400003-B5A3-F393-E0A9-E50E24DCCA9E"); 
   d44bc:	492d      	ldr	r1, [pc, #180]	; (d4574 <_GLOBAL__sub_I_hasReceivedData+0x148>)
   d44be:	482e      	ldr	r0, [pc, #184]	; (d4578 <_GLOBAL__sub_I_hasReceivedData+0x14c>)
   d44c0:	f000 fdac 	bl	d501c <_ZN8particle7BleUuidC1EPKc>
// Characteristcis, peer devices and addresses
BleCharacteristic betaTxCharacteristic;
   d44c4:	482d      	ldr	r0, [pc, #180]	; (d457c <_GLOBAL__sub_I_hasReceivedData+0x150>)
   d44c6:	f001 fdbb 	bl	d6040 <_ZN8particle17BleCharacteristicC1Ev>
   d44ca:	4a1b      	ldr	r2, [pc, #108]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d44cc:	492c      	ldr	r1, [pc, #176]	; (d4580 <_GLOBAL__sub_I_hasReceivedData+0x154>)
   d44ce:	482b      	ldr	r0, [pc, #172]	; (d457c <_GLOBAL__sub_I_hasReceivedData+0x150>)
   d44d0:	f002 fb30 	bl	d6b34 <__aeabi_atexit>
BleCharacteristic betaRxCharacteristic;
   d44d4:	482b      	ldr	r0, [pc, #172]	; (d4584 <_GLOBAL__sub_I_hasReceivedData+0x158>)
   d44d6:	f001 fdb3 	bl	d6040 <_ZN8particle17BleCharacteristicC1Ev>
   d44da:	4a17      	ldr	r2, [pc, #92]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d44dc:	4928      	ldr	r1, [pc, #160]	; (d4580 <_GLOBAL__sub_I_hasReceivedData+0x154>)
   d44de:	4829      	ldr	r0, [pc, #164]	; (d4584 <_GLOBAL__sub_I_hasReceivedData+0x158>)
   d44e0:	f002 fb28 	bl	d6b34 <__aeabi_atexit>
BleCharacteristic alphaTxCharacteristic;
   d44e4:	4828      	ldr	r0, [pc, #160]	; (d4588 <_GLOBAL__sub_I_hasReceivedData+0x15c>)
   d44e6:	f001 fdab 	bl	d6040 <_ZN8particle17BleCharacteristicC1Ev>
   d44ea:	4a13      	ldr	r2, [pc, #76]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d44ec:	4924      	ldr	r1, [pc, #144]	; (d4580 <_GLOBAL__sub_I_hasReceivedData+0x154>)
   d44ee:	4826      	ldr	r0, [pc, #152]	; (d4588 <_GLOBAL__sub_I_hasReceivedData+0x15c>)
   d44f0:	f002 fb20 	bl	d6b34 <__aeabi_atexit>
BleCharacteristic alphaRxCharacteristic;
   d44f4:	4825      	ldr	r0, [pc, #148]	; (d458c <_GLOBAL__sub_I_hasReceivedData+0x160>)
   d44f6:	f001 fda3 	bl	d6040 <_ZN8particle17BleCharacteristicC1Ev>
   d44fa:	4a0f      	ldr	r2, [pc, #60]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d44fc:	4920      	ldr	r1, [pc, #128]	; (d4580 <_GLOBAL__sub_I_hasReceivedData+0x154>)
   d44fe:	4823      	ldr	r0, [pc, #140]	; (d458c <_GLOBAL__sub_I_hasReceivedData+0x160>)
   d4500:	f002 fb18 	bl	d6b34 <__aeabi_atexit>
BlePeerDevice beta;
   d4504:	4822      	ldr	r0, [pc, #136]	; (d4590 <_GLOBAL__sub_I_hasReceivedData+0x164>)
   d4506:	f001 f92f 	bl	d5768 <_ZN8particle13BlePeerDeviceC1Ev>
   d450a:	4a0b      	ldr	r2, [pc, #44]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d450c:	4921      	ldr	r1, [pc, #132]	; (d4594 <_GLOBAL__sub_I_hasReceivedData+0x168>)
   d450e:	4820      	ldr	r0, [pc, #128]	; (d4590 <_GLOBAL__sub_I_hasReceivedData+0x164>)
   d4510:	f002 fb10 	bl	d6b34 <__aeabi_atexit>
BlePeerDevice alpha; 
   d4514:	4820      	ldr	r0, [pc, #128]	; (d4598 <_GLOBAL__sub_I_hasReceivedData+0x16c>)
   d4516:	f001 f927 	bl	d5768 <_ZN8particle13BlePeerDeviceC1Ev>
   d451a:	4a07      	ldr	r2, [pc, #28]	; (d4538 <_GLOBAL__sub_I_hasReceivedData+0x10c>)
   d451c:	491d      	ldr	r1, [pc, #116]	; (d4594 <_GLOBAL__sub_I_hasReceivedData+0x168>)
   d451e:	481e      	ldr	r0, [pc, #120]	; (d4598 <_GLOBAL__sub_I_hasReceivedData+0x16c>)
   d4520:	f002 fb08 	bl	d6b34 <__aeabi_atexit>
BleAddress betaAddress;
   d4524:	481d      	ldr	r0, [pc, #116]	; (d459c <_GLOBAL__sub_I_hasReceivedData+0x170>)
   d4526:	f000 fc51 	bl	d4dcc <_ZN8particle10BleAddressC1Ev>
BleAddress alphaAddress;
   d452a:	481d      	ldr	r0, [pc, #116]	; (d45a0 <_GLOBAL__sub_I_hasReceivedData+0x174>)
          }
        }
      }
    }
  }   
   d452c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
BleCharacteristic alphaTxCharacteristic;
BleCharacteristic alphaRxCharacteristic;
BlePeerDevice beta;
BlePeerDevice alpha; 
BleAddress betaAddress;
BleAddress alphaAddress;
   d4530:	f000 bc4c 	b.w	d4dcc <_ZN8particle10BleAddressC1Ev>
   d4534:	2003dc50 	.word	0x2003dc50
   d4538:	2003dc4c 	.word	0x2003dc4c
   d453c:	000d40f1 	.word	0x000d40f1
   d4540:	2003dce4 	.word	0x2003dce4
   d4544:	000d4109 	.word	0x000d4109
   d4548:	2003dd04 	.word	0x2003dd04
   d454c:	000d6f3a 	.word	0x000d6f3a
   d4550:	2003dcc8 	.word	0x2003dcc8
   d4554:	000d6f5f 	.word	0x000d6f5f
   d4558:	2003dc84 	.word	0x2003dc84
   d455c:	000d6f84 	.word	0x000d6f84
   d4560:	2003e3c4 	.word	0x2003e3c4
   d4564:	000d6fa9 	.word	0x000d6fa9
   d4568:	2003e3d8 	.word	0x2003e3d8
   d456c:	000d6fce 	.word	0x000d6fce
   d4570:	2003dc98 	.word	0x2003dc98
   d4574:	000d6ff3 	.word	0x000d6ff3
   d4578:	2003dcac 	.word	0x2003dcac
   d457c:	2003e394 	.word	0x2003e394
   d4580:	000d56a7 	.word	0x000d56a7
   d4584:	2003e3ac 	.word	0x2003e3ac
   d4588:	2003e39c 	.word	0x2003e39c
   d458c:	2003e3b4 	.word	0x2003e3b4
   d4590:	2003e3bc 	.word	0x2003e3bc
   d4594:	000d56b5 	.word	0x000d56b5
   d4598:	2003dc68 	.word	0x2003dc68
   d459c:	2003e3a4 	.word	0x2003e3a4
   d45a0:	2003dcc0 	.word	0x2003dcc0

000d45a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <netdb_freeaddrinfo+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	689b      	ldr	r3, [r3, #8]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030268 	.word	0x00030268

000d45b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <netdb_getaddrinfo+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	68db      	ldr	r3, [r3, #12]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030268 	.word	0x00030268

000d45c4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_Pin_Map+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	681b      	ldr	r3, [r3, #0]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003022c 	.word	0x0003022c

000d45d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_RNG_GetRandomNumber+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	685b      	ldr	r3, [r3, #4]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030218 	.word	0x00030218

000d45e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_Delay_Microseconds+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030218 	.word	0x00030218

000d45f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	695b      	ldr	r3, [r3, #20]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030218 	.word	0x00030218

000d4604 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <hal_ble_stack_init+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	689b      	ldr	r3, [r3, #8]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030278 	.word	0x00030278

000d4614 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <hal_ble_gap_start_scan+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030278 	.word	0x00030278

000d4624 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b03      	ldr	r3, [pc, #12]	; (d4634 <hal_ble_gap_stop_scan+0x10>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d462e:	9301      	str	r3, [sp, #4]
   d4630:	bd08      	pop	{r3, pc}
   d4632:	0000      	.short	0x0000
   d4634:	00030278 	.word	0x00030278

000d4638 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b03      	ldr	r3, [pc, #12]	; (d4648 <hal_ble_gap_disconnect+0x10>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4642:	9301      	str	r3, [sp, #4]
   d4644:	bd08      	pop	{r3, pc}
   d4646:	0000      	.short	0x0000
   d4648:	00030278 	.word	0x00030278

000d464c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b03      	ldr	r3, [pc, #12]	; (d465c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4656:	9301      	str	r3, [sp, #4]
   d4658:	bd08      	pop	{r3, pc}
   d465a:	0000      	.short	0x0000
   d465c:	00030278 	.word	0x00030278

000d4660 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b03      	ldr	r3, [pc, #12]	; (d4670 <hal_ble_gatt_client_discover_all_services+0x10>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d466a:	9301      	str	r3, [sp, #4]
   d466c:	bd08      	pop	{r3, pc}
   d466e:	0000      	.short	0x0000
   d4670:	00030278 	.word	0x00030278

000d4674 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b03      	ldr	r3, [pc, #12]	; (d4684 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d467e:	9301      	str	r3, [sp, #4]
   d4680:	bd08      	pop	{r3, pc}
   d4682:	0000      	.short	0x0000
   d4684:	00030278 	.word	0x00030278

000d4688 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b03      	ldr	r3, [pc, #12]	; (d4698 <hal_ble_gatt_client_write_with_response+0x10>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4692:	9301      	str	r3, [sp, #4]
   d4694:	bd08      	pop	{r3, pc}
   d4696:	0000      	.short	0x0000
   d4698:	00030278 	.word	0x00030278

000d469c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b03      	ldr	r3, [pc, #12]	; (d46ac <hal_ble_gatt_client_write_without_response+0x10>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d46a6:	9301      	str	r3, [sp, #4]
   d46a8:	bd08      	pop	{r3, pc}
   d46aa:	0000      	.short	0x0000
   d46ac:	00030278 	.word	0x00030278

000d46b0 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b03      	ldr	r3, [pc, #12]	; (d46c0 <hal_ble_gatt_client_read+0x10>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d46ba:	9301      	str	r3, [sp, #4]
   d46bc:	bd08      	pop	{r3, pc}
   d46be:	0000      	.short	0x0000
   d46c0:	00030278 	.word	0x00030278

000d46c4 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b03      	ldr	r3, [pc, #12]	; (d46d4 <hal_ble_gap_connect+0x10>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d46ce:	9301      	str	r3, [sp, #4]
   d46d0:	bd08      	pop	{r3, pc}
   d46d2:	0000      	.short	0x0000
   d46d4:	00030278 	.word	0x00030278

000d46d8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b03      	ldr	r3, [pc, #12]	; (d46e8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d46e2:	9301      	str	r3, [sp, #4]
   d46e4:	bd08      	pop	{r3, pc}
   d46e6:	0000      	.short	0x0000
   d46e8:	00030278 	.word	0x00030278

000d46ec <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b03      	ldr	r3, [pc, #12]	; (d46fc <hal_ble_gatt_client_configure_cccd+0x10>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d46f6:	9301      	str	r3, [sp, #4]
   d46f8:	bd08      	pop	{r3, pc}
   d46fa:	0000      	.short	0x0000
   d46fc:	00030278 	.word	0x00030278

000d4700 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b03      	ldr	r3, [pc, #12]	; (d4710 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d470a:	9301      	str	r3, [sp, #4]
   d470c:	bd08      	pop	{r3, pc}
   d470e:	0000      	.short	0x0000
   d4710:	00030278 	.word	0x00030278

000d4714 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b03      	ldr	r3, [pc, #12]	; (d4724 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d471e:	9301      	str	r3, [sp, #4]
   d4720:	bd08      	pop	{r3, pc}
   d4722:	0000      	.short	0x0000
   d4724:	00030278 	.word	0x00030278

000d4728 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <os_thread_is_current+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	689b      	ldr	r3, [r3, #8]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030248 	.word	0x00030248

000d4738 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <os_thread_join+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	691b      	ldr	r3, [r3, #16]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030248 	.word	0x00030248

000d4748 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <os_thread_cleanup+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	695b      	ldr	r3, [r3, #20]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030248 	.word	0x00030248

000d4758 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <os_mutex_recursive_create+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030248 	.word	0x00030248

000d4768 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <os_mutex_recursive_destroy+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030248 	.word	0x00030248

000d4778 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <os_mutex_recursive_lock+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030248 	.word	0x00030248

000d4788 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <os_mutex_recursive_unlock+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030248 	.word	0x00030248

000d4798 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <inet_inet_ntop+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	695b      	ldr	r3, [r3, #20]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030264 	.word	0x00030264

000d47a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_USART_Init+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	681b      	ldr	r3, [r3, #0]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	0003023c 	.word	0x0003023c

000d47b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_USART_Write_Data+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	68db      	ldr	r3, [r3, #12]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003023c 	.word	0x0003023c

000d47c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_USART_Available_Data+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	691b      	ldr	r3, [r3, #16]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003023c 	.word	0x0003023c

000d47d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <HAL_USART_Read_Data+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	695b      	ldr	r3, [r3, #20]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	0003023c 	.word	0x0003023c

000d47e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <HAL_USART_Peek_Data+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	699b      	ldr	r3, [r3, #24]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	0003023c 	.word	0x0003023c

000d47f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <HAL_USART_Flush_Data+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	69db      	ldr	r3, [r3, #28]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	0003023c 	.word	0x0003023c

000d4808 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_USART_Available_Data_For_Write+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003023c 	.word	0x0003023c

000d4818 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_USB_USART_Init+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	681b      	ldr	r3, [r3, #0]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003024c 	.word	0x0003024c

000d4828 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_USB_USART_Begin+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	685b      	ldr	r3, [r3, #4]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003024c 	.word	0x0003024c

000d4838 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_USB_USART_Available_Data+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003024c 	.word	0x0003024c

000d4848 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003024c 	.word	0x0003024c

000d4858 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USB_USART_Receive_Data+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	699b      	ldr	r3, [r3, #24]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003024c 	.word	0x0003024c

000d4868 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USB_USART_Send_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	69db      	ldr	r3, [r3, #28]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003024c 	.word	0x0003024c

000d4878 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USB_USART_Flush_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6a1b      	ldr	r3, [r3, #32]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003024c 	.word	0x0003024c

000d4888 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <panic_+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030260 	.word	0x00030260

000d4898 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <log_message+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030260 	.word	0x00030260

000d48a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <set_system_mode+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	685b      	ldr	r3, [r3, #4]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030220 	.word	0x00030220

000d48b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b03      	ldr	r3, [pc, #12]	; (d48c8 <system_ctrl_set_app_request_handler+0x10>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48c2:	9301      	str	r3, [sp, #4]
   d48c4:	bd08      	pop	{r3, pc}
   d48c6:	0000      	.short	0x0000
   d48c8:	00030220 	.word	0x00030220

000d48cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b03      	ldr	r3, [pc, #12]	; (d48dc <system_ctrl_set_result+0x10>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48d6:	9301      	str	r3, [sp, #4]
   d48d8:	bd08      	pop	{r3, pc}
   d48da:	0000      	.short	0x0000
   d48dc:	00030220 	.word	0x00030220

000d48e0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b03      	ldr	r3, [pc, #12]	; (d48f0 <system_sleep_ext+0x10>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d48ea:	9301      	str	r3, [sp, #4]
   d48ec:	bd08      	pop	{r3, pc}
   d48ee:	0000      	.short	0x0000
   d48f0:	00030220 	.word	0x00030220

000d48f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <network_connect+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	685b      	ldr	r3, [r3, #4]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030240 	.word	0x00030240

000d4904 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <network_connecting+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	689b      	ldr	r3, [r3, #8]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030240 	.word	0x00030240

000d4914 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <network_disconnect+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	68db      	ldr	r3, [r3, #12]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030240 	.word	0x00030240

000d4924 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_ready+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	691b      	ldr	r3, [r3, #16]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_on+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	695b      	ldr	r3, [r3, #20]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_off+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	699b      	ldr	r3, [r3, #24]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_listen+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	69db      	ldr	r3, [r3, #28]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_listening+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6a1b      	ldr	r3, [r3, #32]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_set_listen_timeout+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_get_listen_timeout+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030244 	.word	0x00030244

000d49a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <malloc+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	681b      	ldr	r3, [r3, #0]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	0003021c 	.word	0x0003021c

000d49b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <free+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	685b      	ldr	r3, [r3, #4]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003021c 	.word	0x0003021c

000d49c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <realloc+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	689b      	ldr	r3, [r3, #8]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003021c 	.word	0x0003021c

000d49d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d49d4:	2200      	movs	r2, #0
   d49d6:	4611      	mov	r1, r2
   d49d8:	6840      	ldr	r0, [r0, #4]
   d49da:	f7ff bfc3 	b.w	d4964 <network_listening>

000d49de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d49de:	2200      	movs	r2, #0
   d49e0:	4611      	mov	r1, r2
   d49e2:	6840      	ldr	r0, [r0, #4]
   d49e4:	f7ff bfce 	b.w	d4984 <network_get_listen_timeout>

000d49e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d49e8:	2200      	movs	r2, #0
   d49ea:	6840      	ldr	r0, [r0, #4]
   d49ec:	f7ff bfc2 	b.w	d4974 <network_set_listen_timeout>

000d49f0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d49f0:	2200      	movs	r2, #0
   d49f2:	f081 0101 	eor.w	r1, r1, #1
   d49f6:	6840      	ldr	r0, [r0, #4]
   d49f8:	f7ff bfac 	b.w	d4954 <network_listen>

000d49fc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d49fc:	2300      	movs	r3, #0
   d49fe:	461a      	mov	r2, r3
   d4a00:	4619      	mov	r1, r3
   d4a02:	6840      	ldr	r0, [r0, #4]
   d4a04:	f7ff bf9e 	b.w	d4944 <network_off>

000d4a08 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a08:	2300      	movs	r3, #0
   d4a0a:	461a      	mov	r2, r3
   d4a0c:	4619      	mov	r1, r3
   d4a0e:	6840      	ldr	r0, [r0, #4]
   d4a10:	f7ff bf90 	b.w	d4934 <network_on>

000d4a14 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a14:	2200      	movs	r2, #0
   d4a16:	4611      	mov	r1, r2
   d4a18:	6840      	ldr	r0, [r0, #4]
   d4a1a:	f7ff bf83 	b.w	d4924 <network_ready>

000d4a1e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a1e:	2200      	movs	r2, #0
   d4a20:	4611      	mov	r1, r2
   d4a22:	6840      	ldr	r0, [r0, #4]
   d4a24:	f7ff bf6e 	b.w	d4904 <network_connecting>

000d4a28 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a28:	2200      	movs	r2, #0
   d4a2a:	2102      	movs	r1, #2
   d4a2c:	6840      	ldr	r0, [r0, #4]
   d4a2e:	f7ff bf71 	b.w	d4914 <network_disconnect>

000d4a32 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a32:	2300      	movs	r3, #0
   d4a34:	461a      	mov	r2, r3
   d4a36:	6840      	ldr	r0, [r0, #4]
   d4a38:	f7ff bf5c 	b.w	d48f4 <network_connect>

000d4a3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a3c:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a3e:	2203      	movs	r2, #3
   d4a40:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a42:	4a02      	ldr	r2, [pc, #8]	; (d4a4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a44:	601a      	str	r2, [r3, #0]
   d4a46:	4770      	bx	lr
   d4a48:	2003e3ec 	.word	0x2003e3ec
   d4a4c:	000d7020 	.word	0x000d7020

000d4a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4a50:	b510      	push	{r4, lr}
   d4a52:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4a54:	6800      	ldr	r0, [r0, #0]
   d4a56:	b118      	cbz	r0, d4a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4a58:	f7ff ffac 	bl	d49b4 <free>
            wakeupSource_ = nullptr;
   d4a5c:	2300      	movs	r3, #0
   d4a5e:	6023      	str	r3, [r4, #0]
   d4a60:	bd10      	pop	{r4, pc}

000d4a62 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4a62:	b510      	push	{r4, lr}
   d4a64:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4a66:	f7ff fff3 	bl	d4a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	bd10      	pop	{r4, pc}

000d4a6e <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4a6e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d4a70:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d4a74:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d4a76:	460b      	mov	r3, r1
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4a78:	460d      	mov	r5, r1
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d4a7a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d4a7e:	f8c0 2006 	str.w	r2, [r0, #6]
   d4a82:	889b      	ldrh	r3, [r3, #4]
   d4a84:	8143      	strh	r3, [r0, #10]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d4a86:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
        freeWakeupSourceMemory();
   d4a88:	f7ff ffe2 	bl	d4a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
   d4a8c:	682b      	ldr	r3, [r5, #0]
   d4a8e:	b113      	cbz	r3, d4a96 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d4a90:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d4a92:	2300      	movs	r3, #0
   d4a94:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
   d4a96:	4620      	mov	r0, r4
   d4a98:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a9c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d4a9c:	b538      	push	{r3, r4, r5, lr}
   d4a9e:	460c      	mov	r4, r1
   d4aa0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d4aa2:	f7ff ffd5 	bl	d4a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
   d4aa6:	b144      	cbz	r4, d4aba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d4aa8:	8820      	ldrh	r0, [r4, #0]
   d4aaa:	f7ff ff7b 	bl	d49a4 <malloc>
   d4aae:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d4ab0:	b128      	cbz	r0, d4abe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d4ab2:	8822      	ldrh	r2, [r4, #0]
   d4ab4:	4621      	mov	r1, r4
   d4ab6:	f002 f9c2 	bl	d6e3e <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d4aba:	2000      	movs	r0, #0
   d4abc:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
   d4abe:	4801      	ldr	r0, [pc, #4]	; (d4ac4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d4ac0:	bd38      	pop	{r3, r4, r5, pc}
   d4ac2:	bf00      	nop
   d4ac4:	fffffefc 	.word	0xfffffefc

000d4ac8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
   d4ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4aca:	4d30      	ldr	r5, [pc, #192]	; (d4b8c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d4acc:	7d0b      	ldrb	r3, [r1, #20]
   d4ace:	4604      	mov	r4, r0
   d4ad0:	b08b      	sub	sp, #44	; 0x2c
   d4ad2:	4608      	mov	r0, r1
   d4ad4:	1daf      	adds	r7, r5, #6
   d4ad6:	b313      	cbz	r3, d4b1e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
   d4ad8:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d4ada:	791b      	ldrb	r3, [r3, #4]
   d4adc:	b1fb      	cbz	r3, d4b1e <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ade:	2200      	movs	r2, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d4ae4:	a902      	add	r1, sp, #8
   d4ae6:	3004      	adds	r0, #4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ae8:	9202      	str	r2, [sp, #8]
   d4aea:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4aee:	f88d 200e 	strb.w	r2, [sp, #14]
   d4af2:	f8ad 2010 	strh.w	r2, [sp, #16]
   d4af6:	f8ad 3012 	strh.w	r3, [sp, #18]
   d4afa:	f7ff fef1 	bl	d48e0 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d4afe:	ab0a      	add	r3, sp, #40	; 0x28
        result.setError(static_cast<system_error_t>(ret));
   d4b00:	b200      	sxth	r0, r0
   d4b02:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
   d4b06:	f8ad 000c 	strh.w	r0, [sp, #12]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d4b0a:	889b      	ldrh	r3, [r3, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
   d4b0c:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
   d4b0e:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
   d4b12:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
   d4b14:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d4b16:	4628      	mov	r0, r5
   d4b18:	f7ff ffc0 	bl	d4a9c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
   d4b1c:	e01c      	b.n	d4b58 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
   d4b1e:	2320      	movs	r3, #32
   d4b20:	2600      	movs	r6, #0
   d4b22:	9302      	str	r3, [sp, #8]
   d4b24:	4b1a      	ldr	r3, [pc, #104]	; (d4b90 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
   d4b26:	9300      	str	r3, [sp, #0]
   d4b28:	491a      	ldr	r1, [pc, #104]	; (d4b94 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
   d4b2a:	9603      	str	r6, [sp, #12]
   d4b2c:	4633      	mov	r3, r6
   d4b2e:	2032      	movs	r0, #50	; 0x32
   d4b30:	aa02      	add	r2, sp, #8
   d4b32:	f7ff feb1 	bl	d4898 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4b3a:	f8ad 3012 	strh.w	r3, [sp, #18]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d4b3e:	a902      	add	r1, sp, #8
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d4b40:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d4b44:	4811      	ldr	r0, [pc, #68]	; (d4b8c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b46:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b48:	f88d 600e 	strb.w	r6, [sp, #14]
   d4b4c:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
   d4b50:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4b54:	f7ff ff8b 	bl	d4a6e <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4b58:	a802      	add	r0, sp, #8
   d4b5a:	f7ff ff79 	bl	d4a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b5e:	2300      	movs	r3, #0
   d4b60:	6023      	str	r3, [r4, #0]
   d4b62:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b64:	71a3      	strb	r3, [r4, #6]
   d4b66:	8123      	strh	r3, [r4, #8]
   d4b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4b6c:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
   d4b6e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d4b72:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d4b74:	683b      	ldr	r3, [r7, #0]
   d4b76:	f8c4 3006 	str.w	r3, [r4, #6]
   d4b7a:	88bb      	ldrh	r3, [r7, #4]
   d4b7c:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d4b7e:	6829      	ldr	r1, [r5, #0]
   d4b80:	4620      	mov	r0, r4
   d4b82:	f7ff ff8b 	bl	d4a9c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d4b86:	4620      	mov	r0, r4
   d4b88:	b00b      	add	sp, #44	; 0x2c
   d4b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b8c:	2003e3f4 	.word	0x2003e3f4
   d4b90:	000d7053 	.word	0x000d7053
   d4b94:	000d704c 	.word	0x000d704c

000d4b98 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b98:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b9a:	4c09      	ldr	r4, [pc, #36]	; (d4bc0 <_GLOBAL__sub_I_System+0x28>)
   d4b9c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ba2:	6020      	str	r0, [r4, #0]
   d4ba4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ba6:	71a0      	strb	r0, [r4, #6]
   d4ba8:	8120      	strh	r0, [r4, #8]
   d4baa:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bac:	f7ff fe7c 	bl	d48a8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	4a04      	ldr	r2, [pc, #16]	; (d4bc4 <_GLOBAL__sub_I_System+0x2c>)
   d4bb4:	4904      	ldr	r1, [pc, #16]	; (d4bc8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4bba:	f001 bfbb 	b.w	d6b34 <__aeabi_atexit>
   d4bbe:	bf00      	nop
   d4bc0:	2003e3f4 	.word	0x2003e3f4
   d4bc4:	2003dc4c 	.word	0x2003dc4c
   d4bc8:	000d4a63 	.word	0x000d4a63

000d4bcc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4bcc:	b510      	push	{r4, lr}
   d4bce:	4604      	mov	r4, r0
{
	free(buffer);
   d4bd0:	6800      	ldr	r0, [r0, #0]
   d4bd2:	f7ff feef 	bl	d49b4 <free>
}
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	bd10      	pop	{r4, pc}

000d4bda <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4bda:	b510      	push	{r4, lr}
   d4bdc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4bde:	6800      	ldr	r0, [r0, #0]
   d4be0:	b108      	cbz	r0, d4be6 <_ZN6String10invalidateEv+0xc>
   d4be2:	f7ff fee7 	bl	d49b4 <free>
	buffer = NULL;
   d4be6:	2300      	movs	r3, #0
   d4be8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4bea:	60a3      	str	r3, [r4, #8]
   d4bec:	6063      	str	r3, [r4, #4]
   d4bee:	bd10      	pop	{r4, pc}

000d4bf0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4bf0:	b538      	push	{r3, r4, r5, lr}
   d4bf2:	4604      	mov	r4, r0
   d4bf4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4bf6:	6800      	ldr	r0, [r0, #0]
   d4bf8:	3101      	adds	r1, #1
   d4bfa:	f7ff fee3 	bl	d49c4 <realloc>
	if (newbuffer) {
   d4bfe:	b110      	cbz	r0, d4c06 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c00:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4c04:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c06:	bd38      	pop	{r3, r4, r5, pc}

000d4c08 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4c08:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c0a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4c0c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c0e:	b113      	cbz	r3, d4c16 <_ZN6String7reserveEj+0xe>
   d4c10:	6843      	ldr	r3, [r0, #4]
   d4c12:	428b      	cmp	r3, r1
   d4c14:	d207      	bcs.n	d4c26 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4c16:	4620      	mov	r0, r4
   d4c18:	f7ff ffea 	bl	d4bf0 <_ZN6String12changeBufferEj>
   d4c1c:	b120      	cbz	r0, d4c28 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4c1e:	68a3      	ldr	r3, [r4, #8]
   d4c20:	b90b      	cbnz	r3, d4c26 <_ZN6String7reserveEj+0x1e>
   d4c22:	6822      	ldr	r2, [r4, #0]
   d4c24:	7013      	strb	r3, [r2, #0]
   d4c26:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4c28:	bd10      	pop	{r4, pc}

000d4c2a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c2a:	b570      	push	{r4, r5, r6, lr}
   d4c2c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4c2e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c30:	4604      	mov	r4, r0
   d4c32:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4c34:	f7ff ffe8 	bl	d4c08 <_ZN6String7reserveEj>
   d4c38:	b918      	cbnz	r0, d4c42 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	f7ff ffcd 	bl	d4bda <_ZN6String10invalidateEv>
		return *this;
   d4c40:	e009      	b.n	d4c56 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4c42:	462a      	mov	r2, r5
   d4c44:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4c46:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c48:	6820      	ldr	r0, [r4, #0]
   d4c4a:	f002 f8f8 	bl	d6e3e <memcpy>
	buffer[len] = 0;
   d4c4e:	6822      	ldr	r2, [r4, #0]
   d4c50:	68a3      	ldr	r3, [r4, #8]
   d4c52:	2100      	movs	r1, #0
   d4c54:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4c56:	4620      	mov	r0, r4
   d4c58:	bd70      	pop	{r4, r5, r6, pc}

000d4c5a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c5a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c5c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c5e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c60:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c62:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c64:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c66:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c68:	460d      	mov	r5, r1
   d4c6a:	b139      	cbz	r1, d4c7c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c6c:	4608      	mov	r0, r1
   d4c6e:	f002 f945 	bl	d6efc <strlen>
   d4c72:	4629      	mov	r1, r5
   d4c74:	4602      	mov	r2, r0
   d4c76:	4620      	mov	r0, r4
   d4c78:	f7ff ffd7 	bl	d4c2a <_ZN6String4copyEPKcj>
}
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	bd38      	pop	{r3, r4, r5, pc}

000d4c80 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4c80:	b538      	push	{r3, r4, r5, lr}
   d4c82:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4c84:	460c      	mov	r4, r1
   d4c86:	b141      	cbz	r1, d4c9a <_ZN6StringaSEPKc+0x1a>
   d4c88:	4608      	mov	r0, r1
   d4c8a:	f002 f937 	bl	d6efc <strlen>
   d4c8e:	4621      	mov	r1, r4
   d4c90:	4602      	mov	r2, r0
   d4c92:	4628      	mov	r0, r5
   d4c94:	f7ff ffc9 	bl	d4c2a <_ZN6String4copyEPKcj>
   d4c98:	e001      	b.n	d4c9e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4c9a:	f7ff ff9e 	bl	d4bda <_ZN6String10invalidateEv>

	return *this;
}
   d4c9e:	4628      	mov	r0, r5
   d4ca0:	bd38      	pop	{r3, r4, r5, pc}

000d4ca2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ca2:	4770      	bx	lr

000d4ca4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4ca4:	2000      	movs	r0, #0
   d4ca6:	4770      	bx	lr

000d4ca8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ca8:	4770      	bx	lr

000d4caa <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4caa:	2000      	movs	r0, #0
   d4cac:	4770      	bx	lr

000d4cae <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cae:	4770      	bx	lr

000d4cb0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4cb0:	2000      	movs	r0, #0
   d4cb2:	4770      	bx	lr

000d4cb4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cb4:	b510      	push	{r4, lr}
   d4cb6:	2114      	movs	r1, #20
   d4cb8:	4604      	mov	r4, r0
   d4cba:	f001 ff49 	bl	d6b50 <_ZdlPvj>
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	bd10      	pop	{r4, pc}

000d4cc2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4cc2:	b510      	push	{r4, lr}
   d4cc4:	2114      	movs	r1, #20
   d4cc6:	4604      	mov	r4, r0
   d4cc8:	f001 ff42 	bl	d6b50 <_ZdlPvj>
   d4ccc:	4620      	mov	r0, r4
   d4cce:	bd10      	pop	{r4, pc}

000d4cd0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4cd0:	b510      	push	{r4, lr}
   d4cd2:	2114      	movs	r1, #20
   d4cd4:	4604      	mov	r4, r0
   d4cd6:	f001 ff3b 	bl	d6b50 <_ZdlPvj>
   d4cda:	4620      	mov	r0, r4
   d4cdc:	bd10      	pop	{r4, pc}

000d4cde <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4cde:	f7ff b9dc 	b.w	d409a <_ZdlPv>

000d4ce2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4ce2:	f7ff b9da 	b.w	d409a <_ZdlPv>

000d4ce6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4ce6:	f7ff b9d8 	b.w	d409a <_ZdlPv>

000d4cea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4cea:	b510      	push	{r4, lr}
   d4cec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cee:	6800      	ldr	r0, [r0, #0]
   d4cf0:	b108      	cbz	r0, d4cf6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4cf2:	f7ff fd39 	bl	d4768 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	bd10      	pop	{r4, pc}
	...

000d4cfc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d4cfc:	b530      	push	{r4, r5, lr}
   d4cfe:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d4d00:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d4d02:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d4d04:	2400      	movs	r4, #0
   d4d06:	9302      	str	r3, [sp, #8]
   d4d08:	4b08      	ldr	r3, [pc, #32]	; (d4d2c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d4d0a:	9300      	str	r3, [sp, #0]
   d4d0c:	aa02      	add	r2, sp, #8
   d4d0e:	4623      	mov	r3, r4
   d4d10:	4907      	ldr	r1, [pc, #28]	; (d4d30 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d4d12:	9403      	str	r4, [sp, #12]
   d4d14:	2001      	movs	r0, #1
   d4d16:	f7ff fdbf 	bl	d4898 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d4d1a:	6828      	ldr	r0, [r5, #0]
   d4d1c:	4905      	ldr	r1, [pc, #20]	; (d4d34 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d4d1e:	8800      	ldrh	r0, [r0, #0]
   d4d20:	4623      	mov	r3, r4
   d4d22:	462a      	mov	r2, r5
   d4d24:	f7ff fc9c 	bl	d4660 <hal_ble_gatt_client_discover_all_services>
    }
   d4d28:	b00b      	add	sp, #44	; 0x2c
   d4d2a:	bd30      	pop	{r4, r5, pc}
   d4d2c:	000d70db 	.word	0x000d70db
   d4d30:	000d70d0 	.word	0x000d70d0
   d4d34:	000d624d 	.word	0x000d624d

000d4d38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4d38:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4d3a:	200a      	movs	r0, #10
   d4d3c:	4a02      	ldr	r2, [pc, #8]	; (d4d48 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4d3e:	2100      	movs	r1, #0
   d4d40:	f7ff fda2 	bl	d4888 <panic_>
    }
}
   d4d44:	bd08      	pop	{r3, pc}
   d4d46:	bf00      	nop
   d4d48:	000d45e5 	.word	0x000d45e5

000d4d4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d4c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d4e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d50:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d52:	689b      	ldr	r3, [r3, #8]
   d4d54:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d56:	68a3      	ldr	r3, [r4, #8]
   d4d58:	3b01      	subs	r3, #1
   d4d5a:	60a3      	str	r3, [r4, #8]
   d4d5c:	b92b      	cbnz	r3, d4d6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4d5e:	6823      	ldr	r3, [r4, #0]
   d4d60:	4620      	mov	r0, r4
   d4d62:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4d68:	4718      	bx	r3
   d4d6a:	bd10      	pop	{r4, pc}

000d4d6c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4d6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4d70:	b2da      	uxtb	r2, r3
   d4d72:	2a09      	cmp	r2, #9
   d4d74:	d801      	bhi.n	d4d7a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4d76:	4618      	mov	r0, r3
   d4d78:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4d7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4d7e:	2b05      	cmp	r3, #5
   d4d80:	d801      	bhi.n	d4d86 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4d82:	3857      	subs	r0, #87	; 0x57
   d4d84:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4d86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4d8a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4d8c:	bf94      	ite	ls
   d4d8e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4d90:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4d94:	4770      	bx	lr
	...

000d4d98 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4d98:	b510      	push	{r4, lr}
            locked_(false) {
   d4d9a:	2300      	movs	r3, #0
   d4d9c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4d9e:	4b04      	ldr	r3, [pc, #16]	; (d4db0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4da0:	4604      	mov	r4, r0
   d4da2:	6818      	ldr	r0, [r3, #0]
   d4da4:	f7ff fce8 	bl	d4778 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4da8:	2301      	movs	r3, #1
   d4daa:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4dac:	4620      	mov	r0, r4
   d4dae:	bd10      	pop	{r4, pc}
   d4db0:	2003e408 	.word	0x2003e408

000d4db4 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4db4:	b510      	push	{r4, lr}
        if (locked_) {
   d4db6:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4db8:	4604      	mov	r4, r0
        if (locked_) {
   d4dba:	b11b      	cbz	r3, d4dc4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4dbc:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4dbe:	6818      	ldr	r0, [r3, #0]
   d4dc0:	f7ff fce2 	bl	d4788 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	bd10      	pop	{r4, pc}
   d4dc8:	2003e408 	.word	0x2003e408

000d4dcc <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d4dcc:	2200      	movs	r2, #0
   d4dce:	6002      	str	r2, [r0, #0]
   d4dd0:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d4dd2:	4770      	bx	lr

000d4dd4 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4dd4:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4dd6:	7982      	ldrb	r2, [r0, #6]
   d4dd8:	798b      	ldrb	r3, [r1, #6]
   d4dda:	429a      	cmp	r2, r3
   d4ddc:	d106      	bne.n	d4dec <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4dde:	2206      	movs	r2, #6
   d4de0:	f002 f81e 	bl	d6e20 <memcmp>
   d4de4:	fab0 f080 	clz	r0, r0
   d4de8:	0940      	lsrs	r0, r0, #5
   d4dea:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4dec:	2000      	movs	r0, #0
}
   d4dee:	bd08      	pop	{r3, pc}

000d4df0 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4df0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4df2:	2301      	movs	r3, #1
   d4df4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4df6:	4b05      	ldr	r3, [pc, #20]	; (d4e0c <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4df8:	4602      	mov	r2, r0
   d4dfa:	f103 0110 	add.w	r1, r3, #16
   d4dfe:	f853 4b04 	ldr.w	r4, [r3], #4
   d4e02:	f842 4b04 	str.w	r4, [r2], #4
   d4e06:	428b      	cmp	r3, r1
   d4e08:	d1f9      	bne.n	d4dfe <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4e0a:	bd10      	pop	{r4, pc}
   d4e0c:	000d7270 	.word	0x000d7270

000d4e10 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4e10:	7c0b      	ldrb	r3, [r1, #16]
   d4e12:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d4e16:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4e18:	d110      	bne.n	d4e3c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d4e1a:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e1c:	4b0d      	ldr	r3, [pc, #52]	; (d4e54 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d4e1e:	4602      	mov	r2, r0
   d4e20:	f103 0410 	add.w	r4, r3, #16
   d4e24:	f853 5b04 	ldr.w	r5, [r3], #4
   d4e28:	f842 5b04 	str.w	r5, [r2], #4
   d4e2c:	42a3      	cmp	r3, r4
   d4e2e:	d1f9      	bne.n	d4e24 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d4e30:	880b      	ldrh	r3, [r1, #0]
   d4e32:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d4e34:	880b      	ldrh	r3, [r1, #0]
   d4e36:	121b      	asrs	r3, r3, #8
   d4e38:	7343      	strb	r3, [r0, #13]
   d4e3a:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d4e3c:	2301      	movs	r3, #1
   d4e3e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e40:	f101 0210 	add.w	r2, r1, #16
   d4e44:	4603      	mov	r3, r0
   d4e46:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e4a:	f843 4b04 	str.w	r4, [r3], #4
   d4e4e:	4291      	cmp	r1, r2
   d4e50:	d1f9      	bne.n	d4e46 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d4e52:	bd30      	pop	{r4, r5, pc}
   d4e54:	000d7270 	.word	0x000d7270

000d4e58 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d4e58:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4e5a:	690b      	ldr	r3, [r1, #16]
   d4e5c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4e5e:	f101 0210 	add.w	r2, r1, #16
   d4e62:	4603      	mov	r3, r0
   d4e64:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e68:	f843 4b04 	str.w	r4, [r3], #4
   d4e6c:	4291      	cmp	r1, r2
   d4e6e:	d1f9      	bne.n	d4e64 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4e70:	bd10      	pop	{r4, pc}

000d4e72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e72:	b510      	push	{r4, lr}
    if (uuid128) {
   d4e74:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e76:	4604      	mov	r4, r0
    if (uuid128) {
   d4e78:	b1b9      	cbz	r1, d4eaa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4e7a:	2a01      	cmp	r2, #1
   d4e7c:	d109      	bne.n	d4e92 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e7e:	4603      	mov	r3, r0
   d4e80:	f101 0210 	add.w	r2, r1, #16
   d4e84:	f851 0b04 	ldr.w	r0, [r1], #4
   d4e88:	f843 0b04 	str.w	r0, [r3], #4
   d4e8c:	4291      	cmp	r1, r2
   d4e8e:	d1f9      	bne.n	d4e84 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4e90:	e008      	b.n	d4ea4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4e92:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4e94:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4e96:	5c98      	ldrb	r0, [r3, r2]
   d4e98:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4e9c:	3a01      	subs	r2, #1
   d4e9e:	b2d2      	uxtb	r2, r2
   d4ea0:	2aff      	cmp	r2, #255	; 0xff
   d4ea2:	d1f8      	bne.n	d4e96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4ea4:	2301      	movs	r3, #1
   d4ea6:	6123      	str	r3, [r4, #16]
   d4ea8:	e002      	b.n	d4eb0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4eaa:	2210      	movs	r2, #16
   d4eac:	f001 ffed 	bl	d6e8a <memset>
    }
}
   d4eb0:	4620      	mov	r0, r4
   d4eb2:	bd10      	pop	{r4, pc}

000d4eb4 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d4eb4:	b538      	push	{r3, r4, r5, lr}
   d4eb6:	4604      	mov	r4, r0
   d4eb8:	460d      	mov	r5, r1
        : BleUuid() {
   d4eba:	f7ff ff99 	bl	d4df0 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4ebe:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4ec0:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4ec2:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d4ec4:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4ec6:	7365      	strb	r5, [r4, #13]
}
   d4ec8:	4620      	mov	r0, r4
   d4eca:	bd38      	pop	{r3, r4, r5, pc}

000d4ecc <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4ecc:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4ece:	690b      	ldr	r3, [r1, #16]
   d4ed0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4ed2:	f101 0210 	add.w	r2, r1, #16
   d4ed6:	4603      	mov	r3, r0
   d4ed8:	f851 4b04 	ldr.w	r4, [r1], #4
   d4edc:	f843 4b04 	str.w	r4, [r3], #4
   d4ee0:	4291      	cmp	r1, r2
   d4ee2:	d1f9      	bne.n	d4ed8 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4ee4:	bd10      	pop	{r4, pc}

000d4ee6 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4ee6:	b510      	push	{r4, lr}
   d4ee8:	b086      	sub	sp, #24
   d4eea:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4eec:	2201      	movs	r2, #1
   d4eee:	a801      	add	r0, sp, #4
   d4ef0:	f7ff ffbf 	bl	d4e72 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4ef4:	a901      	add	r1, sp, #4
   d4ef6:	4620      	mov	r0, r4
   d4ef8:	f7ff ffe8 	bl	d4ecc <_ZN8particle7BleUuidaSERKS0_>
}
   d4efc:	b006      	add	sp, #24
   d4efe:	bd10      	pop	{r4, pc}

000d4f00 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d4f00:	b510      	push	{r4, lr}
   d4f02:	b086      	sub	sp, #24
   d4f04:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d4f06:	a801      	add	r0, sp, #4
   d4f08:	f7ff ffd4 	bl	d4eb4 <_ZN8particle7BleUuidC1Et>
   d4f0c:	a901      	add	r1, sp, #4
   d4f0e:	4620      	mov	r0, r4
   d4f10:	f7ff ffdc 	bl	d4ecc <_ZN8particle7BleUuidaSERKS0_>
}
   d4f14:	b006      	add	sp, #24
   d4f16:	bd10      	pop	{r4, pc}

000d4f18 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d4f18:	b510      	push	{r4, lr}
   d4f1a:	b086      	sub	sp, #24
   d4f1c:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d4f1e:	a801      	add	r0, sp, #4
   d4f20:	f7ff ff76 	bl	d4e10 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d4f24:	a901      	add	r1, sp, #4
   d4f26:	4620      	mov	r0, r4
   d4f28:	f7ff ffd0 	bl	d4ecc <_ZN8particle7BleUuidaSERKS0_>
}
   d4f2c:	b006      	add	sp, #24
   d4f2e:	bd10      	pop	{r4, pc}

000d4f30 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4f30:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4f32:	6902      	ldr	r2, [r0, #16]
   d4f34:	690b      	ldr	r3, [r1, #16]
   d4f36:	429a      	cmp	r2, r3
   d4f38:	d106      	bne.n	d4f48 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4f3a:	2210      	movs	r2, #16
   d4f3c:	f001 ff70 	bl	d6e20 <memcmp>
   d4f40:	fab0 f080 	clz	r0, r0
   d4f44:	0940      	lsrs	r0, r0, #5
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	2000      	movs	r0, #0
}
   d4f4a:	bd08      	pop	{r3, pc}

000d4f4c <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d4f4c:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d4f50:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f52:	4b31      	ldr	r3, [pc, #196]	; (d5018 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4f54:	460e      	mov	r6, r1
   d4f56:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f58:	4602      	mov	r2, r0
   d4f5a:	f103 0110 	add.w	r1, r3, #16
   d4f5e:	f853 0b04 	ldr.w	r0, [r3], #4
   d4f62:	f842 0b04 	str.w	r0, [r2], #4
   d4f66:	428b      	cmp	r3, r1
   d4f68:	d1f9      	bne.n	d4f5e <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d4f6a:	2e00      	cmp	r6, #0
   d4f6c:	d051      	beq.n	d5012 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4f6e:	2124      	movs	r1, #36	; 0x24
   d4f70:	4630      	mov	r0, r6
   d4f72:	f001 ffcb 	bl	d6f0c <strnlen>
   d4f76:	2804      	cmp	r0, #4
   d4f78:	d010      	beq.n	d4f9c <_ZN8particle7BleUuid9constructEPKc+0x50>
   d4f7a:	2700      	movs	r7, #0
   d4f7c:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f7e:	2124      	movs	r1, #36	; 0x24
   d4f80:	4630      	mov	r0, r6
   d4f82:	f001 ffc3 	bl	d6f0c <strnlen>
   d4f86:	42b8      	cmp	r0, r7
   d4f88:	d901      	bls.n	d4f8e <_ZN8particle7BleUuid9constructEPKc+0x42>
   d4f8a:	bb44      	cbnz	r4, d4fde <_ZN8particle7BleUuid9constructEPKc+0x92>
   d4f8c:	e041      	b.n	d5012 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d4f8e:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d4f90:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4f92:	42a5      	cmp	r5, r4
   d4f94:	d03d      	beq.n	d5012 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d4f96:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d4f9a:	e7fa      	b.n	d4f92 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4f9c:	7830      	ldrb	r0, [r6, #0]
   d4f9e:	f7ff fee5 	bl	d4d6c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4fa2:	1e04      	subs	r4, r0, #0
   d4fa4:	db18      	blt.n	d4fd8 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4fa6:	7870      	ldrb	r0, [r6, #1]
   d4fa8:	f7ff fee0 	bl	d4d6c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4fac:	2800      	cmp	r0, #0
   d4fae:	db13      	blt.n	d4fd8 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4fb0:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4fb4:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4fb8:	78b0      	ldrb	r0, [r6, #2]
   d4fba:	f7ff fed7 	bl	d4d6c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4fbe:	1e04      	subs	r4, r0, #0
   d4fc0:	db0a      	blt.n	d4fd8 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4fc2:	78f0      	ldrb	r0, [r6, #3]
   d4fc4:	f7ff fed2 	bl	d4d6c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4fc8:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4fca:	bfa1      	itttt	ge
   d4fcc:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d4fd0:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d4fd4:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d4fd6:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d4fd8:	2300      	movs	r3, #0
   d4fda:	612b      	str	r3, [r5, #16]
   d4fdc:	e019      	b.n	d5012 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d4fde:	5df0      	ldrb	r0, [r6, r7]
   d4fe0:	f7ff fec4 	bl	d4d6c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4fe4:	0603      	lsls	r3, r0, #24
   d4fe6:	d412      	bmi.n	d500e <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d4fe8:	3c01      	subs	r4, #1
   d4fea:	0100      	lsls	r0, r0, #4
   d4fec:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4fee:	2124      	movs	r1, #36	; 0x24
   d4ff0:	4630      	mov	r0, r6
   d4ff2:	f001 ff8b 	bl	d6f0c <strnlen>
   d4ff6:	3701      	adds	r7, #1
   d4ff8:	4287      	cmp	r7, r0
   d4ffa:	d208      	bcs.n	d500e <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d4ffc:	5df0      	ldrb	r0, [r6, r7]
   d4ffe:	f7ff feb5 	bl	d4d6c <_ZN8particle11hexToNibbleEc>
   d5002:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5004:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5006:	bfa2      	ittt	ge
   d5008:	5d2b      	ldrbge	r3, [r5, r4]
   d500a:	4318      	orrge	r0, r3
   d500c:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d500e:	3701      	adds	r7, #1
   d5010:	e7b5      	b.n	d4f7e <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5012:	b003      	add	sp, #12
   d5014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5016:	bf00      	nop
   d5018:	000d7270 	.word	0x000d7270

000d501c <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d501c:	b538      	push	{r3, r4, r5, lr}
   d501e:	4604      	mov	r4, r0
   d5020:	460d      	mov	r5, r1
        : BleUuid() {
   d5022:	f7ff fee5 	bl	d4df0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5026:	4620      	mov	r0, r4
   d5028:	4629      	mov	r1, r5
   d502a:	f7ff ff8f 	bl	d4f4c <_ZN8particle7BleUuid9constructEPKc>
}
   d502e:	4620      	mov	r0, r4
   d5030:	bd38      	pop	{r3, r4, r5, pc}

000d5032 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5032:	b538      	push	{r3, r4, r5, lr}
   d5034:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5036:	b101      	cbz	r1, d503a <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5038:	b912      	cbnz	r2, d5040 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d503a:	2000      	movs	r0, #0
   d503c:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d503e:	bd38      	pop	{r3, r4, r5, pc}
   d5040:	2a1f      	cmp	r2, #31
   d5042:	bf28      	it	cs
   d5044:	221f      	movcs	r2, #31
   d5046:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d5048:	f001 fef9 	bl	d6e3e <memcpy>
    selfLen_ = len;
   d504c:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d504e:	4620      	mov	r0, r4
}
   d5050:	bd38      	pop	{r3, r4, r5, pc}

000d5052 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5052:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5054:	b18b      	cbz	r3, d507a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5056:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5058:	1ce5      	adds	r5, r4, #3
   d505a:	428d      	cmp	r5, r1
   d505c:	d80f      	bhi.n	d507e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d505e:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5060:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5062:	5d87      	ldrb	r7, [r0, r6]
   d5064:	4297      	cmp	r7, r2
   d5066:	d105      	bne.n	d5074 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5068:	442e      	add	r6, r5
   d506a:	42b1      	cmp	r1, r6
   d506c:	d307      	bcc.n	d507e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d506e:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5070:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5072:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5074:	3501      	adds	r5, #1
   d5076:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5078:	e7ee      	b.n	d5058 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d507a:	4618      	mov	r0, r3
   d507c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d507e:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5080:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5082 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5082:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5086:	4604      	mov	r4, r0
   d5088:	460e      	mov	r6, r1
   d508a:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d508c:	4617      	mov	r7, r2
   d508e:	2a00      	cmp	r2, #0
   d5090:	d03a      	beq.n	d5108 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5092:	460a      	mov	r2, r1
   d5094:	ab01      	add	r3, sp, #4
   d5096:	6a01      	ldr	r1, [r0, #32]
   d5098:	f7ff ffdb 	bl	d5052 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d509c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d50a0:	6a22      	ldr	r2, [r4, #32]
   d50a2:	bb03      	cbnz	r3, d50e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d50a4:	b1f8      	cbz	r0, d50e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d50a6:	1c96      	adds	r6, r2, #2
   d50a8:	442e      	add	r6, r5
   d50aa:	1a36      	subs	r6, r6, r0
   d50ac:	2e1f      	cmp	r6, #31
   d50ae:	d82b      	bhi.n	d5108 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d50b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d50b4:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d50b8:	ebc8 0202 	rsb	r2, r8, r2
   d50bc:	1a12      	subs	r2, r2, r0
   d50be:	eb00 0108 	add.w	r1, r0, r8
   d50c2:	eb05 0009 	add.w	r0, r5, r9
   d50c6:	b292      	uxth	r2, r2
   d50c8:	4421      	add	r1, r4
   d50ca:	4420      	add	r0, r4
   d50cc:	f001 fec2 	bl	d6e54 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d50d0:	1c6b      	adds	r3, r5, #1
   d50d2:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d50d6:	462a      	mov	r2, r5
   d50d8:	4639      	mov	r1, r7
   d50da:	eb04 0009 	add.w	r0, r4, r9
   d50de:	f001 feae 	bl	d6e3e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d50e2:	6226      	str	r6, [r4, #32]
   d50e4:	e010      	b.n	d5108 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d50e6:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d50e8:	182b      	adds	r3, r5, r0
   d50ea:	2b1f      	cmp	r3, #31
   d50ec:	d80c      	bhi.n	d5108 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d50ee:	1c6b      	adds	r3, r5, #1
   d50f0:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50f2:	4422      	add	r2, r4
   d50f4:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d50f6:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50f8:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d50fa:	4420      	add	r0, r4
   d50fc:	462a      	mov	r2, r5
   d50fe:	f001 fe9e 	bl	d6e3e <memcpy>
        selfLen_ += len;
   d5102:	6a22      	ldr	r2, [r4, #32]
   d5104:	442a      	add	r2, r5
   d5106:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5108:	6a20      	ldr	r0, [r4, #32]
}
   d510a:	b003      	add	sp, #12
   d510c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5110 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5112:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5114:	4603      	mov	r3, r0
   d5116:	f100 021f 	add.w	r2, r0, #31
   d511a:	2000      	movs	r0, #0
   d511c:	f803 0b01 	strb.w	r0, [r3], #1
   d5120:	4293      	cmp	r3, r2
   d5122:	f04f 0100 	mov.w	r1, #0
   d5126:	d1f9      	bne.n	d511c <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5128:	aa04      	add	r2, sp, #16
   d512a:	2306      	movs	r3, #6
   d512c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5130:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5132:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5134:	9100      	str	r1, [sp, #0]
   d5136:	4620      	mov	r0, r4
   d5138:	4619      	mov	r1, r3
   d513a:	f7ff ffa2 	bl	d5082 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d513e:	4620      	mov	r0, r4
   d5140:	b004      	add	sp, #16
   d5142:	bd10      	pop	{r4, pc}

000d5144 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5148:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d514a:	b085      	sub	sp, #20
   d514c:	4606      	mov	r6, r0
   d514e:	4689      	mov	r9, r1
   d5150:	4617      	mov	r7, r2
   d5152:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d5154:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d5156:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d515a:	6a31      	ldr	r1, [r6, #32]
   d515c:	428d      	cmp	r5, r1
   d515e:	d22a      	bcs.n	d51b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d5160:	ab03      	add	r3, sp, #12
   d5162:	464a      	mov	r2, r9
   d5164:	1b49      	subs	r1, r1, r5
   d5166:	1970      	adds	r0, r6, r5
   d5168:	f7ff ff73 	bl	d5052 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d516c:	4683      	mov	fp, r0
   d516e:	b310      	cbz	r0, d51b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d5170:	4554      	cmp	r4, sl
   d5172:	d220      	bcs.n	d51b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d5174:	2804      	cmp	r0, #4
   d5176:	9903      	ldr	r1, [sp, #12]
   d5178:	d10c      	bne.n	d5194 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d517a:	4429      	add	r1, r5
   d517c:	1872      	adds	r2, r6, r1
   d517e:	1c63      	adds	r3, r4, #1
   d5180:	78d1      	ldrb	r1, [r2, #3]
   d5182:	7892      	ldrb	r2, [r2, #2]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d518a:	fb08 7004 	mla	r0, r8, r4, r7
   d518e:	f7ff feb7 	bl	d4f00 <_ZN8particle7BleUuidaSEt>
   d5192:	e00a      	b.n	d51aa <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d5194:	2812      	cmp	r0, #18
   d5196:	d10a      	bne.n	d51ae <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d5198:	3102      	adds	r1, #2
   d519a:	4429      	add	r1, r5
   d519c:	1c63      	adds	r3, r4, #1
   d519e:	4431      	add	r1, r6
   d51a0:	fb08 7004 	mla	r0, r8, r4, r7
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	f7ff fe9e 	bl	d4ee6 <_ZN8particle7BleUuidaSEPKh>
   d51aa:	9b01      	ldr	r3, [sp, #4]
   d51ac:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d51ae:	9b03      	ldr	r3, [sp, #12]
   d51b0:	445b      	add	r3, fp
   d51b2:	441d      	add	r5, r3
   d51b4:	e7d1      	b.n	d515a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d51b6:	4620      	mov	r0, r4
   d51b8:	b005      	add	sp, #20
   d51ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d51be <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d51be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51c2:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d51c4:	460d      	mov	r5, r1
   d51c6:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51c8:	460a      	mov	r2, r1
   d51ca:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d51cc:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51ce:	f7ff ffb9 	bl	d5144 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d51d2:	f04f 0814 	mov.w	r8, #20
   d51d6:	1a33      	subs	r3, r6, r0
   d51d8:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51dc:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d51de:	2103      	movs	r1, #3
   d51e0:	4638      	mov	r0, r7
   d51e2:	f7ff ffaf 	bl	d5144 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d51e6:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51e8:	1b33      	subs	r3, r6, r4
   d51ea:	fb08 5204 	mla	r2, r8, r4, r5
   d51ee:	2106      	movs	r1, #6
   d51f0:	4638      	mov	r0, r7
   d51f2:	f7ff ffa7 	bl	d5144 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d51f6:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d51f8:	1b33      	subs	r3, r6, r4
   d51fa:	fb08 5204 	mla	r2, r8, r4, r5
   d51fe:	2107      	movs	r1, #7
   d5200:	4638      	mov	r0, r7
   d5202:	f7ff ff9f 	bl	d5144 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d5206:	4420      	add	r0, r4
   d5208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d520c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d520c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d520e:	2500      	movs	r5, #0
   d5210:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5214:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5216:	8043      	strh	r3, [r0, #2]
   d5218:	220e      	movs	r2, #14
   d521a:	4629      	mov	r1, r5
   d521c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d521e:	7105      	strb	r5, [r0, #4]
   d5220:	3006      	adds	r0, #6
   d5222:	f001 fe32 	bl	d6e8a <memset>
   d5226:	f104 0014 	add.w	r0, r4, #20
   d522a:	f7ff fde1 	bl	d4df0 <_ZN8particle7BleUuidC1Ev>
   d522e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5232:	f7ff fddd 	bl	d4df0 <_ZN8particle7BleUuidC1Ev>
   d5236:	4904      	ldr	r1, [pc, #16]	; (d5248 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5238:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d523c:	f7ff fd0d 	bl	d4c5a <_ZN6StringC1EPK19__FlashStringHelper>
   d5240:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5242:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5244:	4620      	mov	r0, r4
   d5246:	bd38      	pop	{r3, r4, r5, pc}
   d5248:	000d7327 	.word	0x000d7327

000d524c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d524c:	b510      	push	{r4, lr}
   d524e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5250:	69c2      	ldr	r2, [r0, #28]
   d5252:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5256:	4293      	cmp	r3, r2
   d5258:	4618      	mov	r0, r3
   d525a:	d006      	beq.n	d526a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d525c:	6804      	ldr	r4, [r0, #0]
   d525e:	8824      	ldrh	r4, [r4, #0]
   d5260:	428c      	cmp	r4, r1
   d5262:	f103 0308 	add.w	r3, r3, #8
   d5266:	d1f6      	bne.n	d5256 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5268:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d526a:	2000      	movs	r0, #0
    }
   d526c:	bd10      	pop	{r4, pc}
	...

000d5270 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5274:	4680      	mov	r8, r0
   d5276:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5278:	460e      	mov	r6, r1
   d527a:	b369      	cbz	r1, d52d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d527c:	b362      	cbz	r2, d52d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d527e:	2af4      	cmp	r2, #244	; 0xf4
   d5280:	6805      	ldr	r5, [r0, #0]
   d5282:	bf28      	it	cs
   d5284:	22f4      	movcs	r2, #244	; 0xf4
   d5286:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5288:	782a      	ldrb	r2, [r5, #0]
   d528a:	b1a2      	cbz	r2, d52b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d528c:	792b      	ldrb	r3, [r5, #4]
   d528e:	0798      	lsls	r0, r3, #30
   d5290:	d507      	bpl.n	d52a2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5292:	2300      	movs	r3, #0
   d5294:	4622      	mov	r2, r4
   d5296:	89a8      	ldrh	r0, [r5, #12]
   d5298:	f7ff f9d8 	bl	d464c <hal_ble_gatt_server_set_characteristic_value>
   d529c:	2800      	cmp	r0, #0
   d529e:	da02      	bge.n	d52a6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d52a0:	e043      	b.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d52a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d52a6:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d52aa:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d52ac:	06da      	lsls	r2, r3, #27
   d52ae:	d518      	bpl.n	d52e2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d52b0:	2f01      	cmp	r7, #1
   d52b2:	d123      	bne.n	d52fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d52b4:	e015      	b.n	d52e2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d52b6:	8868      	ldrh	r0, [r5, #2]
   d52b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d52bc:	4298      	cmp	r0, r3
   d52be:	d00d      	beq.n	d52dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d52c0:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d52c2:	0759      	lsls	r1, r3, #29
   d52c4:	d523      	bpl.n	d530e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d52c6:	2f01      	cmp	r7, #1
   d52c8:	d021      	beq.n	d530e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d52ca:	89a9      	ldrh	r1, [r5, #12]
   d52cc:	9200      	str	r2, [sp, #0]
   d52ce:	4623      	mov	r3, r4
   d52d0:	4632      	mov	r2, r6
   d52d2:	f7ff f9e3 	bl	d469c <hal_ble_gatt_client_write_without_response>
   d52d6:	e028      	b.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d52d8:	4815      	ldr	r0, [pc, #84]	; (d5330 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d52da:	e026      	b.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d52dc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d52e0:	e023      	b.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d52e2:	069a      	lsls	r2, r3, #26
   d52e4:	d521      	bpl.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d52e6:	2f02      	cmp	r7, #2
   d52e8:	d01f      	beq.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d52ea:	89a8      	ldrh	r0, [r5, #12]
   d52ec:	2300      	movs	r3, #0
   d52ee:	4622      	mov	r2, r4
   d52f0:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d52f2:	b002      	add	sp, #8
   d52f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d52f8:	f7ff ba0c 	b.w	d4714 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d52fc:	89a8      	ldrh	r0, [r5, #12]
   d52fe:	2300      	movs	r3, #0
   d5300:	4622      	mov	r2, r4
   d5302:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5304:	b002      	add	sp, #8
   d5306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d530a:	f7ff b9f9 	b.w	d4700 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d530e:	071b      	lsls	r3, r3, #28
   d5310:	d501      	bpl.n	d5316 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5312:	2f02      	cmp	r7, #2
   d5314:	d102      	bne.n	d531c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5316:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d531a:	e006      	b.n	d532a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d531c:	2300      	movs	r3, #0
   d531e:	89a9      	ldrh	r1, [r5, #12]
   d5320:	9300      	str	r3, [sp, #0]
   d5322:	4632      	mov	r2, r6
   d5324:	4623      	mov	r3, r4
   d5326:	f7ff f9af 	bl	d4688 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d532a:	b002      	add	sp, #8
   d532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5330:	fffffef2 	.word	0xfffffef2

000d5334 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5334:	b570      	push	{r4, r5, r6, lr}
   d5336:	6804      	ldr	r4, [r0, #0]
   d5338:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d533a:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d533c:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d533e:	2900      	cmp	r1, #0
   d5340:	d12e      	bne.n	d53a0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d5342:	8862      	ldrh	r2, [r4, #2]
   d5344:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5348:	429a      	cmp	r2, r3
   d534a:	d029      	beq.n	d53a0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d534c:	8a23      	ldrh	r3, [r4, #16]
   d534e:	b353      	cbz	r3, d53a6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d5350:	2518      	movs	r5, #24
   d5352:	462a      	mov	r2, r5
   d5354:	4668      	mov	r0, sp
   d5356:	f001 fd98 	bl	d6e8a <memset>
    config.version = BLE_API_VERSION;
   d535a:	2301      	movs	r3, #1
   d535c:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d5360:	4b13      	ldr	r3, [pc, #76]	; (d53b0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d5362:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d5366:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d5368:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d536a:	8863      	ldrh	r3, [r4, #2]
   d536c:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d5370:	8a23      	ldrh	r3, [r4, #16]
   d5372:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d5376:	89a3      	ldrh	r3, [r4, #12]
   d5378:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d537c:	b15e      	cbz	r6, d5396 <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d537e:	7923      	ldrb	r3, [r4, #4]
   d5380:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d5382:	bf44      	itt	mi
   d5384:	2302      	movmi	r3, #2
   d5386:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d5388:	7923      	ldrb	r3, [r4, #4]
   d538a:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d538c:	bf42      	ittt	mi
   d538e:	9b05      	ldrmi	r3, [sp, #20]
   d5390:	f043 0301 	orrmi.w	r3, r3, #1
   d5394:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d5396:	2100      	movs	r1, #0
   d5398:	4668      	mov	r0, sp
   d539a:	f7ff f9a7 	bl	d46ec <hal_ble_gatt_client_configure_cccd>
   d539e:	e004      	b.n	d53aa <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d53a0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d53a4:	e001      	b.n	d53aa <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d53a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d53aa:	b006      	add	sp, #24
   d53ac:	bd70      	pop	{r4, r5, r6, pc}
   d53ae:	bf00      	nop
   d53b0:	000d558d 	.word	0x000d558d

000d53b4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d53b4:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d53b6:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d53b8:	651a      	str	r2, [r3, #80]	; 0x50
   d53ba:	4770      	bx	lr

000d53bc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d53bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53c0:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d53c2:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d53c4:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d53c6:	9302      	str	r3, [sp, #8]
   d53c8:	2500      	movs	r5, #0
   d53ca:	4b2e      	ldr	r3, [pc, #184]	; (d5484 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d53cc:	9300      	str	r3, [sp, #0]
   d53ce:	aa02      	add	r2, sp, #8
   d53d0:	462b      	mov	r3, r5
   d53d2:	492d      	ldr	r1, [pc, #180]	; (d5488 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d53d4:	9503      	str	r5, [sp, #12]
   d53d6:	2001      	movs	r0, #1
   d53d8:	f7ff fa5e 	bl	d4898 <log_message>
   d53dc:	6833      	ldr	r3, [r6, #0]
   d53de:	68dc      	ldr	r4, [r3, #12]
   d53e0:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d53e2:	f04f 081c 	mov.w	r8, #28
   d53e6:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d53ea:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d53ec:	f1a4 0308 	sub.w	r3, r4, #8
   d53f0:	429f      	cmp	r7, r3
   d53f2:	6832      	ldr	r2, [r6, #0]
   d53f4:	d017      	beq.n	d5426 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d53f6:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d53fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d53fe:	8a9b      	ldrh	r3, [r3, #20]
   d5400:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d5404:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5408:	8adb      	ldrh	r3, [r3, #22]
   d540a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d540e:	8810      	ldrh	r0, [r2, #0]
   d5410:	9500      	str	r5, [sp, #0]
   d5412:	4633      	mov	r3, r6
   d5414:	4a1d      	ldr	r2, [pc, #116]	; (d548c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d5416:	a902      	add	r1, sp, #8
   d5418:	f7ff f92c 	bl	d4674 <hal_ble_gatt_client_discover_characteristics>
   d541c:	2800      	cmp	r0, #0
   d541e:	f104 0408 	add.w	r4, r4, #8
   d5422:	dae3      	bge.n	d53ec <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d5424:	e02a      	b.n	d547c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d5426:	6994      	ldr	r4, [r2, #24]
   d5428:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d542a:	2700      	movs	r7, #0
   d542c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d5430:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d5432:	f1a4 0308 	sub.w	r3, r4, #8
   d5436:	429d      	cmp	r5, r3
   d5438:	d01f      	beq.n	d547a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d543a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d543e:	89db      	ldrh	r3, [r3, #14]
   d5440:	b1cb      	cbz	r3, d5476 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d5442:	2214      	movs	r2, #20
   d5444:	2100      	movs	r1, #0
   d5446:	a802      	add	r0, sp, #8
   d5448:	f001 fd1f 	bl	d6e8a <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d544c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5450:	89d9      	ldrh	r1, [r3, #14]
   d5452:	6833      	ldr	r3, [r6, #0]
   d5454:	aa02      	add	r2, sp, #8
   d5456:	8818      	ldrh	r0, [r3, #0]
   d5458:	9700      	str	r7, [sp, #0]
   d545a:	2313      	movs	r3, #19
   d545c:	f7ff f928 	bl	d46b0 <hal_ble_gatt_client_read>
                if (len > 0) {
   d5460:	b148      	cbz	r0, d5476 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d5462:	ab0a      	add	r3, sp, #40	; 0x28
   d5464:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d5466:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d5468:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d546c:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d5470:	303c      	adds	r0, #60	; 0x3c
   d5472:	f7ff fc05 	bl	d4c80 <_ZN6StringaSEPKc>
   d5476:	3408      	adds	r4, #8
   d5478:	e7db      	b.n	d5432 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d547a:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d547c:	b00a      	add	sp, #40	; 0x28
   d547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5482:	bf00      	nop
   d5484:	000d70f7 	.word	0x000d70f7
   d5488:	000d70d0 	.word	0x000d70d0
   d548c:	000d6095 	.word	0x000d6095

000d5490 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d5490:	6803      	ldr	r3, [r0, #0]
   d5492:	8818      	ldrh	r0, [r3, #0]
}
   d5494:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5498:	1ac0      	subs	r0, r0, r3
   d549a:	bf18      	it	ne
   d549c:	2001      	movne	r0, #1
   d549e:	4770      	bx	lr

000d54a0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d54a0:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d54a2:	680b      	ldr	r3, [r1, #0]
   d54a4:	f8c2 3002 	str.w	r3, [r2, #2]
   d54a8:	684b      	ldr	r3, [r1, #4]
   d54aa:	f8c2 3006 	str.w	r3, [r2, #6]
   d54ae:	4770      	bx	lr

000d54b0 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d54b0:	b510      	push	{r4, lr}
    return impl()->address();
   d54b2:	680a      	ldr	r2, [r1, #0]
   d54b4:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d54b8:	6003      	str	r3, [r0, #0]
   d54ba:	6853      	ldr	r3, [r2, #4]
   d54bc:	6043      	str	r3, [r0, #4]
}
   d54be:	bd10      	pop	{r4, pc}

000d54c0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d54c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d54c2:	6802      	ldr	r2, [r0, #0]
   d54c4:	680b      	ldr	r3, [r1, #0]
   d54c6:	8812      	ldrh	r2, [r2, #0]
   d54c8:	881b      	ldrh	r3, [r3, #0]
   d54ca:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d54cc:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d54ce:	d10c      	bne.n	d54ea <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d54d0:	4601      	mov	r1, r0
   d54d2:	4668      	mov	r0, sp
   d54d4:	f7ff ffec 	bl	d54b0 <_ZNK8particle13BlePeerDevice7addressEv>
   d54d8:	4621      	mov	r1, r4
   d54da:	a802      	add	r0, sp, #8
   d54dc:	f7ff ffe8 	bl	d54b0 <_ZNK8particle13BlePeerDevice7addressEv>
   d54e0:	a902      	add	r1, sp, #8
   d54e2:	4668      	mov	r0, sp
   d54e4:	f7ff fc76 	bl	d4dd4 <_ZNK8particle10BleAddresseqERKS0_>
   d54e8:	b900      	cbnz	r0, d54ec <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d54ea:	2000      	movs	r0, #0
}
   d54ec:	b004      	add	sp, #16
   d54ee:	bd10      	pop	{r4, pc}

000d54f0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d54f0:	b510      	push	{r4, lr}
   d54f2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d54f4:	2034      	movs	r0, #52	; 0x34
   d54f6:	f7fe fdce 	bl	d4096 <_Znwj>
   d54fa:	4601      	mov	r1, r0
   d54fc:	b168      	cbz	r0, d551a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d54fe:	2300      	movs	r3, #0
   d5500:	6003      	str	r3, [r0, #0]
   d5502:	6043      	str	r3, [r0, #4]
   d5504:	6083      	str	r3, [r0, #8]
   d5506:	60c3      	str	r3, [r0, #12]
   d5508:	6103      	str	r3, [r0, #16]
   d550a:	6143      	str	r3, [r0, #20]
   d550c:	6183      	str	r3, [r0, #24]
   d550e:	61c3      	str	r3, [r0, #28]
   d5510:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5512:	6243      	str	r3, [r0, #36]	; 0x24
   d5514:	6283      	str	r3, [r0, #40]	; 0x28
   d5516:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5518:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d551a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d551c:	b919      	cbnz	r1, d5526 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d551e:	4a0a      	ldr	r2, [pc, #40]	; (d5548 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5520:	200a      	movs	r0, #10
   d5522:	f7ff f9b1 	bl	d4888 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5526:	2000      	movs	r0, #0
   d5528:	f7ff f86c 	bl	d4604 <hal_ble_stack_init>
   d552c:	b120      	cbz	r0, d5538 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d552e:	4a06      	ldr	r2, [pc, #24]	; (d5548 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5530:	2100      	movs	r1, #0
   d5532:	200a      	movs	r0, #10
   d5534:	f7ff f9a8 	bl	d4888 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5538:	2200      	movs	r2, #0
   d553a:	6821      	ldr	r1, [r4, #0]
   d553c:	4803      	ldr	r0, [pc, #12]	; (d554c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d553e:	f7ff f8cb 	bl	d46d8 <hal_ble_set_callback_on_periph_link_events>
}
   d5542:	4620      	mov	r0, r4
   d5544:	bd10      	pop	{r4, pc}
   d5546:	bf00      	nop
   d5548:	000d45e5 	.word	0x000d45e5
   d554c:	000d59c1 	.word	0x000d59c1

000d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5550:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5552:	4c0a      	ldr	r4, [pc, #40]	; (d557c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5554:	6823      	ldr	r3, [r4, #0]
   d5556:	07db      	lsls	r3, r3, #31
   d5558:	d40e      	bmi.n	d5578 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d555a:	4620      	mov	r0, r4
   d555c:	f7fe fda1 	bl	d40a2 <__cxa_guard_acquire>
   d5560:	b150      	cbz	r0, d5578 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5562:	4807      	ldr	r0, [pc, #28]	; (d5580 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5564:	f7ff ffc4 	bl	d54f0 <_ZN8particle14BleLocalDeviceC1Ev>
   d5568:	4620      	mov	r0, r4
   d556a:	f7fe fd9f 	bl	d40ac <__cxa_guard_release>
   d556e:	4a05      	ldr	r2, [pc, #20]	; (d5584 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5570:	4905      	ldr	r1, [pc, #20]	; (d5588 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5572:	4803      	ldr	r0, [pc, #12]	; (d5580 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5574:	f001 fade 	bl	d6b34 <__aeabi_atexit>
    return instance;
}
   d5578:	4801      	ldr	r0, [pc, #4]	; (d5580 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d557a:	bd10      	pop	{r4, pc}
   d557c:	2003e404 	.word	0x2003e404
   d5580:	2003e400 	.word	0x2003e400
   d5584:	2003dc4c 	.word	0x2003dc4c
   d5588:	000d5729 	.word	0x000d5729

000d558c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d558c:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d558e:	6803      	ldr	r3, [r0, #0]
   d5590:	3b09      	subs	r3, #9
   d5592:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5594:	b08a      	sub	sp, #40	; 0x28
   d5596:	4604      	mov	r4, r0
   d5598:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d559a:	d819      	bhi.n	d55d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d559c:	f7ff ffd8 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d55a0:	88a1      	ldrh	r1, [r4, #4]
   d55a2:	6800      	ldr	r0, [r0, #0]
   d55a4:	f7ff fe52 	bl	d524c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d55a8:	4602      	mov	r2, r0
   d55aa:	b958      	cbnz	r0, d55c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d55ac:	2320      	movs	r3, #32
   d55ae:	9302      	str	r3, [sp, #8]
   d55b0:	4b08      	ldr	r3, [pc, #32]	; (d55d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d55b2:	9003      	str	r0, [sp, #12]
   d55b4:	9300      	str	r3, [sp, #0]
   d55b6:	aa02      	add	r2, sp, #8
   d55b8:	4603      	mov	r3, r0
   d55ba:	4907      	ldr	r1, [pc, #28]	; (d55d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d55bc:	2032      	movs	r0, #50	; 0x32
   d55be:	f7ff f96b 	bl	d4898 <log_message>
   d55c2:	e005      	b.n	d55d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d55c4:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d55c6:	b11d      	cbz	r5, d55d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d55c8:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d55ca:	68e1      	ldr	r1, [r4, #12]
   d55cc:	6920      	ldr	r0, [r4, #16]
   d55ce:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d55d0:	b00a      	add	sp, #40	; 0x28
   d55d2:	bd70      	pop	{r4, r5, r6, pc}
   d55d4:	000d711a 	.word	0x000d711a
   d55d8:	000d70d0 	.word	0x000d70d0

000d55dc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d55dc:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d55de:	a801      	add	r0, sp, #4
   d55e0:	f7ff fbda 	bl	d4d98 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d55e4:	2000      	movs	r0, #0
   d55e6:	f7ff f80d 	bl	d4604 <hal_ble_stack_init>
   d55ea:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d55ec:	a801      	add	r0, sp, #4
   d55ee:	f7ff fbe1 	bl	d4db4 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d55f2:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d55f6:	b002      	add	sp, #8
   d55f8:	bd10      	pop	{r4, pc}
	...

000d55fc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d55fc:	b530      	push	{r4, r5, lr}
   d55fe:	b08b      	sub	sp, #44	; 0x2c
   d5600:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5602:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5604:	4614      	mov	r4, r2
    WiringBleLock lk;
   d5606:	f7ff fbc7 	bl	d4d98 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d560a:	b1b5      	cbz	r5, d563a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d560c:	b1ac      	cbz	r4, d563a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d560e:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5610:	a902      	add	r1, sp, #8
   d5612:	480d      	ldr	r0, [pc, #52]	; (d5648 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d5614:	9406      	str	r4, [sp, #24]
   d5616:	9202      	str	r2, [sp, #8]
   d5618:	9203      	str	r2, [sp, #12]
   d561a:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d561c:	9207      	str	r2, [sp, #28]
   d561e:	9208      	str	r2, [sp, #32]
   d5620:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d5622:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5624:	f7fe fff6 	bl	d4614 <hal_ble_gap_start_scan>
   d5628:	2800      	cmp	r0, #0
   d562a:	bfb8      	it	lt
   d562c:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d562e:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5630:	bfa8      	it	ge
   d5632:	9c07      	ldrge	r4, [sp, #28]
   d5634:	f7ff f9be 	bl	d49b4 <free>
   d5638:	e000      	b.n	d563c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d563a:	4c04      	ldr	r4, [pc, #16]	; (d564c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d563c:	a801      	add	r0, sp, #4
   d563e:	f7ff fbb9 	bl	d4db4 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d5642:	4620      	mov	r0, r4
   d5644:	b00b      	add	sp, #44	; 0x2c
   d5646:	bd30      	pop	{r4, r5, pc}
   d5648:	000d5b2f 	.word	0x000d5b2f
   d564c:	fffffef2 	.word	0xfffffef2

000d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5650:	680b      	ldr	r3, [r1, #0]
   d5652:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5654:	b113      	cbz	r3, d565c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5656:	685a      	ldr	r2, [r3, #4]
   d5658:	3201      	adds	r2, #1
   d565a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d565c:	4770      	bx	lr

000d565e <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d565e:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5660:	f851 3b04 	ldr.w	r3, [r1], #4
   d5664:	4604      	mov	r4, r0
   d5666:	f840 3b04 	str.w	r3, [r0], #4
   d566a:	f7ff fff1 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d566e:	6823      	ldr	r3, [r4, #0]
   d5670:	b90b      	cbnz	r3, d5676 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5672:	f7ff fb61 	bl	d4d38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5676:	4620      	mov	r0, r4
   d5678:	bd10      	pop	{r4, pc}

000d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d567a:	b510      	push	{r4, lr}
   d567c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5680:	4604      	mov	r4, r0
   d5682:	f840 3b04 	str.w	r3, [r0], #4
   d5686:	f7ff ffe3 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d568a:	4620      	mov	r0, r4
   d568c:	bd10      	pop	{r4, pc}

000d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d568e:	b510      	push	{r4, lr}
   d5690:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5692:	6800      	ldr	r0, [r0, #0]
   d5694:	b128      	cbz	r0, d56a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5696:	6843      	ldr	r3, [r0, #4]
   d5698:	3b01      	subs	r3, #1
   d569a:	6043      	str	r3, [r0, #4]
   d569c:	b90b      	cbnz	r3, d56a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d569e:	f7ff fb55 	bl	d4d4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d56a2:	4620      	mov	r0, r4
   d56a4:	bd10      	pop	{r4, pc}

000d56a6 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d56a6:	b510      	push	{r4, lr}
   d56a8:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56aa:	3004      	adds	r0, #4
   d56ac:	f7ff ffef 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d56b0:	4620      	mov	r0, r4
   d56b2:	bd10      	pop	{r4, pc}

000d56b4 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d56b4:	b510      	push	{r4, lr}
   d56b6:	4604      	mov	r4, r0
   d56b8:	3004      	adds	r0, #4
   d56ba:	f7ff ffe8 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d56be:	4620      	mov	r0, r4
   d56c0:	bd10      	pop	{r4, pc}

000d56c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56c2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d56c4:	6804      	ldr	r4, [r0, #0]
   d56c6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56c8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d56ca:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d56ce:	42a6      	cmp	r6, r4
   d56d0:	d004      	beq.n	d56dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d56d2:	1d20      	adds	r0, r4, #4
   d56d4:	f7ff ffdb 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56d8:	3408      	adds	r4, #8
   d56da:	e7f8      	b.n	d56ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d56dc:	6828      	ldr	r0, [r5, #0]
   d56de:	f7ff f969 	bl	d49b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d56e2:	4628      	mov	r0, r5
   d56e4:	bd70      	pop	{r4, r5, r6, pc}

000d56e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56e6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d56e8:	6804      	ldr	r4, [r0, #0]
   d56ea:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d56ec:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d56ee:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d56f2:	42a6      	cmp	r6, r4
   d56f4:	d004      	beq.n	d5700 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d56f6:	1d20      	adds	r0, r4, #4
   d56f8:	f7ff ffc9 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56fc:	3408      	adds	r4, #8
   d56fe:	e7f8      	b.n	d56f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5700:	6828      	ldr	r0, [r5, #0]
   d5702:	f7ff f957 	bl	d49b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5706:	4628      	mov	r0, r5
   d5708:	bd70      	pop	{r4, r5, r6, pc}

000d570a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d570a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d570c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d570e:	f104 0018 	add.w	r0, r4, #24
   d5712:	f7ff ffe8 	bl	d56e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5716:	f104 000c 	add.w	r0, r4, #12
   d571a:	f7ff ffd2 	bl	d56c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d571e:	4620      	mov	r0, r4
   d5720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5724:	f7fe bcb9 	b.w	d409a <_ZdlPv>

000d5728 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d572a:	6804      	ldr	r4, [r0, #0]
   d572c:	4607      	mov	r7, r0
   d572e:	b1c4      	cbz	r4, d5762 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5730:	69a5      	ldr	r5, [r4, #24]
   d5732:	69e3      	ldr	r3, [r4, #28]
   d5734:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5738:	42ae      	cmp	r6, r5
   d573a:	d004      	beq.n	d5746 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d573c:	1d28      	adds	r0, r5, #4
   d573e:	f7ff ffa6 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5742:	3508      	adds	r5, #8
   d5744:	e7f8      	b.n	d5738 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5746:	69a0      	ldr	r0, [r4, #24]
   d5748:	f7ff f934 	bl	d49b4 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d574c:	f104 000c 	add.w	r0, r4, #12
   d5750:	f7ff ffc9 	bl	d56e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5754:	4620      	mov	r0, r4
   d5756:	f7ff ffb4 	bl	d56c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d575a:	2134      	movs	r1, #52	; 0x34
   d575c:	4620      	mov	r0, r4
   d575e:	f001 f9f7 	bl	d6b50 <_ZdlPvj>
   d5762:	4638      	mov	r0, r7
   d5764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5768 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5768:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d576a:	2500      	movs	r5, #0
   d576c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d576e:	6045      	str	r5, [r0, #4]
   d5770:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5772:	2024      	movs	r0, #36	; 0x24
   d5774:	f7fe fc8f 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5778:	4604      	mov	r4, r0
   d577a:	b178      	cbz	r0, d579c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d577c:	4603      	mov	r3, r0
   d577e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5782:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5786:	f8c0 5002 	str.w	r5, [r0, #2]
   d578a:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d578c:	7285      	strb	r5, [r0, #10]
   d578e:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5790:	60c5      	str	r5, [r0, #12]
   d5792:	6105      	str	r5, [r0, #16]
   d5794:	6145      	str	r5, [r0, #20]
   d5796:	6185      	str	r5, [r0, #24]
   d5798:	61c5      	str	r5, [r0, #28]
   d579a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d579c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d579e:	2014      	movs	r0, #20
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	f7fe fc78 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d57a6:	4603      	mov	r3, r0
   d57a8:	b128      	cbz	r0, d57b6 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d57aa:	2201      	movs	r2, #1
   d57ac:	6042      	str	r2, [r0, #4]
   d57ae:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d57b0:	4a08      	ldr	r2, [pc, #32]	; (d57d4 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d57b2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d57b4:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d57b6:	a802      	add	r0, sp, #8
   d57b8:	6872      	ldr	r2, [r6, #4]
   d57ba:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d57be:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d57c0:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d57c2:	f7ff ff64 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d57c6:	6833      	ldr	r3, [r6, #0]
   d57c8:	b90b      	cbnz	r3, d57ce <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d57ca:	f7ff fab5 	bl	d4d38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d57ce:	4630      	mov	r0, r6
   d57d0:	b002      	add	sp, #8
   d57d2:	bd70      	pop	{r4, r5, r6, pc}
   d57d4:	000d70bc 	.word	0x000d70bc

000d57d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d57d8:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57da:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d57dc:	6803      	ldr	r3, [r0, #0]
   d57de:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d57e0:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d57e2:	d00c      	beq.n	d57fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d57e4:	b114      	cbz	r4, d57ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d57e6:	6863      	ldr	r3, [r4, #4]
   d57e8:	3301      	adds	r3, #1
   d57ea:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d57ec:	6828      	ldr	r0, [r5, #0]
   d57ee:	b128      	cbz	r0, d57fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d57f0:	6843      	ldr	r3, [r0, #4]
   d57f2:	3b01      	subs	r3, #1
   d57f4:	6043      	str	r3, [r0, #4]
   d57f6:	b90b      	cbnz	r3, d57fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d57f8:	f7ff faa8 	bl	d4d4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d57fc:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d57fe:	4628      	mov	r0, r5
   d5800:	bd38      	pop	{r3, r4, r5, pc}

000d5802 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d5802:	b510      	push	{r4, lr}
   d5804:	6802      	ldr	r2, [r0, #0]
   d5806:	680b      	ldr	r3, [r1, #0]
   d5808:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d580a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d580c:	b110      	cbz	r0, d5814 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d580e:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d5810:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d5812:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5814:	4620      	mov	r0, r4
   d5816:	f851 3b04 	ldr.w	r3, [r1], #4
   d581a:	f840 3b04 	str.w	r3, [r0], #4
   d581e:	f7ff ffdb 	bl	d57d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d5822:	4620      	mov	r0, r4
   d5824:	bd10      	pop	{r4, pc}

000d5826 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d5826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d582a:	6803      	ldr	r3, [r0, #0]
   d582c:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d582e:	69de      	ldr	r6, [r3, #28]
   d5830:	b087      	sub	sp, #28
   d5832:	460f      	mov	r7, r1
   d5834:	4690      	mov	r8, r2
   d5836:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d583a:	42b4      	cmp	r4, r6
   d583c:	46a1      	mov	r9, r4
   d583e:	d011      	beq.n	d5864 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d5840:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d5844:	a801      	add	r0, sp, #4
   d5846:	3114      	adds	r1, #20
   d5848:	f7ff fb06 	bl	d4e58 <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d584c:	4641      	mov	r1, r8
   d584e:	a801      	add	r0, sp, #4
   d5850:	f7ff fb6e 	bl	d4f30 <_ZNK8particle7BleUuideqERKS0_>
   d5854:	4605      	mov	r5, r0
   d5856:	2800      	cmp	r0, #0
   d5858:	d0ef      	beq.n	d583a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d585a:	4649      	mov	r1, r9
   d585c:	4638      	mov	r0, r7
   d585e:	f7ff ffd0 	bl	d5802 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d5862:	e000      	b.n	d5866 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d5864:	2500      	movs	r5, #0
}
   d5866:	4628      	mov	r0, r5
   d5868:	b007      	add	sp, #28
   d586a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d586e <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d586e:	b510      	push	{r4, lr}
   d5870:	f851 3b04 	ldr.w	r3, [r1], #4
   d5874:	4604      	mov	r4, r0
   d5876:	f840 3b04 	str.w	r3, [r0], #4
   d587a:	f7ff ffad 	bl	d57d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d587e:	4620      	mov	r0, r4
   d5880:	bd10      	pop	{r4, pc}

000d5882 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5882:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5884:	b570      	push	{r4, r5, r6, lr}
   d5886:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5888:	d91a      	bls.n	d58c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d588a:	4290      	cmp	r0, r2
   d588c:	d219      	bcs.n	d58c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d588e:	f1a1 0608 	sub.w	r6, r1, #8
   d5892:	1a51      	subs	r1, r2, r1
   d5894:	3904      	subs	r1, #4
   d5896:	1f15      	subs	r5, r2, #4
   d5898:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d589a:	1f2b      	subs	r3, r5, #4
   d589c:	429e      	cmp	r6, r3
   d589e:	d025      	beq.n	d58ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d58a0:	2c04      	cmp	r4, #4
   d58a2:	d007      	beq.n	d58b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58a4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d58a8:	f844 3c04 	str.w	r3, [r4, #-4]
   d58ac:	4629      	mov	r1, r5
   d58ae:	4620      	mov	r0, r4
   d58b0:	f7ff fece 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58b4:	4628      	mov	r0, r5
   d58b6:	f7ff feea 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ba:	3d08      	subs	r5, #8
   d58bc:	3c08      	subs	r4, #8
   d58be:	e7ec      	b.n	d589a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d58c0:	d014      	beq.n	d58ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d58c2:	1d0c      	adds	r4, r1, #4
   d58c4:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d58c6:	1f23      	subs	r3, r4, #4
   d58c8:	429d      	cmp	r5, r3
   d58ca:	d00f      	beq.n	d58ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d58cc:	2e04      	cmp	r6, #4
   d58ce:	d007      	beq.n	d58e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d58d4:	f846 3c04 	str.w	r3, [r6, #-4]
   d58d8:	4621      	mov	r1, r4
   d58da:	4630      	mov	r0, r6
   d58dc:	f7ff feb8 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58e0:	4620      	mov	r0, r4
   d58e2:	f7ff fed4 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58e6:	3408      	adds	r4, #8
   d58e8:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d58ea:	e7ec      	b.n	d58c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d58ec:	bd70      	pop	{r4, r5, r6, pc}

000d58ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d58ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d58f2:	6804      	ldr	r4, [r0, #0]
   d58f4:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d58f6:	4605      	mov	r5, r0
   d58f8:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d58fa:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d58fe:	42a7      	cmp	r7, r4
   d5900:	d018      	beq.n	d5934 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5902:	4641      	mov	r1, r8
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff fddb 	bl	d54c0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d590a:	4606      	mov	r6, r0
   d590c:	b908      	cbnz	r0, d5912 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d590e:	3408      	adds	r4, #8
   d5910:	e7f5      	b.n	d58fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5912:	b18c      	cbz	r4, d5938 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5914:	1d20      	adds	r0, r4, #4
   d5916:	f7ff feba 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d591a:	682b      	ldr	r3, [r5, #0]
   d591c:	686a      	ldr	r2, [r5, #4]
   d591e:	f104 0108 	add.w	r1, r4, #8
   d5922:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5926:	4620      	mov	r0, r4
   d5928:	f7ff ffab 	bl	d5882 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d592c:	686b      	ldr	r3, [r5, #4]
   d592e:	3b01      	subs	r3, #1
   d5930:	606b      	str	r3, [r5, #4]
    return true;
   d5932:	e002      	b.n	d593a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5934:	2600      	movs	r6, #0
   d5936:	e000      	b.n	d593a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5938:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d593a:	4630      	mov	r0, r6
   d593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5940 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5942:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5944:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5948:	6847      	ldr	r7, [r0, #4]
   d594a:	9300      	str	r3, [sp, #0]
   d594c:	a801      	add	r0, sp, #4
   d594e:	f7ff fe7f 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5952:	6866      	ldr	r6, [r4, #4]
   d5954:	68a3      	ldr	r3, [r4, #8]
   d5956:	429e      	cmp	r6, r3
   d5958:	db14      	blt.n	d5984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d595a:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d595c:	2e00      	cmp	r6, #0
   d595e:	dd0b      	ble.n	d5978 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5960:	00f0      	lsls	r0, r6, #3
   d5962:	f7ff f81f 	bl	d49a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5966:	4605      	mov	r5, r0
   d5968:	b318      	cbz	r0, d59b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d596a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d596e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5972:	f7ff ff86 	bl	d5882 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5976:	e000      	b.n	d597a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5978:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d597a:	6820      	ldr	r0, [r4, #0]
   d597c:	f7ff f81a 	bl	d49b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5980:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5982:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5984:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5986:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5988:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d598c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5990:	4629      	mov	r1, r5
   d5992:	f105 0008 	add.w	r0, r5, #8
   d5996:	f7ff ff74 	bl	d5882 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d599a:	b135      	cbz	r5, d59aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d599c:	9b00      	ldr	r3, [sp, #0]
   d599e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d59a2:	a901      	add	r1, sp, #4
   d59a4:	1d28      	adds	r0, r5, #4
   d59a6:	f7ff fe53 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d59aa:	6863      	ldr	r3, [r4, #4]
   d59ac:	3301      	adds	r3, #1
   d59ae:	6063      	str	r3, [r4, #4]
   d59b0:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d59b2:	a801      	add	r0, sp, #4
   d59b4:	f7ff fe6b 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d59b8:	4628      	mov	r0, r5
   d59ba:	b003      	add	sp, #12
   d59bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d59c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c4:	4604      	mov	r4, r0
   d59c6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d59c8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d59ca:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d59cc:	f7ff f9e4 	bl	d4d98 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d59d0:	6823      	ldr	r3, [r4, #0]
   d59d2:	2b03      	cmp	r3, #3
   d59d4:	d002      	beq.n	d59dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d59d6:	2b04      	cmp	r3, #4
   d59d8:	d042      	beq.n	d5a60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d59da:	e087      	b.n	d5aec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d59dc:	a804      	add	r0, sp, #16
   d59de:	f7ff fec3 	bl	d5768 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d59e2:	9b04      	ldr	r3, [sp, #16]
   d59e4:	8922      	ldrh	r2, [r4, #8]
   d59e6:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d59e8:	6862      	ldr	r2, [r4, #4]
   d59ea:	9904      	ldr	r1, [sp, #16]
   d59ec:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d59f0:	f8c1 3002 	str.w	r3, [r1, #2]
   d59f4:	6853      	ldr	r3, [r2, #4]
   d59f6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59fa:	a807      	add	r0, sp, #28
   d59fc:	9b04      	ldr	r3, [sp, #16]
   d59fe:	9306      	str	r3, [sp, #24]
   d5a00:	a905      	add	r1, sp, #20
   d5a02:	f7ff fe25 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5a06:	a906      	add	r1, sp, #24
   d5a08:	f105 0018 	add.w	r0, r5, #24
   d5a0c:	f7ff ff98 	bl	d5940 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5a10:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a12:	a807      	add	r0, sp, #28
   d5a14:	f7ff fe3b 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a18:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5a1a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5a1c:	b974      	cbnz	r4, d5a3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5a1e:	4b36      	ldr	r3, [pc, #216]	; (d5af8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5a20:	9300      	str	r3, [sp, #0]
   d5a22:	aa06      	add	r2, sp, #24
   d5a24:	4623      	mov	r3, r4
   d5a26:	4935      	ldr	r1, [pc, #212]	; (d5afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5a28:	9407      	str	r4, [sp, #28]
   d5a2a:	2032      	movs	r0, #50	; 0x32
   d5a2c:	f7fe ff34 	bl	d4898 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5a30:	9b04      	ldr	r3, [sp, #16]
   d5a32:	4621      	mov	r1, r4
   d5a34:	8818      	ldrh	r0, [r3, #0]
   d5a36:	f7fe fdff 	bl	d4638 <hal_ble_gap_disconnect>
   d5a3a:	e00d      	b.n	d5a58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5a3c:	4a30      	ldr	r2, [pc, #192]	; (d5b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5a3e:	9200      	str	r2, [sp, #0]
   d5a40:	2300      	movs	r3, #0
   d5a42:	aa06      	add	r2, sp, #24
   d5a44:	492d      	ldr	r1, [pc, #180]	; (d5afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5a46:	9307      	str	r3, [sp, #28]
   d5a48:	2001      	movs	r0, #1
   d5a4a:	f7fe ff25 	bl	d4898 <log_message>
                if (impl->connectedCb_) {
   d5a4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5a50:	b113      	cbz	r3, d5a58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5a52:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5a54:	a804      	add	r0, sp, #16
   d5a56:	4798      	blx	r3
   d5a58:	a805      	add	r0, sp, #20
   d5a5a:	f7ff fe18 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a5e:	e045      	b.n	d5aec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5a60:	8921      	ldrh	r1, [r4, #8]
   d5a62:	4628      	mov	r0, r5
   d5a64:	f7ff fbf2 	bl	d524c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5a68:	4607      	mov	r7, r0
   d5a6a:	2800      	cmp	r0, #0
   d5a6c:	d03e      	beq.n	d5aec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5a6e:	6804      	ldr	r4, [r0, #0]
   d5a70:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5a72:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5a78:	8022      	strh	r2, [r4, #0]
   d5a7a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5a7e:	4299      	cmp	r1, r3
   d5a80:	d003      	beq.n	d5a8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5a82:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5a86:	8042      	strh	r2, [r0, #2]
   d5a88:	e7f9      	b.n	d5a7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5a8a:	68e6      	ldr	r6, [r4, #12]
   d5a8c:	6923      	ldr	r3, [r4, #16]
   d5a8e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5a92:	45b0      	cmp	r8, r6
   d5a94:	d004      	beq.n	d5aa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5a96:	1d30      	adds	r0, r6, #4
   d5a98:	f7ff fdf9 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a9c:	3608      	adds	r6, #8
   d5a9e:	e7f8      	b.n	d5a92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5aa0:	2300      	movs	r3, #0
   d5aa2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5aa4:	69a6      	ldr	r6, [r4, #24]
   d5aa6:	69e3      	ldr	r3, [r4, #28]
   d5aa8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5aac:	45b0      	cmp	r8, r6
   d5aae:	d004      	beq.n	d5aba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5ab0:	1d30      	adds	r0, r6, #4
   d5ab2:	f7ff fdec 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ab6:	3608      	adds	r6, #8
   d5ab8:	e7f8      	b.n	d5aac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5aba:	2300      	movs	r3, #0
   d5abc:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5abe:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5ac0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5ac2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5ac4:	b113      	cbz	r3, d5acc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5ac6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5ac8:	4638      	mov	r0, r7
   d5aca:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5acc:	2320      	movs	r3, #32
   d5ace:	4a0d      	ldr	r2, [pc, #52]	; (d5b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5ad0:	9306      	str	r3, [sp, #24]
   d5ad2:	9200      	str	r2, [sp, #0]
   d5ad4:	2300      	movs	r3, #0
   d5ad6:	4909      	ldr	r1, [pc, #36]	; (d5afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5ad8:	9307      	str	r3, [sp, #28]
   d5ada:	2001      	movs	r0, #1
   d5adc:	aa06      	add	r2, sp, #24
   d5ade:	f7fe fedb 	bl	d4898 <log_message>
                    impl->peers_.removeOne(*peer);
   d5ae2:	4639      	mov	r1, r7
   d5ae4:	f105 0018 	add.w	r0, r5, #24
   d5ae8:	f7ff ff01 	bl	d58ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5aec:	a803      	add	r0, sp, #12
   d5aee:	f7ff f961 	bl	d4db4 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5af2:	b00e      	add	sp, #56	; 0x38
   d5af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5af8:	000d7132 	.word	0x000d7132
   d5afc:	000d70d0 	.word	0x000d70d0
   d5b00:	000d7158 	.word	0x000d7158
   d5b04:	000d7175 	.word	0x000d7175

000d5b08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5b08:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d5b0a:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5b0c:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d5b0e:	dd06      	ble.n	d5b1e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5b10:	2154      	movs	r1, #84	; 0x54
   d5b12:	4369      	muls	r1, r5
   d5b14:	6800      	ldr	r0, [r0, #0]
   d5b16:	f7fe ff55 	bl	d49c4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5b1a:	b920      	cbnz	r0, d5b26 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d5b1c:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b1e:	6800      	ldr	r0, [r0, #0]
   d5b20:	f7fe ff48 	bl	d49b4 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5b24:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5b26:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5b28:	60a5      	str	r5, [r4, #8]
        return true;
   d5b2a:	2001      	movs	r0, #1
    }
   d5b2c:	bd38      	pop	{r3, r4, r5, pc}

000d5b2e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5b2e:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5b30:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5b32:	b0c0      	sub	sp, #256	; 0x100
   d5b34:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5b36:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5b38:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5b3a:	a801      	add	r0, sp, #4
   d5b3c:	2100      	movs	r1, #0
   d5b3e:	f001 f9a4 	bl	d6e8a <memset>
   d5b42:	a803      	add	r0, sp, #12
   d5b44:	f7ff fae4 	bl	d5110 <_ZN8particle18BleAdvertisingDataC1Ev>
   d5b48:	a80c      	add	r0, sp, #48	; 0x30
   d5b4a:	f7ff fae1 	bl	d5110 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5b4e:	462a      	mov	r2, r5
   d5b50:	ab01      	add	r3, sp, #4
   d5b52:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5b56:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5b58:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5b5a:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5b5c:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5b5e:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5b60:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5b64:	a80c      	add	r0, sp, #48	; 0x30
   d5b66:	f7ff fa64 	bl	d5032 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d5b6a:	89aa      	ldrh	r2, [r5, #12]
   d5b6c:	6869      	ldr	r1, [r5, #4]
   d5b6e:	a803      	add	r0, sp, #12
   d5b70:	f7ff fa5f 	bl	d5032 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d5b74:	69a5      	ldr	r5, [r4, #24]
   d5b76:	b11d      	cbz	r5, d5b80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5b78:	69e1      	ldr	r1, [r4, #28]
   d5b7a:	a801      	add	r0, sp, #4
   d5b7c:	47a8      	blx	r5
   d5b7e:	e03c      	b.n	d5bfa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d5b80:	68e0      	ldr	r0, [r4, #12]
   d5b82:	b198      	cbz	r0, d5bac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d5b84:	6963      	ldr	r3, [r4, #20]
   d5b86:	6922      	ldr	r2, [r4, #16]
   d5b88:	4293      	cmp	r3, r2
   d5b8a:	d239      	bcs.n	d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d5b8c:	1c5a      	adds	r2, r3, #1
   d5b8e:	6162      	str	r2, [r4, #20]
   d5b90:	fb06 0003 	mla	r0, r6, r3, r0
   d5b94:	2251      	movs	r2, #81	; 0x51
   d5b96:	a901      	add	r1, sp, #4
   d5b98:	f001 f951 	bl	d6e3e <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d5b9c:	6962      	ldr	r2, [r4, #20]
   d5b9e:	6923      	ldr	r3, [r4, #16]
   d5ba0:	429a      	cmp	r2, r3
   d5ba2:	d32d      	bcc.n	d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d5ba4:	4628      	mov	r0, r5
   d5ba6:	f7fe fd3d 	bl	d4624 <hal_ble_gap_stop_scan>
   d5baa:	e029      	b.n	d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d5bac:	4632      	mov	r2, r6
   d5bae:	a901      	add	r1, sp, #4
   d5bb0:	a816      	add	r0, sp, #88	; 0x58
   d5bb2:	f001 f944 	bl	d6e3e <memcpy>
   d5bb6:	4632      	mov	r2, r6
   d5bb8:	a916      	add	r1, sp, #88	; 0x58
   d5bba:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5bbc:	6865      	ldr	r5, [r4, #4]
   d5bbe:	f001 f93e 	bl	d6e3e <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5bc2:	68a3      	ldr	r3, [r4, #8]
   d5bc4:	429d      	cmp	r5, r3
   d5bc6:	db04      	blt.n	d5bd2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d5bc8:	1c69      	adds	r1, r5, #1
   d5bca:	4620      	mov	r0, r4
   d5bcc:	f7ff ff9c 	bl	d5b08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5bd0:	b1b0      	cbz	r0, d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5bd2:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5bd4:	6822      	ldr	r2, [r4, #0]
   d5bd6:	2654      	movs	r6, #84	; 0x54
   d5bd8:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5bdc:	fb06 2203 	mla	r2, r6, r3, r2
   d5be0:	1b52      	subs	r2, r2, r5
   d5be2:	4629      	mov	r1, r5
   d5be4:	19a8      	adds	r0, r5, r6
   d5be6:	f001 f935 	bl	d6e54 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d5bea:	4632      	mov	r2, r6
   d5bec:	a92b      	add	r1, sp, #172	; 0xac
   d5bee:	4628      	mov	r0, r5
   d5bf0:	f001 f925 	bl	d6e3e <memcpy>
    ++size_;
   d5bf4:	6863      	ldr	r3, [r4, #4]
   d5bf6:	3301      	adds	r3, #1
   d5bf8:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d5bfa:	6963      	ldr	r3, [r4, #20]
   d5bfc:	3301      	adds	r3, #1
   d5bfe:	6163      	str	r3, [r4, #20]
        }
    }
   d5c00:	b040      	add	sp, #256	; 0x100
   d5c02:	bd70      	pop	{r4, r5, r6, pc}

000d5c04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5c04:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c08:	4606      	mov	r6, r0
   d5c0a:	460c      	mov	r4, r1
   d5c0c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5c0e:	d914      	bls.n	d5c3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5c10:	4290      	cmp	r0, r2
   d5c12:	d213      	bcs.n	d5c3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5c14:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5c18:	1a6c      	subs	r4, r5, r1
   d5c1a:	f1a1 0708 	sub.w	r7, r1, #8
   d5c1e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5c20:	42af      	cmp	r7, r5
   d5c22:	d018      	beq.n	d5c56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5c24:	b11c      	cbz	r4, d5c2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5c26:	4629      	mov	r1, r5
   d5c28:	4620      	mov	r0, r4
   d5c2a:	f7ff fd26 	bl	d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5c2e:	1d28      	adds	r0, r5, #4
   d5c30:	f7ff fd2d 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5c34:	3d08      	subs	r5, #8
   d5c36:	3c08      	subs	r4, #8
   d5c38:	e7f2      	b.n	d5c20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5c3a:	d00c      	beq.n	d5c56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5c3c:	42ac      	cmp	r4, r5
   d5c3e:	d00a      	beq.n	d5c56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5c40:	b11e      	cbz	r6, d5c4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5c42:	4621      	mov	r1, r4
   d5c44:	4630      	mov	r0, r6
   d5c46:	f7ff fd18 	bl	d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5c4a:	1d20      	adds	r0, r4, #4
   d5c4c:	f7ff fd1f 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c50:	3408      	adds	r4, #8
   d5c52:	3608      	adds	r6, #8
   d5c54:	e7f2      	b.n	d5c3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5c58:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5c5a:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5c5c:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5c5e:	dd0b      	ble.n	d5c78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5c60:	00f0      	lsls	r0, r6, #3
   d5c62:	f7fe fe9f 	bl	d49a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5c66:	4604      	mov	r4, r0
   d5c68:	b170      	cbz	r0, d5c88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5c6a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5c6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5c72:	f7ff ffc7 	bl	d5c04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5c76:	e000      	b.n	d5c7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5c78:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5c7a:	6828      	ldr	r0, [r5, #0]
   d5c7c:	f7fe fe9a 	bl	d49b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5c80:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5c82:	60ae      	str	r6, [r5, #8]
        return true;
   d5c84:	2001      	movs	r0, #1
   d5c86:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5c88:	bd70      	pop	{r4, r5, r6, pc}

000d5c8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5c8e:	2300      	movs	r3, #0
   d5c90:	6003      	str	r3, [r0, #0]
   d5c92:	6043      	str	r3, [r0, #4]
   d5c94:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c96:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c98:	6849      	ldr	r1, [r1, #4]
   d5c9a:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5c9c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5c9e:	dd13      	ble.n	d5cc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d5ca0:	f7ff ffda 	bl	d5c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5ca4:	b180      	cbz	r0, d5cc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5ca6:	6835      	ldr	r5, [r6, #0]
   d5ca8:	6873      	ldr	r3, [r6, #4]
   d5caa:	6827      	ldr	r7, [r4, #0]
   d5cac:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5cb0:	4545      	cmp	r5, r8
   d5cb2:	d007      	beq.n	d5cc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d5cb4:	b11f      	cbz	r7, d5cbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d5cb6:	4629      	mov	r1, r5
   d5cb8:	4638      	mov	r0, r7
   d5cba:	f7ff fcde 	bl	d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5cbe:	3508      	adds	r5, #8
   d5cc0:	3708      	adds	r7, #8
   d5cc2:	e7f5      	b.n	d5cb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d5cc4:	6873      	ldr	r3, [r6, #4]
   d5cc6:	6063      	str	r3, [r4, #4]
    }
}
   d5cc8:	4620      	mov	r0, r4
   d5cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cce <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d5cce:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d5cd0:	680b      	ldr	r3, [r1, #0]
   d5cd2:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d5cd4:	4605      	mov	r5, r0
   d5cd6:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d5cd8:	b933      	cbnz	r3, d5ce8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d5cda:	4608      	mov	r0, r1
   d5cdc:	f7ff f80e 	bl	d4cfc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d5ce0:	b910      	cbnz	r0, d5ce8 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d5ce2:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d5ce4:	2201      	movs	r2, #1
   d5ce6:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d5ce8:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d5cea:	4628      	mov	r0, r5
   d5cec:	310c      	adds	r1, #12
   d5cee:	f7ff ffcc 	bl	d5c8a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d5cf2:	4628      	mov	r0, r5
   d5cf4:	bd38      	pop	{r3, r4, r5, pc}

000d5cf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5cf8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5cfa:	6845      	ldr	r5, [r0, #4]
   d5cfc:	4668      	mov	r0, sp
   d5cfe:	f7ff fcbc 	bl	d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d02:	6861      	ldr	r1, [r4, #4]
   d5d04:	68a3      	ldr	r3, [r4, #8]
   d5d06:	4299      	cmp	r1, r3
   d5d08:	db05      	blt.n	d5d16 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5d0a:	3101      	adds	r1, #1
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f7ff ffa3 	bl	d5c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5d12:	4606      	mov	r6, r0
   d5d14:	b198      	cbz	r0, d5d3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5d16:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5d18:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5d1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5d1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d22:	4629      	mov	r1, r5
   d5d24:	f105 0008 	add.w	r0, r5, #8
   d5d28:	f7ff ff6c 	bl	d5c04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5d2c:	b11d      	cbz	r5, d5d36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5d2e:	4669      	mov	r1, sp
   d5d30:	4628      	mov	r0, r5
   d5d32:	f7ff fca2 	bl	d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5d36:	6863      	ldr	r3, [r4, #4]
   d5d38:	3301      	adds	r3, #1
   d5d3a:	6063      	str	r3, [r4, #4]
   d5d3c:	2601      	movs	r6, #1
   d5d3e:	a801      	add	r0, sp, #4
   d5d40:	f7ff fca5 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5d44:	4630      	mov	r0, r6
   d5d46:	b002      	add	sp, #8
   d5d48:	bd70      	pop	{r4, r5, r6, pc}

000d5d4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5d4a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d4e:	4606      	mov	r6, r0
   d5d50:	460c      	mov	r4, r1
   d5d52:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5d54:	d914      	bls.n	d5d80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5d56:	4290      	cmp	r0, r2
   d5d58:	d213      	bcs.n	d5d82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5d5a:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5d5e:	1a6c      	subs	r4, r5, r1
   d5d60:	f1a1 0708 	sub.w	r7, r1, #8
   d5d64:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5d66:	42af      	cmp	r7, r5
   d5d68:	d018      	beq.n	d5d9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5d6a:	b11c      	cbz	r4, d5d74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5d6c:	4629      	mov	r1, r5
   d5d6e:	4620      	mov	r0, r4
   d5d70:	f7ff fc75 	bl	d565e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5d74:	1d28      	adds	r0, r5, #4
   d5d76:	f7ff fc8a 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5d7a:	3d08      	subs	r5, #8
   d5d7c:	3c08      	subs	r4, #8
   d5d7e:	e7f2      	b.n	d5d66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5d80:	d00c      	beq.n	d5d9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5d82:	42ac      	cmp	r4, r5
   d5d84:	d00a      	beq.n	d5d9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5d86:	b11e      	cbz	r6, d5d90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5d88:	4621      	mov	r1, r4
   d5d8a:	4630      	mov	r0, r6
   d5d8c:	f7ff fc67 	bl	d565e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5d90:	1d20      	adds	r0, r4, #4
   d5d92:	f7ff fc7c 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5d96:	3408      	adds	r4, #8
   d5d98:	3608      	adds	r6, #8
   d5d9a:	e7f2      	b.n	d5d82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5d9e:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5da0:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5da2:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5da4:	dd0b      	ble.n	d5dbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5da6:	00f0      	lsls	r0, r6, #3
   d5da8:	f7fe fdfc 	bl	d49a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5dac:	4604      	mov	r4, r0
   d5dae:	b170      	cbz	r0, d5dce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5db0:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5db4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5db8:	f7ff ffc7 	bl	d5d4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5dbc:	e000      	b.n	d5dc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5dbe:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5dc0:	6828      	ldr	r0, [r5, #0]
   d5dc2:	f7fe fdf7 	bl	d49b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5dc6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5dc8:	60ae      	str	r6, [r5, #8]
        return true;
   d5dca:	2001      	movs	r0, #1
   d5dcc:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5dce:	bd70      	pop	{r4, r5, r6, pc}

000d5dd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5dd4:	2300      	movs	r3, #0
   d5dd6:	6003      	str	r3, [r0, #0]
   d5dd8:	6043      	str	r3, [r0, #4]
   d5dda:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5ddc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5dde:	6849      	ldr	r1, [r1, #4]
   d5de0:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5de2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5de4:	dd13      	ble.n	d5e0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d5de6:	f7ff ffda 	bl	d5d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5dea:	b180      	cbz	r0, d5e0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5dec:	6835      	ldr	r5, [r6, #0]
   d5dee:	6873      	ldr	r3, [r6, #4]
   d5df0:	6827      	ldr	r7, [r4, #0]
   d5df2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5df6:	4545      	cmp	r5, r8
   d5df8:	d007      	beq.n	d5e0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d5dfa:	b11f      	cbz	r7, d5e04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d5dfc:	4629      	mov	r1, r5
   d5dfe:	4638      	mov	r0, r7
   d5e00:	f7ff fc2d 	bl	d565e <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d5e04:	3508      	adds	r5, #8
   d5e06:	3708      	adds	r7, #8
   d5e08:	e7f5      	b.n	d5df6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d5e0a:	6873      	ldr	r3, [r6, #4]
   d5e0c:	6063      	str	r3, [r4, #4]
    }
}
   d5e0e:	4620      	mov	r0, r4
   d5e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e14 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d5e14:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d5e16:	680b      	ldr	r3, [r1, #0]
   d5e18:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d5e1a:	b085      	sub	sp, #20
   d5e1c:	4605      	mov	r5, r0
   d5e1e:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d5e20:	b92b      	cbnz	r3, d5e2e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d5e22:	a801      	add	r0, sp, #4
   d5e24:	f7ff ff53 	bl	d5cce <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d5e28:	a801      	add	r0, sp, #4
   d5e2a:	f7ff fc4a 	bl	d56c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d5e2e:	6823      	ldr	r3, [r4, #0]
   d5e30:	7adb      	ldrb	r3, [r3, #11]
   d5e32:	b93b      	cbnz	r3, d5e44 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d5e34:	4621      	mov	r1, r4
   d5e36:	a801      	add	r0, sp, #4
   d5e38:	f7ff fac0 	bl	d53bc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d5e3c:	b910      	cbnz	r0, d5e44 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d5e3e:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d5e40:	2201      	movs	r2, #1
   d5e42:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5e44:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d5e46:	4628      	mov	r0, r5
   d5e48:	3118      	adds	r1, #24
   d5e4a:	f7ff ffc1 	bl	d5dd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d5e4e:	4628      	mov	r0, r5
   d5e50:	b005      	add	sp, #20
   d5e52:	bd30      	pop	{r4, r5, pc}

000d5e54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d5e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e58:	460d      	mov	r5, r1
   d5e5a:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d5e5c:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d5e60:	4617      	mov	r7, r2
   d5e62:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d5e64:	4642      	mov	r2, r8
   d5e66:	2100      	movs	r1, #0
   d5e68:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d5e6a:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d5e6c:	f001 f80d 	bl	d6e8a <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d5e70:	6869      	ldr	r1, [r5, #4]
   d5e72:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d5e74:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d5e76:	ab02      	add	r3, sp, #8
   d5e78:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d5e7a:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d5e7e:	ab05      	add	r3, sp, #20
   d5e80:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d5e84:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d5e88:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d5e8c:	f7ff fb60 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5e90:	4b34      	ldr	r3, [pc, #208]	; (d5f64 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d5e92:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d5e94:	f7ff fb5c 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d5e98:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e9a:	6803      	ldr	r3, [r0, #0]
   d5e9c:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d5e9e:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d5ea0:	a804      	add	r0, sp, #16
   d5ea2:	f7fe fc0f 	bl	d46c4 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d5ea6:	4607      	mov	r7, r0
   d5ea8:	b120      	cbz	r0, d5eb4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d5eaa:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5eb0:	801a      	strh	r2, [r3, #0]
        return ret;
   d5eb2:	e053      	b.n	d5f5c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d5eb4:	4629      	mov	r1, r5
   d5eb6:	4630      	mov	r0, r6
   d5eb8:	f7ff faf2 	bl	d54a0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d5ebc:	f7ff fb48 	bl	d5550 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ec0:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d5ec2:	6803      	ldr	r3, [r0, #0]
   d5ec4:	ad12      	add	r5, sp, #72	; 0x48
   d5ec6:	f103 0818 	add.w	r8, r3, #24
   d5eca:	f851 3b04 	ldr.w	r3, [r1], #4
   d5ece:	f845 3d20 	str.w	r3, [r5, #-32]!
   d5ed2:	a80b      	add	r0, sp, #44	; 0x2c
   d5ed4:	f7ff fbbc 	bl	d5650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d5ed8:	4629      	mov	r1, r5
   d5eda:	4640      	mov	r0, r8
   d5edc:	f7ff fd30 	bl	d5940 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5ee0:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ee2:	a80b      	add	r0, sp, #44	; 0x2c
   d5ee4:	f7ff fbd3 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ee8:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d5eea:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d5eec:	f1b8 0f00 	cmp.w	r8, #0
   d5ef0:	d114      	bne.n	d5f1c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d5ef2:	4b1d      	ldr	r3, [pc, #116]	; (d5f68 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d5ef4:	9300      	str	r3, [sp, #0]
   d5ef6:	462a      	mov	r2, r5
   d5ef8:	4643      	mov	r3, r8
   d5efa:	491c      	ldr	r1, [pc, #112]	; (d5f6c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d5efc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d5f00:	2032      	movs	r0, #50	; 0x32
   d5f02:	f7fe fcc9 	bl	d4898 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d5f06:	6833      	ldr	r3, [r6, #0]
   d5f08:	4641      	mov	r1, r8
   d5f0a:	8818      	ldrh	r0, [r3, #0]
   d5f0c:	f7fe fb94 	bl	d4638 <hal_ble_gap_disconnect>
   d5f10:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d5f12:	4817      	ldr	r0, [pc, #92]	; (d5f70 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f18:	801a      	strh	r2, [r3, #0]
   d5f1a:	e01f      	b.n	d5f5c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d5f1c:	4b15      	ldr	r3, [pc, #84]	; (d5f74 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d5f1e:	9300      	str	r3, [sp, #0]
   d5f20:	462a      	mov	r2, r5
   d5f22:	463b      	mov	r3, r7
   d5f24:	4911      	ldr	r1, [pc, #68]	; (d5f6c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d5f26:	970b      	str	r7, [sp, #44]	; 0x2c
   d5f28:	4648      	mov	r0, r9
   d5f2a:	f7fe fcb5 	bl	d4898 <log_message>
    if (automatic) {
   d5f2e:	b1a4      	cbz	r4, d5f5a <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d5f30:	4631      	mov	r1, r6
   d5f32:	4628      	mov	r0, r5
   d5f34:	f7ff ff6e 	bl	d5e14 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d5f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5f3c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d5f40:	42a6      	cmp	r6, r4
   d5f42:	d005      	beq.n	d5f50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d5f44:	4620      	mov	r0, r4
   d5f46:	2101      	movs	r1, #1
   d5f48:	f7ff f9f4 	bl	d5334 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d5f4c:	3408      	adds	r4, #8
   d5f4e:	e7f7      	b.n	d5f40 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d5f50:	4628      	mov	r0, r5
   d5f52:	f7ff fbc8 	bl	d56e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d5f56:	2000      	movs	r0, #0
   d5f58:	e000      	b.n	d5f5c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d5f5a:	4620      	mov	r0, r4
}
   d5f5c:	b013      	add	sp, #76	; 0x4c
   d5f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5f62:	bf00      	nop
   d5f64:	000d59c1 	.word	0x000d59c1
   d5f68:	000d7194 	.word	0x000d7194
   d5f6c:	000d70d0 	.word	0x000d70d0
   d5f70:	fffffefc 	.word	0xfffffefc
   d5f74:	000d71b0 	.word	0x000d71b0

000d5f78 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d5f78:	b570      	push	{r4, r5, r6, lr}
   d5f7a:	4604      	mov	r4, r0
   d5f7c:	4615      	mov	r5, r2
   d5f7e:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d5f80:	f7ff fbf2 	bl	d5768 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d5f84:	4633      	mov	r3, r6
   d5f86:	2200      	movs	r2, #0
   d5f88:	4629      	mov	r1, r5
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f7ff ff62 	bl	d5e54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d5f90:	4620      	mov	r0, r4
   d5f92:	bd70      	pop	{r4, r5, r6, pc}

000d5f94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5f94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f96:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5f98:	6845      	ldr	r5, [r0, #4]
   d5f9a:	4668      	mov	r0, sp
   d5f9c:	f7ff fb5f 	bl	d565e <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5fa0:	6861      	ldr	r1, [r4, #4]
   d5fa2:	68a3      	ldr	r3, [r4, #8]
   d5fa4:	4299      	cmp	r1, r3
   d5fa6:	db05      	blt.n	d5fb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5fa8:	3101      	adds	r1, #1
   d5faa:	4620      	mov	r0, r4
   d5fac:	f7ff fef7 	bl	d5d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5fb0:	4606      	mov	r6, r0
   d5fb2:	b198      	cbz	r0, d5fdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5fb4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5fb6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5fb8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5fbc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5fc0:	4629      	mov	r1, r5
   d5fc2:	f105 0008 	add.w	r0, r5, #8
   d5fc6:	f7ff fec0 	bl	d5d4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5fca:	b11d      	cbz	r5, d5fd4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5fcc:	4669      	mov	r1, sp
   d5fce:	4628      	mov	r0, r5
   d5fd0:	f7ff fb45 	bl	d565e <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5fd4:	6863      	ldr	r3, [r4, #4]
   d5fd6:	3301      	adds	r3, #1
   d5fd8:	6063      	str	r3, [r4, #4]
   d5fda:	2601      	movs	r6, #1
   d5fdc:	a801      	add	r0, sp, #4
   d5fde:	f7ff fb56 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5fe2:	4630      	mov	r0, r6
   d5fe4:	b002      	add	sp, #8
   d5fe6:	bd70      	pop	{r4, r5, r6, pc}

000d5fe8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5fe8:	b510      	push	{r4, lr}
   d5fea:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5fec:	6840      	ldr	r0, [r0, #4]
   d5fee:	b108      	cbz	r0, d5ff4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5ff0:	f7fe f853 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	bd10      	pop	{r4, pc}

000d5ff8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5ff8:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5ffa:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5ffc:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5ffe:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6002:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6006:	f7fe fde1 	bl	d4bcc <_ZN6StringD1Ev>
   d600a:	4668      	mov	r0, sp
   d600c:	f7ff ffec 	bl	d5fe8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6010:	b003      	add	sp, #12
   d6012:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6018 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6018:	b538      	push	{r3, r4, r5, lr}
   d601a:	2300      	movs	r3, #0
   d601c:	4604      	mov	r4, r0
   d601e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6020:	2014      	movs	r0, #20
   d6022:	460d      	mov	r5, r1
   d6024:	f7fe f837 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6028:	b128      	cbz	r0, d6036 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d602a:	2301      	movs	r3, #1
   d602c:	6043      	str	r3, [r0, #4]
   d602e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6030:	4b02      	ldr	r3, [pc, #8]	; (d603c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6032:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6034:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6036:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6038:	4620      	mov	r0, r4
   d603a:	bd38      	pop	{r3, r4, r5, pc}
   d603c:	000d7084 	.word	0x000d7084

000d6040 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d6040:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6042:	2500      	movs	r5, #0
   d6044:	b086      	sub	sp, #24
   d6046:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6048:	6045      	str	r5, [r0, #4]
   d604a:	4604      	mov	r4, r0
   d604c:	2054      	movs	r0, #84	; 0x54
   d604e:	f7fe f822 	bl	d4096 <_Znwj>
   d6052:	f8cd d010 	str.w	sp, [sp, #16]
   d6056:	4606      	mov	r6, r0
   d6058:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d605a:	b108      	cbz	r0, d6060 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d605c:	f7ff f8d6 	bl	d520c <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6060:	4631      	mov	r1, r6
   d6062:	ab01      	add	r3, sp, #4
   d6064:	aa02      	add	r2, sp, #8
   d6066:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6068:	9505      	str	r5, [sp, #20]
   d606a:	f7ff ffd5 	bl	d6018 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d606e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6070:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6072:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6074:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6076:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6078:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d607a:	f7ff fb08 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d607e:	a804      	add	r0, sp, #16
   d6080:	f7ff ffb2 	bl	d5fe8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d6084:	6823      	ldr	r3, [r4, #0]
   d6086:	b90b      	cbnz	r3, d608c <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d6088:	f7fe fe56 	bl	d4d38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d608c:	4620      	mov	r0, r4
   d608e:	b006      	add	sp, #24
   d6090:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6094 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6098:	f8df 8104 	ldr.w	r8, [pc, #260]	; d61a0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d609c:	b08c      	sub	sp, #48	; 0x30
   d609e:	4605      	mov	r5, r0
   d60a0:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d60a2:	2600      	movs	r6, #0
   d60a4:	682b      	ldr	r3, [r5, #0]
   d60a6:	429e      	cmp	r6, r3
   d60a8:	d275      	bcs.n	d6196 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d60aa:	a802      	add	r0, sp, #8
   d60ac:	f7ff ffc8 	bl	d6040 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d60b0:	9b02      	ldr	r3, [sp, #8]
   d60b2:	892a      	ldrh	r2, [r5, #8]
   d60b4:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d60b6:	686b      	ldr	r3, [r5, #4]
   d60b8:	9802      	ldr	r0, [sp, #8]
   d60ba:	242a      	movs	r4, #42	; 0x2a
   d60bc:	4374      	muls	r4, r6
   d60be:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d60c0:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d60c2:	7e5b      	ldrb	r3, [r3, #25]
   d60c4:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d60c8:	bf1e      	ittt	ne
   d60ca:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d60ce:	f043 0302 	orrne.w	r3, r3, #2
   d60d2:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d60d6:	686b      	ldr	r3, [r5, #4]
   d60d8:	4423      	add	r3, r4
   d60da:	7e5b      	ldrb	r3, [r3, #25]
   d60dc:	075b      	lsls	r3, r3, #29
   d60de:	bf42      	ittt	mi
   d60e0:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d60e4:	f043 0304 	orrmi.w	r3, r3, #4
   d60e8:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d60ec:	686b      	ldr	r3, [r5, #4]
   d60ee:	4423      	add	r3, r4
   d60f0:	7e5b      	ldrb	r3, [r3, #25]
   d60f2:	0719      	lsls	r1, r3, #28
   d60f4:	bf42      	ittt	mi
   d60f6:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d60fa:	f043 0308 	orrmi.w	r3, r3, #8
   d60fe:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6102:	686b      	ldr	r3, [r5, #4]
   d6104:	4423      	add	r3, r4
   d6106:	7e5b      	ldrb	r3, [r3, #25]
   d6108:	06da      	lsls	r2, r3, #27
   d610a:	bf42      	ittt	mi
   d610c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6110:	f043 0310 	orrmi.w	r3, r3, #16
   d6114:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6118:	686b      	ldr	r3, [r5, #4]
   d611a:	4423      	add	r3, r4
   d611c:	7e5b      	ldrb	r3, [r3, #25]
   d611e:	069b      	lsls	r3, r3, #26
   d6120:	bf42      	ittt	mi
   d6122:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6126:	f043 0320 	orrmi.w	r3, r3, #32
   d612a:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d612e:	6869      	ldr	r1, [r5, #4]
   d6130:	4421      	add	r1, r4
   d6132:	3104      	adds	r1, #4
   d6134:	f7fe fef0 	bl	d4f18 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6138:	686a      	ldr	r2, [r5, #4]
   d613a:	9b02      	ldr	r3, [sp, #8]
   d613c:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d613e:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d6140:	8be2      	ldrh	r2, [r4, #30]
   d6142:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d6144:	8c22      	ldrh	r2, [r4, #32]
   d6146:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d6148:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d614a:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d614c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d614e:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d6150:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d6152:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6154:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d6156:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6158:	6838      	ldr	r0, [r7, #0]
   d615a:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d615e:	a804      	add	r0, sp, #16
   d6160:	f7ff fa7d 	bl	d565e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6164:	4620      	mov	r0, r4
   d6166:	a904      	add	r1, sp, #16
   d6168:	f7ff ff14 	bl	d5f94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d616c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d616e:	a805      	add	r0, sp, #20
   d6170:	f7ff fa8d 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6174:	b954      	cbnz	r4, d618c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6176:	2320      	movs	r3, #32
   d6178:	9304      	str	r3, [sp, #16]
   d617a:	f8cd 8000 	str.w	r8, [sp]
   d617e:	4623      	mov	r3, r4
   d6180:	aa04      	add	r2, sp, #16
   d6182:	4906      	ldr	r1, [pc, #24]	; (d619c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d6184:	9405      	str	r4, [sp, #20]
   d6186:	2032      	movs	r0, #50	; 0x32
   d6188:	f7fe fb86 	bl	d4898 <log_message>
   d618c:	a803      	add	r0, sp, #12
   d618e:	f7ff fa7e 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6192:	3601      	adds	r6, #1
   d6194:	e786      	b.n	d60a4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d6196:	b00c      	add	sp, #48	; 0x30
   d6198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d619c:	000d70d0 	.word	0x000d70d0
   d61a0:	000d71cd 	.word	0x000d71cd

000d61a4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d61a4:	b510      	push	{r4, lr}
   d61a6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d61a8:	6840      	ldr	r0, [r0, #4]
   d61aa:	b108      	cbz	r0, d61b0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d61ac:	f7fd ff75 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d61b0:	4620      	mov	r0, r4
   d61b2:	bd10      	pop	{r4, pc}

000d61b4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d61b4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d61b6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d61b8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d61ba:	e88d 0009 	stmia.w	sp, {r0, r3}
   d61be:	4668      	mov	r0, sp
   d61c0:	f7ff fff0 	bl	d61a4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d61c4:	b003      	add	sp, #12
   d61c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d61cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d61cc:	b538      	push	{r3, r4, r5, lr}
   d61ce:	2300      	movs	r3, #0
   d61d0:	4604      	mov	r4, r0
   d61d2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d61d4:	2014      	movs	r0, #20
   d61d6:	460d      	mov	r5, r1
   d61d8:	f7fd ff5d 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d61dc:	b128      	cbz	r0, d61ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d61de:	2301      	movs	r3, #1
   d61e0:	6043      	str	r3, [r0, #4]
   d61e2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d61e4:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d61e6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d61e8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d61ea:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d61ec:	4620      	mov	r0, r4
   d61ee:	bd38      	pop	{r3, r4, r5, pc}
   d61f0:	000d70a0 	.word	0x000d70a0

000d61f4 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d61f4:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d61f6:	2500      	movs	r5, #0
   d61f8:	b086      	sub	sp, #24
   d61fa:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d61fc:	6045      	str	r5, [r0, #4]
   d61fe:	4604      	mov	r4, r0
   d6200:	2018      	movs	r0, #24
   d6202:	f7fd ff48 	bl	d4096 <_Znwj>
   d6206:	f8cd d010 	str.w	sp, [sp, #16]
   d620a:	4606      	mov	r6, r0
   d620c:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d620e:	b118      	cbz	r0, d6218 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6210:	f7fe fdee 	bl	d4df0 <_ZN8particle7BleUuidC1Ev>
   d6214:	82b5      	strh	r5, [r6, #20]
   d6216:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6218:	4631      	mov	r1, r6
   d621a:	ab01      	add	r3, sp, #4
   d621c:	aa02      	add	r2, sp, #8
   d621e:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6220:	9505      	str	r5, [sp, #20]
   d6222:	f7ff ffd3 	bl	d61cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6226:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6228:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d622a:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d622c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d622e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6230:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6232:	f7ff fa2c 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6236:	a804      	add	r0, sp, #16
   d6238:	f7ff ffb4 	bl	d61a4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d623c:	6823      	ldr	r3, [r4, #0]
   d623e:	b90b      	cbnz	r3, d6244 <_ZN8particle10BleServiceC1Ev+0x50>
   d6240:	f7fe fd7a 	bl	d4d38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6244:	4620      	mov	r0, r4
   d6246:	b006      	add	sp, #24
   d6248:	bd70      	pop	{r4, r5, r6, pc}
	...

000d624c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d6250:	f8df 8080 	ldr.w	r8, [pc, #128]	; d62d4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6254:	b08c      	sub	sp, #48	; 0x30
   d6256:	4606      	mov	r6, r0
   d6258:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d625a:	2500      	movs	r5, #0
   d625c:	6833      	ldr	r3, [r6, #0]
   d625e:	429d      	cmp	r5, r3
   d6260:	d233      	bcs.n	d62ca <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d6262:	a802      	add	r0, sp, #8
   d6264:	f7ff ffc6 	bl	d61f4 <_ZN8particle10BleServiceC1Ev>
   d6268:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d626a:	6871      	ldr	r1, [r6, #4]
   d626c:	9802      	ldr	r0, [sp, #8]
   d626e:	436c      	muls	r4, r5
   d6270:	4421      	add	r1, r4
   d6272:	3104      	adds	r1, #4
   d6274:	f7fe fe50 	bl	d4f18 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d6278:	6873      	ldr	r3, [r6, #4]
   d627a:	9a02      	ldr	r2, [sp, #8]
   d627c:	4423      	add	r3, r4
   d627e:	a902      	add	r1, sp, #8
   d6280:	8b1b      	ldrh	r3, [r3, #24]
   d6282:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d6284:	6873      	ldr	r3, [r6, #4]
   d6286:	441c      	add	r4, r3
   d6288:	8b63      	ldrh	r3, [r4, #26]
   d628a:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d628c:	6838      	ldr	r0, [r7, #0]
   d628e:	f100 040c 	add.w	r4, r0, #12
   d6292:	a804      	add	r0, sp, #16
   d6294:	f7ff f9f1 	bl	d567a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d6298:	4620      	mov	r0, r4
   d629a:	a904      	add	r1, sp, #16
   d629c:	f7ff fd2b 	bl	d5cf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d62a0:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62a2:	a805      	add	r0, sp, #20
   d62a4:	f7ff f9f3 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62a8:	b954      	cbnz	r4, d62c0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d62aa:	2320      	movs	r3, #32
   d62ac:	9304      	str	r3, [sp, #16]
   d62ae:	f8cd 8000 	str.w	r8, [sp]
   d62b2:	4623      	mov	r3, r4
   d62b4:	aa04      	add	r2, sp, #16
   d62b6:	4906      	ldr	r1, [pc, #24]	; (d62d0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d62b8:	9405      	str	r4, [sp, #20]
   d62ba:	2032      	movs	r0, #50	; 0x32
   d62bc:	f7fe faec 	bl	d4898 <log_message>
   d62c0:	a803      	add	r0, sp, #12
   d62c2:	f7ff f9e4 	bl	d568e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d62c6:	3501      	adds	r5, #1
   d62c8:	e7c8      	b.n	d625c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d62ca:	b00c      	add	sp, #48	; 0x30
   d62cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d62d0:	000d70d0 	.word	0x000d70d0
   d62d4:	000d71f9 	.word	0x000d71f9

000d62d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d62d8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62da:	4c06      	ldr	r4, [pc, #24]	; (d62f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d62dc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d62de:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d62e0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d62e2:	f7fe fa39 	bl	d4758 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d62e6:	4620      	mov	r0, r4
   d62e8:	4a03      	ldr	r2, [pc, #12]	; (d62f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d62ea:	4904      	ldr	r1, [pc, #16]	; (d62fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d62ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d62f0:	f000 bc20 	b.w	d6b34 <__aeabi_atexit>
   d62f4:	2003e408 	.word	0x2003e408
   d62f8:	2003dc4c 	.word	0x2003dc4c
   d62fc:	000d4ceb 	.word	0x000d4ceb

000d6300 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6302:	4606      	mov	r6, r0
   d6304:	460d      	mov	r5, r1
   d6306:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6308:	2400      	movs	r4, #0
  while (size--) {
   d630a:	42bd      	cmp	r5, r7
   d630c:	d00c      	beq.n	d6328 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d630e:	6833      	ldr	r3, [r6, #0]
   d6310:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6314:	689b      	ldr	r3, [r3, #8]
   d6316:	4630      	mov	r0, r6
   d6318:	4798      	blx	r3
     if (chunk>=0)
   d631a:	2800      	cmp	r0, #0
   d631c:	db01      	blt.n	d6322 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d631e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6320:	e7f3      	b.n	d630a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6322:	2c00      	cmp	r4, #0
   d6324:	bf08      	it	eq
   d6326:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6328:	4620      	mov	r0, r4
   d632a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d632c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d632c:	b570      	push	{r4, r5, r6, lr}
   d632e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6330:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6332:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6334:	b149      	cbz	r1, d634a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6336:	f000 fde1 	bl	d6efc <strlen>
   d633a:	682b      	ldr	r3, [r5, #0]
   d633c:	4602      	mov	r2, r0
   d633e:	4621      	mov	r1, r4
   d6340:	4628      	mov	r0, r5
   d6342:	68db      	ldr	r3, [r3, #12]
    }
   d6344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6348:	4718      	bx	r3
    }
   d634a:	bd70      	pop	{r4, r5, r6, pc}

000d634c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d634c:	6803      	ldr	r3, [r0, #0]
   d634e:	689b      	ldr	r3, [r3, #8]
   d6350:	4718      	bx	r3

000d6352 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6352:	b530      	push	{r4, r5, lr}
   d6354:	b08b      	sub	sp, #44	; 0x2c
   d6356:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6358:	2100      	movs	r1, #0
   d635a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d635e:	2a01      	cmp	r2, #1
   d6360:	bf98      	it	ls
   d6362:	220a      	movls	r2, #10
   d6364:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6368:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d636c:	fb05 3312 	mls	r3, r5, r2, r3
   d6370:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6374:	2b09      	cmp	r3, #9
   d6376:	bf94      	ite	ls
   d6378:	3330      	addls	r3, #48	; 0x30
   d637a:	3337      	addhi	r3, #55	; 0x37
   d637c:	b2db      	uxtb	r3, r3
   d637e:	4621      	mov	r1, r4
   d6380:	f804 3901 	strb.w	r3, [r4], #-1
   d6384:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6386:	2d00      	cmp	r5, #0
   d6388:	d1ee      	bne.n	d6368 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d638a:	f7ff ffcf 	bl	d632c <_ZN5Print5writeEPKc>
}
   d638e:	b00b      	add	sp, #44	; 0x2c
   d6390:	bd30      	pop	{r4, r5, pc}
	...

000d6394 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6394:	4b01      	ldr	r3, [pc, #4]	; (d639c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6396:	4a02      	ldr	r2, [pc, #8]	; (d63a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6398:	601a      	str	r2, [r3, #0]
   d639a:	4770      	bx	lr
   d639c:	2003e40c 	.word	0x2003e40c
   d63a0:	000d72f3 	.word	0x000d72f3

000d63a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d63a4:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d63a6:	681a      	ldr	r2, [r3, #0]
   d63a8:	4b02      	ldr	r3, [pc, #8]	; (d63b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63aa:	601a      	str	r2, [r3, #0]
   d63ac:	4770      	bx	lr
   d63ae:	bf00      	nop
   d63b0:	2003dbe4 	.word	0x2003dbe4
   d63b4:	2003e410 	.word	0x2003e410

000d63b8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63b8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d63ba:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63bc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d63be:	b113      	cbz	r3, d63c6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63c0:	2203      	movs	r2, #3
   d63c2:	4601      	mov	r1, r0
   d63c4:	4798      	blx	r3
    }
   d63c6:	4620      	mov	r0, r4
   d63c8:	bd10      	pop	{r4, pc}

000d63ca <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63ca:	b510      	push	{r4, lr}
   d63cc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63ce:	f7ff fff3 	bl	d63b8 <_ZNSt14_Function_baseD1Ev>
   d63d2:	4620      	mov	r0, r4
   d63d4:	bd10      	pop	{r4, pc}
	...

000d63d8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63d8:	4803      	ldr	r0, [pc, #12]	; (d63e8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d63da:	4a04      	ldr	r2, [pc, #16]	; (d63ec <_GLOBAL__sub_I_RGB+0x14>)
   d63dc:	4904      	ldr	r1, [pc, #16]	; (d63f0 <_GLOBAL__sub_I_RGB+0x18>)
   d63de:	2300      	movs	r3, #0
   d63e0:	6083      	str	r3, [r0, #8]
   d63e2:	f000 bba7 	b.w	d6b34 <__aeabi_atexit>
   d63e6:	bf00      	nop
   d63e8:	2003e414 	.word	0x2003e414
   d63ec:	2003dc4c 	.word	0x2003dc4c
   d63f0:	000d63cb 	.word	0x000d63cb

000d63f4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d63f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d63f6:	4b0c      	ldr	r3, [pc, #48]	; (d6428 <serialEventRun+0x34>)
   d63f8:	b133      	cbz	r3, d6408 <serialEventRun+0x14>
   d63fa:	f000 f957 	bl	d66ac <_Z16_fetch_usbserialv>
   d63fe:	6803      	ldr	r3, [r0, #0]
   d6400:	691b      	ldr	r3, [r3, #16]
   d6402:	4798      	blx	r3
   d6404:	2800      	cmp	r0, #0
   d6406:	dc09      	bgt.n	d641c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6408:	4b08      	ldr	r3, [pc, #32]	; (d642c <serialEventRun+0x38>)
   d640a:	b163      	cbz	r3, d6426 <serialEventRun+0x32>
   d640c:	f000 f9cc 	bl	d67a8 <_Z22__fetch_global_Serial1v>
   d6410:	6803      	ldr	r3, [r0, #0]
   d6412:	691b      	ldr	r3, [r3, #16]
   d6414:	4798      	blx	r3
   d6416:	2800      	cmp	r0, #0
   d6418:	dc03      	bgt.n	d6422 <serialEventRun+0x2e>
   d641a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d641c:	f3af 8000 	nop.w
   d6420:	e7f2      	b.n	d6408 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6422:	f3af 8000 	nop.w
   d6426:	bd08      	pop	{r3, pc}
	...

000d6430 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6430:	b508      	push	{r3, lr}
	serialEventRun();
   d6432:	f7ff ffdf 	bl	d63f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6436:	f7fe f8dd 	bl	d45f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d643a:	4b01      	ldr	r3, [pc, #4]	; (d6440 <_post_loop+0x10>)
   d643c:	6018      	str	r0, [r3, #0]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	2003e748 	.word	0x2003e748

000d6444 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6444:	4802      	ldr	r0, [pc, #8]	; (d6450 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6446:	4a03      	ldr	r2, [pc, #12]	; (d6454 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6448:	4903      	ldr	r1, [pc, #12]	; (d6458 <_Z33system_initialize_user_backup_ramv+0x14>)
   d644a:	1a12      	subs	r2, r2, r0
   d644c:	f000 bcf7 	b.w	d6e3e <memcpy>
   d6450:	2003f400 	.word	0x2003f400
   d6454:	2003f404 	.word	0x2003f404
   d6458:	000d7540 	.word	0x000d7540

000d645c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d645c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d645e:	2300      	movs	r3, #0
   d6460:	9300      	str	r3, [sp, #0]
   d6462:	461a      	mov	r2, r3
   d6464:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6468:	f7fe fa30 	bl	d48cc <system_ctrl_set_result>
}
   d646c:	b003      	add	sp, #12
   d646e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6474 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6474:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6476:	8843      	ldrh	r3, [r0, #2]
   d6478:	2b0a      	cmp	r3, #10
   d647a:	d008      	beq.n	d648e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d647c:	2b50      	cmp	r3, #80	; 0x50
   d647e:	d109      	bne.n	d6494 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6480:	4b09      	ldr	r3, [pc, #36]	; (d64a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6482:	681b      	ldr	r3, [r3, #0]
   d6484:	b13b      	cbz	r3, d6496 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6486:	b003      	add	sp, #12
   d6488:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d648c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d648e:	f7ff ffe5 	bl	d645c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6492:	e006      	b.n	d64a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6494:	2300      	movs	r3, #0
   d6496:	9300      	str	r3, [sp, #0]
   d6498:	461a      	mov	r2, r3
   d649a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d649e:	f7fe fa15 	bl	d48cc <system_ctrl_set_result>
        break;
    }
}
   d64a2:	b003      	add	sp, #12
   d64a4:	f85d fb04 	ldr.w	pc, [sp], #4
   d64a8:	2003e424 	.word	0x2003e424

000d64ac <module_user_init_hook>:

void module_user_init_hook()
{
   d64ac:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64ae:	4c10      	ldr	r4, [pc, #64]	; (d64f0 <module_user_init_hook+0x44>)
   d64b0:	4d10      	ldr	r5, [pc, #64]	; (d64f4 <module_user_init_hook+0x48>)
   d64b2:	6823      	ldr	r3, [r4, #0]
   d64b4:	42ab      	cmp	r3, r5
   d64b6:	4b10      	ldr	r3, [pc, #64]	; (d64f8 <module_user_init_hook+0x4c>)
   d64b8:	bf0c      	ite	eq
   d64ba:	2201      	moveq	r2, #1
   d64bc:	2200      	movne	r2, #0
   d64be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d64c0:	d002      	beq.n	d64c8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d64c2:	f7ff ffbf 	bl	d6444 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d64c6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d64c8:	f7fe f884 	bl	d45d4 <HAL_RNG_GetRandomNumber>
   d64cc:	4604      	mov	r4, r0
    srand(seed);
   d64ce:	f000 fce5 	bl	d6e9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d64d2:	4b0a      	ldr	r3, [pc, #40]	; (d64fc <module_user_init_hook+0x50>)
   d64d4:	b113      	cbz	r3, d64dc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d64d6:	4620      	mov	r0, r4
   d64d8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d64dc:	2100      	movs	r1, #0
   d64de:	4807      	ldr	r0, [pc, #28]	; (d64fc <module_user_init_hook+0x50>)
   d64e0:	f7fe fa58 	bl	d4994 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64e4:	2100      	movs	r1, #0
   d64e6:	4806      	ldr	r0, [pc, #24]	; (d6500 <module_user_init_hook+0x54>)
}
   d64e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64ec:	f7fe b9e4 	b.w	d48b8 <system_ctrl_set_app_request_handler>
   d64f0:	2003f400 	.word	0x2003f400
   d64f4:	9a271c1e 	.word	0x9a271c1e
   d64f8:	2003e428 	.word	0x2003e428
   d64fc:	00000000 	.word	0x00000000
   d6500:	000d6475 	.word	0x000d6475

000d6504 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6504:	4770      	bx	lr

000d6506 <_ZN9IPAddressD0Ev>:
   d6506:	b510      	push	{r4, lr}
   d6508:	2118      	movs	r1, #24
   d650a:	4604      	mov	r4, r0
   d650c:	f000 fb20 	bl	d6b50 <_ZdlPvj>
   d6510:	4620      	mov	r0, r4
   d6512:	bd10      	pop	{r4, pc}

000d6514 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6514:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6516:	7d03      	ldrb	r3, [r0, #20]
   d6518:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d651a:	b08d      	sub	sp, #52	; 0x34
   d651c:	460e      	mov	r6, r1
   d651e:	f100 0704 	add.w	r7, r0, #4
   d6522:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6526:	d002      	beq.n	d652e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6528:	f100 0508 	add.w	r5, r0, #8
   d652c:	e018      	b.n	d6560 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d652e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6530:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6532:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6536:	232f      	movs	r3, #47	; 0x2f
   d6538:	462a      	mov	r2, r5
   d653a:	200a      	movs	r0, #10
   d653c:	f7fe f92c 	bl	d4798 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6540:	4628      	mov	r0, r5
   d6542:	f000 fcdb 	bl	d6efc <strlen>
   d6546:	6833      	ldr	r3, [r6, #0]
   d6548:	4602      	mov	r2, r0
   d654a:	68db      	ldr	r3, [r3, #12]
   d654c:	4629      	mov	r1, r5
   d654e:	4630      	mov	r0, r6
   d6550:	4798      	blx	r3
   d6552:	e00f      	b.n	d6574 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6554:	b124      	cbz	r4, d6560 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6556:	212e      	movs	r1, #46	; 0x2e
   d6558:	4630      	mov	r0, r6
   d655a:	f7ff fef7 	bl	d634c <_ZN5Print5printEc>
   d655e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6560:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6564:	220a      	movs	r2, #10
   d6566:	4630      	mov	r0, r6
   d6568:	f7ff fef3 	bl	d6352 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d656c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d656e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6570:	d1f0      	bne.n	d6554 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6572:	4620      	mov	r0, r4
    }
    return n;
}
   d6574:	b00d      	add	sp, #52	; 0x34
   d6576:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6578 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6578:	b510      	push	{r4, lr}
   d657a:	4b05      	ldr	r3, [pc, #20]	; (d6590 <_ZN9IPAddressC1Ev+0x18>)
   d657c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d657e:	2211      	movs	r2, #17
   d6580:	f840 3b04 	str.w	r3, [r0], #4
   d6584:	2100      	movs	r1, #0
   d6586:	f000 fc80 	bl	d6e8a <memset>
{
    clear();
}
   d658a:	4620      	mov	r0, r4
   d658c:	bd10      	pop	{r4, pc}
   d658e:	bf00      	nop
   d6590:	000d7394 	.word	0x000d7394

000d6594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6594:	4603      	mov	r3, r0
   d6596:	4a07      	ldr	r2, [pc, #28]	; (d65b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6598:	b510      	push	{r4, lr}
   d659a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d659e:	f101 0210 	add.w	r2, r1, #16
   d65a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d65a6:	f843 4b04 	str.w	r4, [r3], #4
   d65aa:	4291      	cmp	r1, r2
   d65ac:	d1f9      	bne.n	d65a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d65ae:	780a      	ldrb	r2, [r1, #0]
   d65b0:	701a      	strb	r2, [r3, #0]
}
   d65b2:	bd10      	pop	{r4, pc}
   d65b4:	000d7394 	.word	0x000d7394

000d65b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d65b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65ca:	2304      	movs	r3, #4
   d65cc:	6041      	str	r1, [r0, #4]
   d65ce:	7503      	strb	r3, [r0, #20]
   d65d0:	bd10      	pop	{r4, pc}

000d65d2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65d4:	780d      	ldrb	r5, [r1, #0]
   d65d6:	788b      	ldrb	r3, [r1, #2]
   d65d8:	784a      	ldrb	r2, [r1, #1]
   d65da:	78c9      	ldrb	r1, [r1, #3]
   d65dc:	9100      	str	r1, [sp, #0]
   d65de:	4629      	mov	r1, r5
   d65e0:	f7ff ffea 	bl	d65b8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d65e4:	b003      	add	sp, #12
   d65e6:	bd30      	pop	{r4, r5, pc}

000d65e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65e8:	7441      	strb	r1, [r0, #17]
   d65ea:	4770      	bx	lr

000d65ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65ec:	4770      	bx	lr

000d65ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d65ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65f0:	2100      	movs	r1, #0
   d65f2:	7c00      	ldrb	r0, [r0, #16]
   d65f4:	f7fe f930 	bl	d4858 <HAL_USB_USART_Receive_Data>
}
   d65f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65fc:	bf28      	it	cs
   d65fe:	f04f 30ff 	movcs.w	r0, #4294967295
   d6602:	bd08      	pop	{r3, pc}

000d6604 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6604:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6606:	2101      	movs	r1, #1
   d6608:	7c00      	ldrb	r0, [r0, #16]
   d660a:	f7fe f925 	bl	d4858 <HAL_USB_USART_Receive_Data>
}
   d660e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6612:	bf28      	it	cs
   d6614:	f04f 30ff 	movcs.w	r0, #4294967295
   d6618:	bd08      	pop	{r3, pc}

000d661a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d661a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d661c:	7c00      	ldrb	r0, [r0, #16]
   d661e:	f7fe f913 	bl	d4848 <HAL_USB_USART_Available_Data_For_Write>
}
   d6622:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6626:	bd08      	pop	{r3, pc}

000d6628 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6628:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d662a:	7c00      	ldrb	r0, [r0, #16]
   d662c:	f7fe f904 	bl	d4838 <HAL_USB_USART_Available_Data>
}
   d6630:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6634:	bd08      	pop	{r3, pc}

000d6636 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6636:	7c00      	ldrb	r0, [r0, #16]
   d6638:	f7fe b91e 	b.w	d4878 <HAL_USB_USART_Flush_Data>

000d663c <_ZN9USBSerialD0Ev>:
   d663c:	b510      	push	{r4, lr}
   d663e:	2114      	movs	r1, #20
   d6640:	4604      	mov	r4, r0
   d6642:	f000 fa85 	bl	d6b50 <_ZdlPvj>
   d6646:	4620      	mov	r0, r4
   d6648:	bd10      	pop	{r4, pc}

000d664a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d664a:	b538      	push	{r3, r4, r5, lr}
   d664c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d664e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6650:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6652:	f7fe f8f9 	bl	d4848 <HAL_USB_USART_Available_Data_For_Write>
   d6656:	2800      	cmp	r0, #0
   d6658:	dc01      	bgt.n	d665e <_ZN9USBSerial5writeEh+0x14>
   d665a:	7c60      	ldrb	r0, [r4, #17]
   d665c:	b128      	cbz	r0, d666a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d665e:	4629      	mov	r1, r5
   d6660:	7c20      	ldrb	r0, [r4, #16]
   d6662:	f7fe f901 	bl	d4868 <HAL_USB_USART_Send_Data>
   d6666:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d666a:	bd38      	pop	{r3, r4, r5, pc}

000d666c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d666c:	b510      	push	{r4, lr}
   d666e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6670:	2300      	movs	r3, #0
   d6672:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6678:	60a3      	str	r3, [r4, #8]
   d667a:	4b05      	ldr	r3, [pc, #20]	; (d6690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d667c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d667e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6680:	4608      	mov	r0, r1
{
  _serial = serial;
   d6682:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6684:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6686:	4611      	mov	r1, r2
   d6688:	f7fe f8c6 	bl	d4818 <HAL_USB_USART_Init>
}
   d668c:	4620      	mov	r0, r4
   d668e:	bd10      	pop	{r4, pc}
   d6690:	000d73a8 	.word	0x000d73a8

000d6694 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6694:	2200      	movs	r2, #0
   d6696:	7c00      	ldrb	r0, [r0, #16]
   d6698:	f7fe b8c6 	b.w	d4828 <HAL_USB_USART_Begin>

000d669c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d669c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d669e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66a0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d66a2:	2100      	movs	r1, #0
   d66a4:	f000 fbf1 	bl	d6e8a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d66a8:	4620      	mov	r0, r4
   d66aa:	bd10      	pop	{r4, pc}

000d66ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d66ac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66ae:	4d0e      	ldr	r5, [pc, #56]	; (d66e8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d66b0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66b2:	a801      	add	r0, sp, #4
   d66b4:	f7ff fff2 	bl	d669c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66b8:	6829      	ldr	r1, [r5, #0]
   d66ba:	f011 0401 	ands.w	r4, r1, #1
   d66be:	d110      	bne.n	d66e2 <_Z16_fetch_usbserialv+0x36>
   d66c0:	4628      	mov	r0, r5
   d66c2:	f7fd fcee 	bl	d40a2 <__cxa_guard_acquire>
   d66c6:	b160      	cbz	r0, d66e2 <_Z16_fetch_usbserialv+0x36>
   d66c8:	aa01      	add	r2, sp, #4
   d66ca:	4621      	mov	r1, r4
   d66cc:	4807      	ldr	r0, [pc, #28]	; (d66ec <_Z16_fetch_usbserialv+0x40>)
   d66ce:	f7ff ffcd 	bl	d666c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66d2:	4628      	mov	r0, r5
   d66d4:	f7fd fcea 	bl	d40ac <__cxa_guard_release>
   d66d8:	4a05      	ldr	r2, [pc, #20]	; (d66f0 <_Z16_fetch_usbserialv+0x44>)
   d66da:	4906      	ldr	r1, [pc, #24]	; (d66f4 <_Z16_fetch_usbserialv+0x48>)
   d66dc:	4803      	ldr	r0, [pc, #12]	; (d66ec <_Z16_fetch_usbserialv+0x40>)
   d66de:	f000 fa29 	bl	d6b34 <__aeabi_atexit>
	return _usbserial;
}
   d66e2:	4802      	ldr	r0, [pc, #8]	; (d66ec <_Z16_fetch_usbserialv+0x40>)
   d66e4:	b007      	add	sp, #28
   d66e6:	bd30      	pop	{r4, r5, pc}
   d66e8:	2003e42c 	.word	0x2003e42c
   d66ec:	2003e430 	.word	0x2003e430
   d66f0:	2003dc4c 	.word	0x2003dc4c
   d66f4:	000d65ed 	.word	0x000d65ed

000d66f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d66f8:	4770      	bx	lr

000d66fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66fa:	7441      	strb	r1, [r0, #17]
   d66fc:	4770      	bx	lr

000d66fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d66fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6700:	7c00      	ldrb	r0, [r0, #16]
   d6702:	f7fe f881 	bl	d4808 <HAL_USART_Available_Data_For_Write>
}
   d6706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d670a:	bd08      	pop	{r3, pc}

000d670c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d670c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d670e:	7c00      	ldrb	r0, [r0, #16]
   d6710:	f7fe f85a 	bl	d47c8 <HAL_USART_Available_Data>
}
   d6714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6718:	bd08      	pop	{r3, pc}

000d671a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d671a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d671c:	7c00      	ldrb	r0, [r0, #16]
   d671e:	f7fe f863 	bl	d47e8 <HAL_USART_Peek_Data>
}
   d6722:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6726:	bf28      	it	cs
   d6728:	f04f 30ff 	movcs.w	r0, #4294967295
   d672c:	bd08      	pop	{r3, pc}

000d672e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d672e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6730:	7c00      	ldrb	r0, [r0, #16]
   d6732:	f7fe f851 	bl	d47d8 <HAL_USART_Read_Data>
}
   d6736:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d673a:	bf28      	it	cs
   d673c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6740:	bd08      	pop	{r3, pc}

000d6742 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6742:	7c00      	ldrb	r0, [r0, #16]
   d6744:	f7fe b858 	b.w	d47f8 <HAL_USART_Flush_Data>

000d6748 <_ZN11USARTSerialD0Ev>:
   d6748:	b510      	push	{r4, lr}
   d674a:	2114      	movs	r1, #20
   d674c:	4604      	mov	r4, r0
   d674e:	f000 f9ff 	bl	d6b50 <_ZdlPvj>
   d6752:	4620      	mov	r0, r4
   d6754:	bd10      	pop	{r4, pc}

000d6756 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6756:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6758:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d675a:	4604      	mov	r4, r0
   d675c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d675e:	b925      	cbnz	r5, d676a <_ZN11USARTSerial5writeEh+0x14>
   d6760:	7c00      	ldrb	r0, [r0, #16]
   d6762:	f7fe f851 	bl	d4808 <HAL_USART_Available_Data_For_Write>
   d6766:	2800      	cmp	r0, #0
   d6768:	dd05      	ble.n	d6776 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d676a:	4631      	mov	r1, r6
   d676c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d676e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6772:	f7fe b821 	b.w	d47b8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6776:	4628      	mov	r0, r5
   d6778:	bd70      	pop	{r4, r5, r6, pc}
	...

000d677c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d677c:	b510      	push	{r4, lr}
   d677e:	4604      	mov	r4, r0
   d6780:	4608      	mov	r0, r1
   d6782:	4611      	mov	r1, r2
   d6784:	2200      	movs	r2, #0
   d6786:	6062      	str	r2, [r4, #4]
   d6788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d678c:	60a2      	str	r2, [r4, #8]
   d678e:	4a05      	ldr	r2, [pc, #20]	; (d67a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6790:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6792:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6794:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6796:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6798:	461a      	mov	r2, r3
   d679a:	f7fe f805 	bl	d47a8 <HAL_USART_Init>
}
   d679e:	4620      	mov	r0, r4
   d67a0:	bd10      	pop	{r4, pc}
   d67a2:	bf00      	nop
   d67a4:	000d73d8 	.word	0x000d73d8

000d67a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d67a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d67aa:	4d0c      	ldr	r5, [pc, #48]	; (d67dc <_Z22__fetch_global_Serial1v+0x34>)
   d67ac:	6829      	ldr	r1, [r5, #0]
   d67ae:	f011 0401 	ands.w	r4, r1, #1
   d67b2:	d111      	bne.n	d67d8 <_Z22__fetch_global_Serial1v+0x30>
   d67b4:	4628      	mov	r0, r5
   d67b6:	f7fd fc74 	bl	d40a2 <__cxa_guard_acquire>
   d67ba:	b168      	cbz	r0, d67d8 <_Z22__fetch_global_Serial1v+0x30>
   d67bc:	4a08      	ldr	r2, [pc, #32]	; (d67e0 <_Z22__fetch_global_Serial1v+0x38>)
   d67be:	4b09      	ldr	r3, [pc, #36]	; (d67e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d67c0:	4809      	ldr	r0, [pc, #36]	; (d67e8 <_Z22__fetch_global_Serial1v+0x40>)
   d67c2:	4621      	mov	r1, r4
   d67c4:	f7ff ffda 	bl	d677c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d67c8:	4628      	mov	r0, r5
   d67ca:	f7fd fc6f 	bl	d40ac <__cxa_guard_release>
   d67ce:	4a07      	ldr	r2, [pc, #28]	; (d67ec <_Z22__fetch_global_Serial1v+0x44>)
   d67d0:	4907      	ldr	r1, [pc, #28]	; (d67f0 <_Z22__fetch_global_Serial1v+0x48>)
   d67d2:	4805      	ldr	r0, [pc, #20]	; (d67e8 <_Z22__fetch_global_Serial1v+0x40>)
   d67d4:	f000 f9ae 	bl	d6b34 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d67d8:	4803      	ldr	r0, [pc, #12]	; (d67e8 <_Z22__fetch_global_Serial1v+0x40>)
   d67da:	bd38      	pop	{r3, r4, r5, pc}
   d67dc:	2003e4dc 	.word	0x2003e4dc
   d67e0:	2003e4e0 	.word	0x2003e4e0
   d67e4:	2003e458 	.word	0x2003e458
   d67e8:	2003e444 	.word	0x2003e444
   d67ec:	2003dc4c 	.word	0x2003dc4c
   d67f0:	000d66f9 	.word	0x000d66f9

000d67f4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d67f4:	2200      	movs	r2, #0
   d67f6:	4611      	mov	r1, r2
   d67f8:	6840      	ldr	r0, [r0, #4]
   d67fa:	f7fe b8b3 	b.w	d4964 <network_listening>

000d67fe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d67fe:	2200      	movs	r2, #0
   d6800:	4611      	mov	r1, r2
   d6802:	6840      	ldr	r0, [r0, #4]
   d6804:	f7fe b8be 	b.w	d4984 <network_get_listen_timeout>

000d6808 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6808:	2200      	movs	r2, #0
   d680a:	6840      	ldr	r0, [r0, #4]
   d680c:	f7fe b8b2 	b.w	d4974 <network_set_listen_timeout>

000d6810 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6810:	2200      	movs	r2, #0
   d6812:	f081 0101 	eor.w	r1, r1, #1
   d6816:	6840      	ldr	r0, [r0, #4]
   d6818:	f7fe b89c 	b.w	d4954 <network_listen>

000d681c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d681c:	2300      	movs	r3, #0
   d681e:	461a      	mov	r2, r3
   d6820:	2101      	movs	r1, #1
   d6822:	6840      	ldr	r0, [r0, #4]
   d6824:	f7fe b88e 	b.w	d4944 <network_off>

000d6828 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6828:	2300      	movs	r3, #0
   d682a:	461a      	mov	r2, r3
   d682c:	4619      	mov	r1, r3
   d682e:	6840      	ldr	r0, [r0, #4]
   d6830:	f7fe b880 	b.w	d4934 <network_on>

000d6834 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6834:	2200      	movs	r2, #0
   d6836:	4611      	mov	r1, r2
   d6838:	6840      	ldr	r0, [r0, #4]
   d683a:	f7fe b873 	b.w	d4924 <network_ready>

000d683e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d683e:	2200      	movs	r2, #0
   d6840:	4611      	mov	r1, r2
   d6842:	6840      	ldr	r0, [r0, #4]
   d6844:	f7fe b85e 	b.w	d4904 <network_connecting>

000d6848 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6848:	2200      	movs	r2, #0
   d684a:	2102      	movs	r1, #2
   d684c:	6840      	ldr	r0, [r0, #4]
   d684e:	f7fe b861 	b.w	d4914 <network_disconnect>

000d6852 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6852:	2300      	movs	r3, #0
   d6854:	461a      	mov	r2, r3
   d6856:	6840      	ldr	r0, [r0, #4]
   d6858:	f7fe b84c 	b.w	d48f4 <network_connect>

000d685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d685c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d685e:	4605      	mov	r5, r0
   d6860:	b188      	cbz	r0, d6886 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6862:	6804      	ldr	r4, [r0, #0]
   d6864:	b14c      	cbz	r4, d687a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6866:	68a3      	ldr	r3, [r4, #8]
   d6868:	b11b      	cbz	r3, d6872 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d686a:	2203      	movs	r2, #3
   d686c:	4621      	mov	r1, r4
   d686e:	4620      	mov	r0, r4
   d6870:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6872:	2110      	movs	r1, #16
   d6874:	4620      	mov	r0, r4
   d6876:	f000 f96b 	bl	d6b50 <_ZdlPvj>
   d687a:	4628      	mov	r0, r5
   d687c:	2114      	movs	r1, #20
      }
   d687e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6882:	f000 b965 	b.w	d6b50 <_ZdlPvj>
   d6886:	bd38      	pop	{r3, r4, r5, pc}

000d6888 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6888:	b110      	cbz	r0, d6890 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d688a:	6803      	ldr	r3, [r0, #0]
   d688c:	685b      	ldr	r3, [r3, #4]
   d688e:	4718      	bx	r3
   d6890:	4770      	bx	lr

000d6892 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6892:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6894:	6803      	ldr	r3, [r0, #0]
   d6896:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6898:	b1bb      	cbz	r3, d68ca <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d689a:	6858      	ldr	r0, [r3, #4]
   d689c:	f7fd ff44 	bl	d4728 <os_thread_is_current>
   d68a0:	b978      	cbnz	r0, d68c2 <_ZN6ThreadD1Ev+0x30>
   d68a2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d68a4:	7c5a      	ldrb	r2, [r3, #17]
   d68a6:	b912      	cbnz	r2, d68ae <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d68a8:	6858      	ldr	r0, [r3, #4]
   d68aa:	f7fd ff45 	bl	d4738 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d68ae:	6823      	ldr	r3, [r4, #0]
   d68b0:	6858      	ldr	r0, [r3, #4]
   d68b2:	f7fd ff49 	bl	d4748 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68b6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68b8:	2300      	movs	r3, #0
   d68ba:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d68bc:	b128      	cbz	r0, d68ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d68be:	f7ff ffcd 	bl	d685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68c2:	6820      	ldr	r0, [r4, #0]
   d68c4:	b108      	cbz	r0, d68ca <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d68c6:	f7ff ffc9 	bl	d685c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d68ca:	4620      	mov	r0, r4
   d68cc:	bd10      	pop	{r4, pc}

000d68ce <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d68ce:	b538      	push	{r3, r4, r5, lr}
   d68d0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68d2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d68d6:	b108      	cbz	r0, d68dc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d68d8:	f7fd fbe1 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d68dc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d68e0:	b108      	cbz	r0, d68e6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d68e2:	f7fd ff41 	bl	d4768 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68e6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d68ea:	b135      	cbz	r5, d68fa <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68ec:	4628      	mov	r0, r5
   d68ee:	f7ff ffd0 	bl	d6892 <_ZN6ThreadD1Ev>
   d68f2:	2104      	movs	r1, #4
   d68f4:	4628      	mov	r0, r5
   d68f6:	f000 f92b 	bl	d6b50 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68fa:	6820      	ldr	r0, [r4, #0]
   d68fc:	b108      	cbz	r0, d6902 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d68fe:	f7ff ffc3 	bl	d6888 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6902:	4620      	mov	r0, r4
   d6904:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6908 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6908:	b510      	push	{r4, lr}
   d690a:	4b04      	ldr	r3, [pc, #16]	; (d691c <_ZN5spark9MeshClassD1Ev+0x14>)
   d690c:	4604      	mov	r4, r0
   d690e:	f840 3b08 	str.w	r3, [r0], #8
   d6912:	f7ff ffdc 	bl	d68ce <_ZN5spark11MeshPublishD1Ev>
   d6916:	4620      	mov	r0, r4
   d6918:	bd10      	pop	{r4, pc}
   d691a:	bf00      	nop
   d691c:	000d7408 	.word	0x000d7408

000d6920 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6920:	b538      	push	{r3, r4, r5, lr}
   d6922:	4c0e      	ldr	r4, [pc, #56]	; (d695c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6924:	4b0e      	ldr	r3, [pc, #56]	; (d6960 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6926:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6928:	2500      	movs	r5, #0
   d692a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d692c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6930:	6063      	str	r3, [r4, #4]
   d6932:	60a5      	str	r5, [r4, #8]
   d6934:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6938:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d693c:	f7fd ff0c 	bl	d4758 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6940:	4b08      	ldr	r3, [pc, #32]	; (d6964 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6942:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6946:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d694a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d694c:	4620      	mov	r0, r4
   d694e:	4a06      	ldr	r2, [pc, #24]	; (d6968 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6950:	4906      	ldr	r1, [pc, #24]	; (d696c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6956:	f000 b8ed 	b.w	d6b34 <__aeabi_atexit>
   d695a:	bf00      	nop
   d695c:	2003e564 	.word	0x2003e564
   d6960:	000d7470 	.word	0x000d7470
   d6964:	000d7408 	.word	0x000d7408
   d6968:	2003dc4c 	.word	0x2003dc4c
   d696c:	000d6909 	.word	0x000d6909

000d6970 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6970:	2200      	movs	r2, #0
   d6972:	4611      	mov	r1, r2
   d6974:	6840      	ldr	r0, [r0, #4]
   d6976:	f7fd bfd5 	b.w	d4924 <network_ready>

000d697a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d697a:	2200      	movs	r2, #0
   d697c:	4611      	mov	r1, r2
   d697e:	6840      	ldr	r0, [r0, #4]
   d6980:	f7fd bff0 	b.w	d4964 <network_listening>

000d6984 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6984:	2200      	movs	r2, #0
   d6986:	4611      	mov	r1, r2
   d6988:	6840      	ldr	r0, [r0, #4]
   d698a:	f7fd bffb 	b.w	d4984 <network_get_listen_timeout>

000d698e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d698e:	2200      	movs	r2, #0
   d6990:	6840      	ldr	r0, [r0, #4]
   d6992:	f7fd bfef 	b.w	d4974 <network_set_listen_timeout>

000d6996 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6996:	2200      	movs	r2, #0
   d6998:	f081 0101 	eor.w	r1, r1, #1
   d699c:	6840      	ldr	r0, [r0, #4]
   d699e:	f7fd bfd9 	b.w	d4954 <network_listen>

000d69a2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d69a2:	2300      	movs	r3, #0
   d69a4:	461a      	mov	r2, r3
   d69a6:	4619      	mov	r1, r3
   d69a8:	6840      	ldr	r0, [r0, #4]
   d69aa:	f7fd bfcb 	b.w	d4944 <network_off>

000d69ae <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d69ae:	2300      	movs	r3, #0
   d69b0:	461a      	mov	r2, r3
   d69b2:	4619      	mov	r1, r3
   d69b4:	6840      	ldr	r0, [r0, #4]
   d69b6:	f7fd bfbd 	b.w	d4934 <network_on>

000d69ba <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d69ba:	2200      	movs	r2, #0
   d69bc:	4611      	mov	r1, r2
   d69be:	6840      	ldr	r0, [r0, #4]
   d69c0:	f7fd bfa0 	b.w	d4904 <network_connecting>

000d69c4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69c4:	2200      	movs	r2, #0
   d69c6:	2102      	movs	r1, #2
   d69c8:	6840      	ldr	r0, [r0, #4]
   d69ca:	f7fd bfa3 	b.w	d4914 <network_disconnect>

000d69ce <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d69ce:	2300      	movs	r3, #0
   d69d0:	461a      	mov	r2, r3
   d69d2:	6840      	ldr	r0, [r0, #4]
   d69d4:	f7fd bf8e 	b.w	d48f4 <network_connect>

000d69d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d69d8:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d69da:	2204      	movs	r2, #4
   d69dc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d69de:	4a02      	ldr	r2, [pc, #8]	; (d69e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d69e0:	601a      	str	r2, [r3, #0]
   d69e2:	4770      	bx	lr
   d69e4:	2003e738 	.word	0x2003e738
   d69e8:	000d743c 	.word	0x000d743c

000d69ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d69ec:	2300      	movs	r3, #0
   d69ee:	461a      	mov	r2, r3
   d69f0:	6840      	ldr	r0, [r0, #4]
   d69f2:	f7fd bf7f 	b.w	d48f4 <network_connect>

000d69f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d69f6:	2200      	movs	r2, #0
   d69f8:	2102      	movs	r1, #2
   d69fa:	6840      	ldr	r0, [r0, #4]
   d69fc:	f7fd bf8a 	b.w	d4914 <network_disconnect>

000d6a00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6a00:	2200      	movs	r2, #0
   d6a02:	4611      	mov	r1, r2
   d6a04:	6840      	ldr	r0, [r0, #4]
   d6a06:	f7fd bf7d 	b.w	d4904 <network_connecting>

000d6a0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6a0a:	2200      	movs	r2, #0
   d6a0c:	4611      	mov	r1, r2
   d6a0e:	6840      	ldr	r0, [r0, #4]
   d6a10:	f7fd bf88 	b.w	d4924 <network_ready>

000d6a14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6a14:	2300      	movs	r3, #0
   d6a16:	461a      	mov	r2, r3
   d6a18:	4619      	mov	r1, r3
   d6a1a:	6840      	ldr	r0, [r0, #4]
   d6a1c:	f7fd bf8a 	b.w	d4934 <network_on>

000d6a20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6a20:	2300      	movs	r3, #0
   d6a22:	461a      	mov	r2, r3
   d6a24:	4619      	mov	r1, r3
   d6a26:	6840      	ldr	r0, [r0, #4]
   d6a28:	f7fd bf8c 	b.w	d4944 <network_off>

000d6a2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6a2c:	2200      	movs	r2, #0
   d6a2e:	f081 0101 	eor.w	r1, r1, #1
   d6a32:	6840      	ldr	r0, [r0, #4]
   d6a34:	f7fd bf8e 	b.w	d4954 <network_listen>

000d6a38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6a38:	2200      	movs	r2, #0
   d6a3a:	6840      	ldr	r0, [r0, #4]
   d6a3c:	f7fd bf9a 	b.w	d4974 <network_set_listen_timeout>

000d6a40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6a40:	2200      	movs	r2, #0
   d6a42:	4611      	mov	r1, r2
   d6a44:	6840      	ldr	r0, [r0, #4]
   d6a46:	f7fd bf9d 	b.w	d4984 <network_get_listen_timeout>

000d6a4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6a4a:	2200      	movs	r2, #0
   d6a4c:	4611      	mov	r1, r2
   d6a4e:	6840      	ldr	r0, [r0, #4]
   d6a50:	f7fd bf88 	b.w	d4964 <network_listening>

000d6a54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a58:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a5a:	b095      	sub	sp, #84	; 0x54
   d6a5c:	4616      	mov	r6, r2
   d6a5e:	460d      	mov	r5, r1
   d6a60:	4607      	mov	r7, r0
    IPAddress addr;
   d6a62:	f7ff fd89 	bl	d6578 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6a66:	4621      	mov	r1, r4
   d6a68:	2220      	movs	r2, #32
   d6a6a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a6c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6a6e:	f000 fa0c 	bl	d6e8a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6a72:	2340      	movs	r3, #64	; 0x40
   d6a74:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6a76:	4621      	mov	r1, r4
   d6a78:	466b      	mov	r3, sp
   d6a7a:	aa0c      	add	r2, sp, #48	; 0x30
   d6a7c:	4630      	mov	r0, r6
   d6a7e:	f7fd fd99 	bl	d45b4 <netdb_getaddrinfo>
    if (!r) {
   d6a82:	4604      	mov	r4, r0
   d6a84:	2800      	cmp	r0, #0
   d6a86:	d144      	bne.n	d6b12 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a88:	4602      	mov	r2, r0
   d6a8a:	2101      	movs	r1, #1
   d6a8c:	6868      	ldr	r0, [r5, #4]
   d6a8e:	f7fd ff49 	bl	d4924 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a92:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a94:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6a96:	4622      	mov	r2, r4
   d6a98:	6868      	ldr	r0, [r5, #4]
   d6a9a:	f7fd ff43 	bl	d4924 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a9e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6aa0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6aa2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6aa4:	2e00      	cmp	r6, #0
   d6aa6:	d034      	beq.n	d6b12 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6aa8:	2900      	cmp	r1, #0
   d6aaa:	d132      	bne.n	d6b12 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6aac:	6873      	ldr	r3, [r6, #4]
   d6aae:	2b02      	cmp	r3, #2
   d6ab0:	d002      	beq.n	d6ab8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6ab2:	2b0a      	cmp	r3, #10
   d6ab4:	d009      	beq.n	d6aca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6ab6:	e02a      	b.n	d6b0e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6ab8:	f1b8 0f00 	cmp.w	r8, #0
   d6abc:	d027      	beq.n	d6b0e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6abe:	6971      	ldr	r1, [r6, #20]
   d6ac0:	4638      	mov	r0, r7
   d6ac2:	3104      	adds	r1, #4
   d6ac4:	f7ff fd85 	bl	d65d2 <_ZN9IPAddressaSEPKh>
   d6ac8:	e020      	b.n	d6b0c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6aca:	f1b9 0f00 	cmp.w	r9, #0
   d6ace:	d01e      	beq.n	d6b0e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6ad0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6ad2:	2211      	movs	r2, #17
   d6ad4:	a801      	add	r0, sp, #4
   d6ad6:	f000 f9d8 	bl	d6e8a <memset>
                    a.v = 6;
   d6ada:	2306      	movs	r3, #6
   d6adc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ae0:	ad01      	add	r5, sp, #4
   d6ae2:	f104 0308 	add.w	r3, r4, #8
   d6ae6:	3418      	adds	r4, #24
   d6ae8:	6818      	ldr	r0, [r3, #0]
   d6aea:	6859      	ldr	r1, [r3, #4]
   d6aec:	462a      	mov	r2, r5
   d6aee:	c203      	stmia	r2!, {r0, r1}
   d6af0:	3308      	adds	r3, #8
   d6af2:	42a3      	cmp	r3, r4
   d6af4:	4615      	mov	r5, r2
   d6af6:	d1f7      	bne.n	d6ae8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6af8:	a901      	add	r1, sp, #4
   d6afa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6afc:	ad07      	add	r5, sp, #28
   d6afe:	f7ff fd49 	bl	d6594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b04:	1d3c      	adds	r4, r7, #4
   d6b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b08:	682b      	ldr	r3, [r5, #0]
   d6b0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6b0c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b0e:	69f6      	ldr	r6, [r6, #28]
   d6b10:	e7c8      	b.n	d6aa4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6b12:	9800      	ldr	r0, [sp, #0]
   d6b14:	f7fd fd46 	bl	d45a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6b18:	4638      	mov	r0, r7
   d6b1a:	b015      	add	sp, #84	; 0x54
   d6b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6b20 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6b20:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6b22:	4a03      	ldr	r2, [pc, #12]	; (d6b30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6b24:	601a      	str	r2, [r3, #0]
   d6b26:	2200      	movs	r2, #0
   d6b28:	605a      	str	r2, [r3, #4]
   d6b2a:	4770      	bx	lr
   d6b2c:	2003e740 	.word	0x2003e740
   d6b30:	000d7470 	.word	0x000d7470

000d6b34 <__aeabi_atexit>:
   d6b34:	460b      	mov	r3, r1
   d6b36:	4601      	mov	r1, r0
   d6b38:	4618      	mov	r0, r3
   d6b3a:	f000 b963 	b.w	d6e04 <__cxa_atexit>
	...

000d6b40 <_ZSt15get_new_handlerv>:
   d6b40:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <_ZSt15get_new_handlerv+0xc>)
   d6b42:	6818      	ldr	r0, [r3, #0]
   d6b44:	f3bf 8f5f 	dmb	sy
   d6b48:	4770      	bx	lr
   d6b4a:	bf00      	nop
   d6b4c:	2003e74c 	.word	0x2003e74c

000d6b50 <_ZdlPvj>:
   d6b50:	f7fd baa3 	b.w	d409a <_ZdlPv>

000d6b54 <_ZnwjRKSt9nothrow_t>:
   d6b54:	b510      	push	{r4, lr}
   d6b56:	2800      	cmp	r0, #0
   d6b58:	bf14      	ite	ne
   d6b5a:	4604      	movne	r4, r0
   d6b5c:	2401      	moveq	r4, #1
   d6b5e:	4620      	mov	r0, r4
   d6b60:	f7fd ff20 	bl	d49a4 <malloc>
   d6b64:	b920      	cbnz	r0, d6b70 <_ZnwjRKSt9nothrow_t+0x1c>
   d6b66:	f7ff ffeb 	bl	d6b40 <_ZSt15get_new_handlerv>
   d6b6a:	b108      	cbz	r0, d6b70 <_ZnwjRKSt9nothrow_t+0x1c>
   d6b6c:	4780      	blx	r0
   d6b6e:	e7f6      	b.n	d6b5e <_ZnwjRKSt9nothrow_t+0xa>
   d6b70:	bd10      	pop	{r4, pc}
	...

000d6b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6b74:	4b18      	ldr	r3, [pc, #96]	; (d6bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6b76:	681a      	ldr	r2, [r3, #0]
   d6b78:	07d1      	lsls	r1, r2, #31
   d6b7a:	bf5c      	itt	pl
   d6b7c:	2201      	movpl	r2, #1
   d6b7e:	601a      	strpl	r2, [r3, #0]
   d6b80:	4b16      	ldr	r3, [pc, #88]	; (d6bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b82:	681a      	ldr	r2, [r3, #0]
   d6b84:	07d2      	lsls	r2, r2, #31
   d6b86:	bf5c      	itt	pl
   d6b88:	2201      	movpl	r2, #1
   d6b8a:	601a      	strpl	r2, [r3, #0]
   d6b8c:	4b14      	ldr	r3, [pc, #80]	; (d6be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b8e:	681a      	ldr	r2, [r3, #0]
   d6b90:	07d0      	lsls	r0, r2, #31
   d6b92:	bf5c      	itt	pl
   d6b94:	2201      	movpl	r2, #1
   d6b96:	601a      	strpl	r2, [r3, #0]
   d6b98:	4b12      	ldr	r3, [pc, #72]	; (d6be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b9a:	681a      	ldr	r2, [r3, #0]
   d6b9c:	07d1      	lsls	r1, r2, #31
   d6b9e:	bf5c      	itt	pl
   d6ba0:	2201      	movpl	r2, #1
   d6ba2:	601a      	strpl	r2, [r3, #0]
   d6ba4:	4b10      	ldr	r3, [pc, #64]	; (d6be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6ba6:	681a      	ldr	r2, [r3, #0]
   d6ba8:	07d2      	lsls	r2, r2, #31
   d6baa:	bf5c      	itt	pl
   d6bac:	2201      	movpl	r2, #1
   d6bae:	601a      	strpl	r2, [r3, #0]
   d6bb0:	4b0e      	ldr	r3, [pc, #56]	; (d6bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6bb2:	681a      	ldr	r2, [r3, #0]
   d6bb4:	07d0      	lsls	r0, r2, #31
   d6bb6:	bf5c      	itt	pl
   d6bb8:	2201      	movpl	r2, #1
   d6bba:	601a      	strpl	r2, [r3, #0]
   d6bbc:	4b0c      	ldr	r3, [pc, #48]	; (d6bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6bbe:	681a      	ldr	r2, [r3, #0]
   d6bc0:	07d1      	lsls	r1, r2, #31
   d6bc2:	bf5c      	itt	pl
   d6bc4:	2201      	movpl	r2, #1
   d6bc6:	601a      	strpl	r2, [r3, #0]
   d6bc8:	4b0a      	ldr	r3, [pc, #40]	; (d6bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6bca:	681a      	ldr	r2, [r3, #0]
   d6bcc:	07d2      	lsls	r2, r2, #31
   d6bce:	bf5c      	itt	pl
   d6bd0:	2201      	movpl	r2, #1
   d6bd2:	601a      	strpl	r2, [r3, #0]
   d6bd4:	4770      	bx	lr
   d6bd6:	bf00      	nop
   d6bd8:	2003e76c 	.word	0x2003e76c
   d6bdc:	2003e768 	.word	0x2003e768
   d6be0:	2003e764 	.word	0x2003e764
   d6be4:	2003e760 	.word	0x2003e760
   d6be8:	2003e75c 	.word	0x2003e75c
   d6bec:	2003e758 	.word	0x2003e758
   d6bf0:	2003e754 	.word	0x2003e754
   d6bf4:	2003e750 	.word	0x2003e750

000d6bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6bf8:	4b24      	ldr	r3, [pc, #144]	; (d6c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6bfa:	681a      	ldr	r2, [r3, #0]
   d6bfc:	07d0      	lsls	r0, r2, #31
   d6bfe:	bf5c      	itt	pl
   d6c00:	2201      	movpl	r2, #1
   d6c02:	601a      	strpl	r2, [r3, #0]
   d6c04:	4b22      	ldr	r3, [pc, #136]	; (d6c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6c06:	681a      	ldr	r2, [r3, #0]
   d6c08:	07d1      	lsls	r1, r2, #31
   d6c0a:	bf5c      	itt	pl
   d6c0c:	2201      	movpl	r2, #1
   d6c0e:	601a      	strpl	r2, [r3, #0]
   d6c10:	4b20      	ldr	r3, [pc, #128]	; (d6c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6c12:	681a      	ldr	r2, [r3, #0]
   d6c14:	07d2      	lsls	r2, r2, #31
   d6c16:	bf5c      	itt	pl
   d6c18:	2201      	movpl	r2, #1
   d6c1a:	601a      	strpl	r2, [r3, #0]
   d6c1c:	4b1e      	ldr	r3, [pc, #120]	; (d6c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6c1e:	681a      	ldr	r2, [r3, #0]
   d6c20:	07d0      	lsls	r0, r2, #31
   d6c22:	bf5c      	itt	pl
   d6c24:	2201      	movpl	r2, #1
   d6c26:	601a      	strpl	r2, [r3, #0]
   d6c28:	4b1c      	ldr	r3, [pc, #112]	; (d6c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6c2a:	681a      	ldr	r2, [r3, #0]
   d6c2c:	07d1      	lsls	r1, r2, #31
   d6c2e:	bf5c      	itt	pl
   d6c30:	2201      	movpl	r2, #1
   d6c32:	601a      	strpl	r2, [r3, #0]
   d6c34:	4b1a      	ldr	r3, [pc, #104]	; (d6ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	07d2      	lsls	r2, r2, #31
   d6c3a:	bf5c      	itt	pl
   d6c3c:	2201      	movpl	r2, #1
   d6c3e:	601a      	strpl	r2, [r3, #0]
   d6c40:	4b18      	ldr	r3, [pc, #96]	; (d6ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6c42:	681a      	ldr	r2, [r3, #0]
   d6c44:	07d0      	lsls	r0, r2, #31
   d6c46:	bf5c      	itt	pl
   d6c48:	2201      	movpl	r2, #1
   d6c4a:	601a      	strpl	r2, [r3, #0]
   d6c4c:	4b16      	ldr	r3, [pc, #88]	; (d6ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6c4e:	681a      	ldr	r2, [r3, #0]
   d6c50:	07d1      	lsls	r1, r2, #31
   d6c52:	bf5c      	itt	pl
   d6c54:	2201      	movpl	r2, #1
   d6c56:	601a      	strpl	r2, [r3, #0]
   d6c58:	4b14      	ldr	r3, [pc, #80]	; (d6cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6c5a:	681a      	ldr	r2, [r3, #0]
   d6c5c:	07d2      	lsls	r2, r2, #31
   d6c5e:	bf5c      	itt	pl
   d6c60:	2201      	movpl	r2, #1
   d6c62:	601a      	strpl	r2, [r3, #0]
   d6c64:	4b12      	ldr	r3, [pc, #72]	; (d6cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6c66:	681a      	ldr	r2, [r3, #0]
   d6c68:	07d0      	lsls	r0, r2, #31
   d6c6a:	bf5c      	itt	pl
   d6c6c:	2201      	movpl	r2, #1
   d6c6e:	601a      	strpl	r2, [r3, #0]
   d6c70:	4b10      	ldr	r3, [pc, #64]	; (d6cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6c72:	681a      	ldr	r2, [r3, #0]
   d6c74:	07d1      	lsls	r1, r2, #31
   d6c76:	bf5c      	itt	pl
   d6c78:	2201      	movpl	r2, #1
   d6c7a:	601a      	strpl	r2, [r3, #0]
   d6c7c:	4b0e      	ldr	r3, [pc, #56]	; (d6cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6c7e:	681a      	ldr	r2, [r3, #0]
   d6c80:	07d2      	lsls	r2, r2, #31
   d6c82:	bf5c      	itt	pl
   d6c84:	2201      	movpl	r2, #1
   d6c86:	601a      	strpl	r2, [r3, #0]
   d6c88:	4770      	bx	lr
   d6c8a:	bf00      	nop
   d6c8c:	2003e79c 	.word	0x2003e79c
   d6c90:	2003e798 	.word	0x2003e798
   d6c94:	2003e794 	.word	0x2003e794
   d6c98:	2003e790 	.word	0x2003e790
   d6c9c:	2003e78c 	.word	0x2003e78c
   d6ca0:	2003e788 	.word	0x2003e788
   d6ca4:	2003e784 	.word	0x2003e784
   d6ca8:	2003e780 	.word	0x2003e780
   d6cac:	2003e77c 	.word	0x2003e77c
   d6cb0:	2003e778 	.word	0x2003e778
   d6cb4:	2003e774 	.word	0x2003e774
   d6cb8:	2003e770 	.word	0x2003e770

000d6cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6cbc:	4b24      	ldr	r3, [pc, #144]	; (d6d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6cbe:	681a      	ldr	r2, [r3, #0]
   d6cc0:	07d0      	lsls	r0, r2, #31
   d6cc2:	bf5c      	itt	pl
   d6cc4:	2201      	movpl	r2, #1
   d6cc6:	601a      	strpl	r2, [r3, #0]
   d6cc8:	4b22      	ldr	r3, [pc, #136]	; (d6d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6cca:	681a      	ldr	r2, [r3, #0]
   d6ccc:	07d1      	lsls	r1, r2, #31
   d6cce:	bf5c      	itt	pl
   d6cd0:	2201      	movpl	r2, #1
   d6cd2:	601a      	strpl	r2, [r3, #0]
   d6cd4:	4b20      	ldr	r3, [pc, #128]	; (d6d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6cd6:	681a      	ldr	r2, [r3, #0]
   d6cd8:	07d2      	lsls	r2, r2, #31
   d6cda:	bf5c      	itt	pl
   d6cdc:	2201      	movpl	r2, #1
   d6cde:	601a      	strpl	r2, [r3, #0]
   d6ce0:	4b1e      	ldr	r3, [pc, #120]	; (d6d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6ce2:	681a      	ldr	r2, [r3, #0]
   d6ce4:	07d0      	lsls	r0, r2, #31
   d6ce6:	bf5c      	itt	pl
   d6ce8:	2201      	movpl	r2, #1
   d6cea:	601a      	strpl	r2, [r3, #0]
   d6cec:	4b1c      	ldr	r3, [pc, #112]	; (d6d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6cee:	681a      	ldr	r2, [r3, #0]
   d6cf0:	07d1      	lsls	r1, r2, #31
   d6cf2:	bf5c      	itt	pl
   d6cf4:	2201      	movpl	r2, #1
   d6cf6:	601a      	strpl	r2, [r3, #0]
   d6cf8:	4b1a      	ldr	r3, [pc, #104]	; (d6d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6cfa:	681a      	ldr	r2, [r3, #0]
   d6cfc:	07d2      	lsls	r2, r2, #31
   d6cfe:	bf5c      	itt	pl
   d6d00:	2201      	movpl	r2, #1
   d6d02:	601a      	strpl	r2, [r3, #0]
   d6d04:	4b18      	ldr	r3, [pc, #96]	; (d6d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6d06:	681a      	ldr	r2, [r3, #0]
   d6d08:	07d0      	lsls	r0, r2, #31
   d6d0a:	bf5c      	itt	pl
   d6d0c:	2201      	movpl	r2, #1
   d6d0e:	601a      	strpl	r2, [r3, #0]
   d6d10:	4b16      	ldr	r3, [pc, #88]	; (d6d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6d12:	681a      	ldr	r2, [r3, #0]
   d6d14:	07d1      	lsls	r1, r2, #31
   d6d16:	bf5c      	itt	pl
   d6d18:	2201      	movpl	r2, #1
   d6d1a:	601a      	strpl	r2, [r3, #0]
   d6d1c:	4b14      	ldr	r3, [pc, #80]	; (d6d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6d1e:	681a      	ldr	r2, [r3, #0]
   d6d20:	07d2      	lsls	r2, r2, #31
   d6d22:	bf5c      	itt	pl
   d6d24:	2201      	movpl	r2, #1
   d6d26:	601a      	strpl	r2, [r3, #0]
   d6d28:	4b12      	ldr	r3, [pc, #72]	; (d6d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6d2a:	681a      	ldr	r2, [r3, #0]
   d6d2c:	07d0      	lsls	r0, r2, #31
   d6d2e:	bf5c      	itt	pl
   d6d30:	2201      	movpl	r2, #1
   d6d32:	601a      	strpl	r2, [r3, #0]
   d6d34:	4b10      	ldr	r3, [pc, #64]	; (d6d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6d36:	681a      	ldr	r2, [r3, #0]
   d6d38:	07d1      	lsls	r1, r2, #31
   d6d3a:	bf5c      	itt	pl
   d6d3c:	2201      	movpl	r2, #1
   d6d3e:	601a      	strpl	r2, [r3, #0]
   d6d40:	4b0e      	ldr	r3, [pc, #56]	; (d6d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6d42:	681a      	ldr	r2, [r3, #0]
   d6d44:	07d2      	lsls	r2, r2, #31
   d6d46:	bf5c      	itt	pl
   d6d48:	2201      	movpl	r2, #1
   d6d4a:	601a      	strpl	r2, [r3, #0]
   d6d4c:	4770      	bx	lr
   d6d4e:	bf00      	nop
   d6d50:	2003e7cc 	.word	0x2003e7cc
   d6d54:	2003e7c8 	.word	0x2003e7c8
   d6d58:	2003e7c4 	.word	0x2003e7c4
   d6d5c:	2003e7c0 	.word	0x2003e7c0
   d6d60:	2003e7bc 	.word	0x2003e7bc
   d6d64:	2003e7b8 	.word	0x2003e7b8
   d6d68:	2003e7b4 	.word	0x2003e7b4
   d6d6c:	2003e7b0 	.word	0x2003e7b0
   d6d70:	2003e7ac 	.word	0x2003e7ac
   d6d74:	2003e7a8 	.word	0x2003e7a8
   d6d78:	2003e7a4 	.word	0x2003e7a4
   d6d7c:	2003e7a0 	.word	0x2003e7a0

000d6d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6d80:	4b18      	ldr	r3, [pc, #96]	; (d6de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6d82:	681a      	ldr	r2, [r3, #0]
   d6d84:	07d1      	lsls	r1, r2, #31
   d6d86:	bf5c      	itt	pl
   d6d88:	2201      	movpl	r2, #1
   d6d8a:	601a      	strpl	r2, [r3, #0]
   d6d8c:	4b16      	ldr	r3, [pc, #88]	; (d6de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6d8e:	681a      	ldr	r2, [r3, #0]
   d6d90:	07d2      	lsls	r2, r2, #31
   d6d92:	bf5c      	itt	pl
   d6d94:	2201      	movpl	r2, #1
   d6d96:	601a      	strpl	r2, [r3, #0]
   d6d98:	4b14      	ldr	r3, [pc, #80]	; (d6dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6d9a:	681a      	ldr	r2, [r3, #0]
   d6d9c:	07d0      	lsls	r0, r2, #31
   d6d9e:	bf5c      	itt	pl
   d6da0:	2201      	movpl	r2, #1
   d6da2:	601a      	strpl	r2, [r3, #0]
   d6da4:	4b12      	ldr	r3, [pc, #72]	; (d6df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6da6:	681a      	ldr	r2, [r3, #0]
   d6da8:	07d1      	lsls	r1, r2, #31
   d6daa:	bf5c      	itt	pl
   d6dac:	2201      	movpl	r2, #1
   d6dae:	601a      	strpl	r2, [r3, #0]
   d6db0:	4b10      	ldr	r3, [pc, #64]	; (d6df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6db2:	681a      	ldr	r2, [r3, #0]
   d6db4:	07d2      	lsls	r2, r2, #31
   d6db6:	bf5c      	itt	pl
   d6db8:	2201      	movpl	r2, #1
   d6dba:	601a      	strpl	r2, [r3, #0]
   d6dbc:	4b0e      	ldr	r3, [pc, #56]	; (d6df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6dbe:	681a      	ldr	r2, [r3, #0]
   d6dc0:	07d0      	lsls	r0, r2, #31
   d6dc2:	bf5c      	itt	pl
   d6dc4:	2201      	movpl	r2, #1
   d6dc6:	601a      	strpl	r2, [r3, #0]
   d6dc8:	4b0c      	ldr	r3, [pc, #48]	; (d6dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6dca:	681a      	ldr	r2, [r3, #0]
   d6dcc:	07d1      	lsls	r1, r2, #31
   d6dce:	bf5c      	itt	pl
   d6dd0:	2201      	movpl	r2, #1
   d6dd2:	601a      	strpl	r2, [r3, #0]
   d6dd4:	4b0a      	ldr	r3, [pc, #40]	; (d6e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6dd6:	681a      	ldr	r2, [r3, #0]
   d6dd8:	07d2      	lsls	r2, r2, #31
   d6dda:	bf5c      	itt	pl
   d6ddc:	2201      	movpl	r2, #1
   d6dde:	601a      	strpl	r2, [r3, #0]
   d6de0:	4770      	bx	lr
   d6de2:	bf00      	nop
   d6de4:	2003e7ec 	.word	0x2003e7ec
   d6de8:	2003e7e8 	.word	0x2003e7e8
   d6dec:	2003e7e4 	.word	0x2003e7e4
   d6df0:	2003e7e0 	.word	0x2003e7e0
   d6df4:	2003e7dc 	.word	0x2003e7dc
   d6df8:	2003e7d8 	.word	0x2003e7d8
   d6dfc:	2003e7d4 	.word	0x2003e7d4
   d6e00:	2003e7d0 	.word	0x2003e7d0

000d6e04 <__cxa_atexit>:
   d6e04:	b510      	push	{r4, lr}
   d6e06:	4c05      	ldr	r4, [pc, #20]	; (d6e1c <__cxa_atexit+0x18>)
   d6e08:	4613      	mov	r3, r2
   d6e0a:	b12c      	cbz	r4, d6e18 <__cxa_atexit+0x14>
   d6e0c:	460a      	mov	r2, r1
   d6e0e:	4601      	mov	r1, r0
   d6e10:	2002      	movs	r0, #2
   d6e12:	f3af 8000 	nop.w
   d6e16:	bd10      	pop	{r4, pc}
   d6e18:	4620      	mov	r0, r4
   d6e1a:	bd10      	pop	{r4, pc}
   d6e1c:	00000000 	.word	0x00000000

000d6e20 <memcmp>:
   d6e20:	b510      	push	{r4, lr}
   d6e22:	3901      	subs	r1, #1
   d6e24:	4402      	add	r2, r0
   d6e26:	4290      	cmp	r0, r2
   d6e28:	d007      	beq.n	d6e3a <memcmp+0x1a>
   d6e2a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6e2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6e32:	42a3      	cmp	r3, r4
   d6e34:	d0f7      	beq.n	d6e26 <memcmp+0x6>
   d6e36:	1b18      	subs	r0, r3, r4
   d6e38:	bd10      	pop	{r4, pc}
   d6e3a:	2000      	movs	r0, #0
   d6e3c:	bd10      	pop	{r4, pc}

000d6e3e <memcpy>:
   d6e3e:	b510      	push	{r4, lr}
   d6e40:	1e43      	subs	r3, r0, #1
   d6e42:	440a      	add	r2, r1
   d6e44:	4291      	cmp	r1, r2
   d6e46:	d004      	beq.n	d6e52 <memcpy+0x14>
   d6e48:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6e50:	e7f8      	b.n	d6e44 <memcpy+0x6>
   d6e52:	bd10      	pop	{r4, pc}

000d6e54 <memmove>:
   d6e54:	4288      	cmp	r0, r1
   d6e56:	b510      	push	{r4, lr}
   d6e58:	eb01 0302 	add.w	r3, r1, r2
   d6e5c:	d801      	bhi.n	d6e62 <memmove+0xe>
   d6e5e:	1e42      	subs	r2, r0, #1
   d6e60:	e00b      	b.n	d6e7a <memmove+0x26>
   d6e62:	4298      	cmp	r0, r3
   d6e64:	d2fb      	bcs.n	d6e5e <memmove+0xa>
   d6e66:	1881      	adds	r1, r0, r2
   d6e68:	1ad2      	subs	r2, r2, r3
   d6e6a:	42d3      	cmn	r3, r2
   d6e6c:	d004      	beq.n	d6e78 <memmove+0x24>
   d6e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6e72:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d6e76:	e7f8      	b.n	d6e6a <memmove+0x16>
   d6e78:	bd10      	pop	{r4, pc}
   d6e7a:	4299      	cmp	r1, r3
   d6e7c:	d004      	beq.n	d6e88 <memmove+0x34>
   d6e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e82:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6e86:	e7f8      	b.n	d6e7a <memmove+0x26>
   d6e88:	bd10      	pop	{r4, pc}

000d6e8a <memset>:
   d6e8a:	4402      	add	r2, r0
   d6e8c:	4603      	mov	r3, r0
   d6e8e:	4293      	cmp	r3, r2
   d6e90:	d002      	beq.n	d6e98 <memset+0xe>
   d6e92:	f803 1b01 	strb.w	r1, [r3], #1
   d6e96:	e7fa      	b.n	d6e8e <memset+0x4>
   d6e98:	4770      	bx	lr
	...

000d6e9c <srand>:
   d6e9c:	b538      	push	{r3, r4, r5, lr}
   d6e9e:	4b12      	ldr	r3, [pc, #72]	; (d6ee8 <srand+0x4c>)
   d6ea0:	681c      	ldr	r4, [r3, #0]
   d6ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6ea4:	4605      	mov	r5, r0
   d6ea6:	b9d3      	cbnz	r3, d6ede <srand+0x42>
   d6ea8:	2018      	movs	r0, #24
   d6eaa:	f7fd fd7b 	bl	d49a4 <malloc>
   d6eae:	f243 330e 	movw	r3, #13070	; 0x330e
   d6eb2:	63a0      	str	r0, [r4, #56]	; 0x38
   d6eb4:	8003      	strh	r3, [r0, #0]
   d6eb6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6eba:	8043      	strh	r3, [r0, #2]
   d6ebc:	f241 2334 	movw	r3, #4660	; 0x1234
   d6ec0:	8083      	strh	r3, [r0, #4]
   d6ec2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6ec6:	80c3      	strh	r3, [r0, #6]
   d6ec8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6ecc:	8103      	strh	r3, [r0, #8]
   d6ece:	2305      	movs	r3, #5
   d6ed0:	8143      	strh	r3, [r0, #10]
   d6ed2:	230b      	movs	r3, #11
   d6ed4:	8183      	strh	r3, [r0, #12]
   d6ed6:	2201      	movs	r2, #1
   d6ed8:	2300      	movs	r3, #0
   d6eda:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6ee0:	2200      	movs	r2, #0
   d6ee2:	611d      	str	r5, [r3, #16]
   d6ee4:	615a      	str	r2, [r3, #20]
   d6ee6:	bd38      	pop	{r3, r4, r5, pc}
   d6ee8:	2003dc48 	.word	0x2003dc48

000d6eec <strcpy>:
   d6eec:	4603      	mov	r3, r0
   d6eee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ef2:	f803 2b01 	strb.w	r2, [r3], #1
   d6ef6:	2a00      	cmp	r2, #0
   d6ef8:	d1f9      	bne.n	d6eee <strcpy+0x2>
   d6efa:	4770      	bx	lr

000d6efc <strlen>:
   d6efc:	4603      	mov	r3, r0
   d6efe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6f02:	2a00      	cmp	r2, #0
   d6f04:	d1fb      	bne.n	d6efe <strlen+0x2>
   d6f06:	1a18      	subs	r0, r3, r0
   d6f08:	3801      	subs	r0, #1
   d6f0a:	4770      	bx	lr

000d6f0c <strnlen>:
   d6f0c:	b510      	push	{r4, lr}
   d6f0e:	4603      	mov	r3, r0
   d6f10:	4401      	add	r1, r0
   d6f12:	428b      	cmp	r3, r1
   d6f14:	d004      	beq.n	d6f20 <strnlen+0x14>
   d6f16:	781a      	ldrb	r2, [r3, #0]
   d6f18:	1c5c      	adds	r4, r3, #1
   d6f1a:	b10a      	cbz	r2, d6f20 <strnlen+0x14>
   d6f1c:	4623      	mov	r3, r4
   d6f1e:	e7f8      	b.n	d6f12 <strnlen+0x6>
   d6f20:	1a18      	subs	r0, r3, r0
   d6f22:	bd10      	pop	{r4, pc}

000d6f24 <dynalib_user>:
   d6f24:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6f34:	0000 0000 0032 4536 3034 3030 3130 422d     ....2.6E400001-B
   d6f44:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   d6f54:	4530 3432 4344 4143 4539 3700 3445 3030     0E24DCCA9E.7E400
   d6f64:	3030 2d31 3542 3341 462d 3933 2d33 3045     001-B5A3-F393-E0
   d6f74:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   d6f84:	4536 3034 3030 3230 422d 4135 2d33 3346     6E400002-B5A3-F3
   d6f94:	3339 452d 4130 2d39 3545 4530 3432 4344     93-E0A9-E50E24DC
   d6fa4:	4143 4539 3600 3445 3030 3030 2d33 3542     CA9E.6E400003-B5
   d6fb4:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   d6fc4:	3245 4434 4343 3941 0045 4537 3034 3030     E24DCCA9E.7E4000
   d6fd4:	3230 422d 4135 2d33 3346 3339 452d 4130     02-B5A3-F393-E0A
   d6fe4:	2d39 3545 4530 3432 4344 4143 4539 3700     9-E50E24DCCA9E.7
   d6ff4:	3445 3030 3030 2d33 3542 3341 462d 3933     E400003-B5A3-F39
   d7004:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   d7014:	3941 0045                                   A9E.

000d7018 <_ZTVN5spark13EthernetClassE>:
	...
   d7020:	4a33 000d 4a29 000d 4a1f 000d 4a15 000d     3J..)J...J...J..
   d7030:	4a09 000d 49fd 000d 49f1 000d 49e9 000d     .J...I...I...I..
   d7040:	49df 000d 49d5 000d 6a55 000d 6977 6972     .I...I..Uj..wiri
   d7050:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d7060:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d7070:	6920 766e 6c61 6469 002e 0000                invalid....

000d707c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7084:	4caf 000d 4cb5 000d 5ff9 000d 4cdf 000d     .L...L..._...L..
   d7094:	4cb1 000d                                   .L..

000d7098 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d70a0:	4ca9 000d 4cc3 000d 61b5 000d 4ce3 000d     .L...L...a...L..
   d70b0:	4cab 000d                                   .L..

000d70b4 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d70bc:	4ca3 000d 4cd1 000d 570b 000d 4ce7 000d     .L...L...W...L..
   d70cc:	4ca5 000d 6977 6972 676e 622e 656c 5300     .L..wiring.ble.S
   d70dc:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d70ec:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d70fc:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d710c:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d711c:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d712c:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d713c:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d714c:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d715c:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d716c:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d717c:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d718c:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d719c:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d71ac:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d71bc:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d71cc:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d71dc:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d71ec:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d71fc:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d720c:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d721c:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d722c:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d723c:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d724c:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d725c:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d726c:	6465 002e                                   ed..

000d7270 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d7270:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d7280:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d7290:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d72a0:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d72b0:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d72c0:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d72d0:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d72e0:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d72f0:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d7300:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d7310:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d7320:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d7330:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d7340:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d7350:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d7360:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d7370:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d7380:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d738c <_ZTV9IPAddress>:
	...
   d7394:	6515 000d 6505 000d 6507 000d               .e...e...e..

000d73a0 <_ZTV9USBSerial>:
	...
   d73a8:	65ed 000d 663d 000d 664b 000d 6301 000d     .e..=f..Kf...c..
   d73b8:	6629 000d 65ef 000d 6605 000d 6637 000d     )f...e...f..7f..
   d73c8:	661b 000d 65e9 000d                         .f...e..

000d73d0 <_ZTV11USARTSerial>:
	...
   d73d8:	66f9 000d 6749 000d 6757 000d 6301 000d     .f..Ig..Wg...c..
   d73e8:	670d 000d 672f 000d 671b 000d 6743 000d     .g../g...g..Cg..
   d73f8:	66fb 000d 66ff 000d                         .f...f..

000d7400 <_ZTVN5spark9MeshClassE>:
	...
   d7408:	6853 000d 6849 000d 683f 000d 6835 000d     Sh..Ih..?h..5h..
   d7418:	6829 000d 681d 000d 6811 000d 6809 000d     )h...h...h...h..
   d7428:	67ff 000d 67f5 000d 6a55 000d               .g...g..Uj..

000d7434 <_ZTVN5spark9WiFiClassE>:
	...
   d743c:	69cf 000d 69c5 000d 69bb 000d 6971 000d     .i...i...i..qi..
   d744c:	69af 000d 69a3 000d 6997 000d 698f 000d     .i...i...i...i..
   d745c:	6985 000d 697b 000d 6a55 000d               .i..{i..Uj..

000d7468 <_ZTVN5spark12NetworkClassE>:
	...
   d7470:	69ed 000d 69f7 000d 6a01 000d 6a0b 000d     .i...i...j...j..
   d7480:	6a15 000d 6a21 000d 6a2d 000d 6a39 000d     .j..!j..-j..9j..
   d7490:	6a41 000d 6a4b 000d 6a55 000d               Aj..Kj..Uj..

000d749c <_ZSt7nothrow>:
   d749c:	0000 0000                                   ....

000d74a0 <__sf_fake_stdin>:
	...

000d74c0 <__sf_fake_stdout>:
	...

000d74e0 <__sf_fake_stderr>:
	...
   d7500:	0043                                        C.

000d7502 <link_const_variable_data_end>:
	...

000d7504 <link_constructors_location>:
   d7504:	000d442d 	.word	0x000d442d
   d7508:	000d4a3d 	.word	0x000d4a3d
   d750c:	000d4b99 	.word	0x000d4b99
   d7510:	000d62d9 	.word	0x000d62d9
   d7514:	000d6395 	.word	0x000d6395
   d7518:	000d63a5 	.word	0x000d63a5
   d751c:	000d63d9 	.word	0x000d63d9
   d7520:	000d6921 	.word	0x000d6921
   d7524:	000d69d9 	.word	0x000d69d9
   d7528:	000d6b21 	.word	0x000d6b21
   d752c:	000d6b75 	.word	0x000d6b75
   d7530:	000d6bf9 	.word	0x000d6bf9
   d7534:	000d6cbd 	.word	0x000d6cbd
   d7538:	000d6d81 	.word	0x000d6d81

000d753c <link_constructors_end>:
   d753c:	00000000 	.word	0x00000000
